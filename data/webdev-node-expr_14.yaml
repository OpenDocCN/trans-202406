- en: Chapter 14\. Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing is one of the most important aspects of your website or web service;
    fortunately, routing in Express is simple, flexible, and robust. *Routing* is
    the mechanism by which requests (as specified by a URL and HTTP method) are routed
    to the code that handles them. As we’ve already noted, routing used to be file
    based and simple. For example, if you put the file *foo/about.html* on your website,
    you would access it from the browser with the path */foo/about.html*. Simple but
    inflexible. And, in case you hadn’t noticed, having *html* in your URL is extremely
    passé these days.
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into the technical aspects of routing with Express, we should
    discuss the concept of *information architecture* (IA). IA refers to the conceptual
    organization of your content. Having an extensible (but not overcomplicated) IA
    before you begin thinking about routing will pay huge dividends down the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most intelligent and timeless essays on IA is by Tim Berners-Lee,
    who practically *invented the internet*. You can (and should) read it now: [*http://www.w3.org/Provider/Style/URI.html*](http://www.w3.org/Provider/Style/URI.html).
    It was written in 1998\. Let that sink in for a minute; there’s not much that
    was written on internet technology in 1998 that is just as true today as it was
    then.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From that essay, here is the lofty responsibility we are being asked to take
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: It is the duty of a Webmaster to allocate URIs which you will be able to stand
    by in 2 years, in 20 years, in 200 years. This needs thought, and organization,
    and commitment.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tim Berners-Lee
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I like to think that if web design ever required professional licensing, like
    other kinds of engineering, that we would take an oath to that effect. (The astute
    reader of that article will find humor in the fact that the URL to that article
    ends with *.html*.)
  prefs: []
  type: TYPE_NORMAL
- en: To make an analogy (that may sadly be lost on the younger audience), imagine
    that every two years your favorite library completely reordered the Dewey decimal
    system. You would walk into the library one day and you wouldn’t be able to find
    anything. That’s exactly what happens when you redesign your URL structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put some serious thought into your URLs. Will they still make sense in 20 years?
    (200 years may be a bit of a stretch: who knows if we’ll even be using URLs by
    then. Still, I admire the dedication of thinking that far into the future.) Carefully
    consider the breakdown of your content. Categorize things logically, and try not
    to paint yourself into a corner. It’s a science, but it’s also an art.'
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps most important, work with others to design your URLs. Even if you are
    the best information architect for miles around, you might be surprised at how
    people look at the same content with a different perspective. I’m not saying that
    you should try for an IA that makes sense from *everyone’s* perspective (because
    that is usually quite impossible), but being able to see the problem from multiple
    perspectives will give you better ideas and expose the flaws in your own IA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some suggestions to help you achieve a lasting IA:'
  prefs: []
  type: TYPE_NORMAL
- en: Never expose technical details in your URLs
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever been to a website, noticed that the URL ended in *.asp*, and thought
    that the website was hopelessly out-of-date? Remember that, once upon a time,
    ASP was cutting-edge. Though it pains me to say it, so too shall fall JavaScript
    and JSON and Node and Express. I hope it’s not for many, many productive years,
    but time is not often kind to technology.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid meaningless information in your URLs
  prefs: []
  type: TYPE_NORMAL
- en: Think carefully about every word in your URL. If it doesn’t mean anything, leave
    it out. For example, it always makes me cringe when websites use the word *home*
    in URLs. Your root URL *is* your home page. You don’t need to additionally have
    URLs like */home/directions* and */home/contact*.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid needlessly long URLs
  prefs: []
  type: TYPE_NORMAL
- en: All things being equal, a short URL is better than a longer URL. However, you
    should not try to make URLs short at the expense of clarity or SEO. Abbreviations
    are tempting, but think carefully about them. They should be common and ubiquitous
    before you immortalize them in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Be consistent with word separators
  prefs: []
  type: TYPE_NORMAL
- en: It’s quite common to separate words with hyphens, and a little less common to
    do so with underscores. Hyphens are generally considered more aesthetically pleasing
    than underscores, and most SEO experts recommend them. Whether you choose hyphens
    or underscores, be consistent in their use.
  prefs: []
  type: TYPE_NORMAL
- en: Never use whitespace or untypable characters
  prefs: []
  type: TYPE_NORMAL
- en: Whitespace in a URL is not recommended. It will usually just be converted to
    a plus sign (+), leading to confusion. It should be obvious that you should avoid
    untypable characters, and I caution you strongly against using any characters
    other than alphanumeric characters, numbers, dashes, and underscores. It may feel
    clever at the time, but “clever” has a way of not standing the test of time. Obviously,
    if your website is not for an English audience, you may use non-English characters
    (using percent codes), though that can cause headaches if you ever want to localize
    your website.
  prefs: []
  type: TYPE_NORMAL
- en: Use lowercase for your URLs
  prefs: []
  type: TYPE_NORMAL
- en: This one will cause some debate. There are those who feel that mixed case in
    URLs is not only acceptable, but preferable. I don’t want to get in a religious
    debate over this, but I will point out that the advantage of lowercase is that
    it can always automatically be generated by code. If you’ve ever had to go through
    a website and sanitize thousands of links or do string comparisons, you will appreciate
    this argument. I personally feel that lowercase URLs are more aesthetically pleasing,
    but in the end, this decision is up to you.
  prefs: []
  type: TYPE_NORMAL
- en: Routes and SEO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want your website to be discoverable (and most people do), then you need
    to think about SEO and how your URLs can affect it. In particular, if there are
    certain keywords that are important—*and it makes sense*—consider making them
    part of the URL. For example, Meadowlark Travel offers several Oregon Coast vacations.
    To ensure high search engine ranking for these vacations, we use the string “Oregon
    Coast” in the title, header, body, and meta description, and the URLs start with
    */vacations/oregon-coast*. The Manzanita vacation package can be found at */vacations/oregon-coast/manzanita*.
    If, to shorten the URL, we simply used */vacations/manzanita*, we would be losing
    out on valuable SEO.
  prefs: []
  type: TYPE_NORMAL
- en: That said, resist the temptation to carelessly jam keywords into URLs in an
    attempt to improve your rankings. It will fail. For example, changing the Manzanita
    vacation URL to */vacations/oregon-coast-portland-and-hood-river/oregon-coast/manzanita*
    in an effort to say “Oregon Coast” one more time, and also work the “Portland”
    and “Hood River” keywords in at the same time, is wrong-headed. It flies in the
    face of good IA and will likely backfire.
  prefs: []
  type: TYPE_NORMAL
- en: Subdomains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with the path, subdomains are the other part of the URL that is commonly
    used to route requests. Subdomains are best reserved for significantly different
    parts of your application—for example, a REST API (*api.meadowlarktravel.com*)
    or an admin interface (*admin.meadowlarktravel.com*). Sometimes subdomains are
    used for technical reasons. For example, if we were to build our blog with WordPress
    (while the rest of our site uses Express), it can be easier to use *blog.meadowlarktravel.com*
    (a better solution would be to use a proxy server, such as NGINX). There are usually
    SEO consequences to partitioning your content using subdomains, which is why you
    should generally reserve them for areas of your site that aren’t important to
    SEO, such as admin areas and APIs. Keep this in mind and make sure there’s no
    other option before using a subdomain for content that is important to your SEO
    plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'The routing mechanism in Express does not take subdomains into account by default:
    `app.get(*/about*)` will handle requests for *http://meadowlarktravel.com/about*,
    *http://www.meadowlarktravel.com/about*, and *http://admin.meadowlarktravel.com/about*.
    If you want to handle a subdomain separately, you can use a package called `vhost`
    (for “virtual host,” which comes from an Apache mechanism commonly used for handling
    subdomains). First, install the package (`npm install vhost`). To test domain-based
    routing on your dev machine, you’ll need some way to “fake” domain names. Fortunately,
    this is what your *hosts file* is for. On macOS and Linux machines, it can be
    found at */etc/hosts*, and on Windows, it’s at *c:\windows\system32\drivers\etc\hosts*.
    Add the following to your hosts file (you will need admin privileges to edit it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This tells your computer to treat `meadowlark.local` and `admin.meadowlark.local`
    just like regular internet domains but to map them to localhost (127.0.0.1). We
    use the `.local` top-level domain so as not to get confused (you could use `.com`
    or any other internet domain, but it would override the real domain, which can
    lead to frustration).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you can use the `vhost` middleware to use domain-aware routing (*ch14/00-subdomains.js*
    in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`express.Router()` essentially creates a new instance of the Express router.
    You can treat this instance just like your original instance (`app`). You can
    add routes and middleware just as you would to `app`. However, it won’t do anything
    until you add it to `app`. We add it through `vhost`, which binds that router
    instance to that subdomain.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`express.Router` is also useful for partitioning your routes so that you can
    link in many route handlers at once. See the [Express routing documentation](http://bit.ly/2X8VC59)
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: Route Handlers Are Middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve already seen basic routing of matching a given path. But what does `app.get(\''/foo'',
    ...)` actually *do*? As we saw in [Chapter 10](ch10.xhtml#ch_middleware), it’s
    simply a specialized piece of middleware, down to having a `next` method passed
    in. Let’s look at some more sophisticated examples (*ch14/01-fifty-fifty.js* in
    the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we have two handlers for the same route. Normally,
    the first one would win, but in this case, the first one is going to pass approximately
    half the time, giving the second one a chance. We don’t even have to use `app.get`
    twice: you can use as many handlers as you want for a single `app.get` call. Here’s
    an example that has an approximately equal chance of three different responses
    (*ch14/02-red-green-blue.js* in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'While this may not seem particularly useful at first, it allows you to create
    generic functions that can be used in any of your routes. For example, let’s say
    we have a mechanism that shows special offers on certain pages. The special offers
    change frequently, and they’re not shown on every page. We can create a function
    to inject the specials into the `res.locals` property (which you’ll remember from
    [Chapter 7](ch07.xhtml#ch_templating)) (*ch14/03-specials.js* in the companion
    repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also implement an authorization mechanism with this approach. Let’s
    say our user authorization code sets a session variable called `req.session.authorized`.
    We can use the following to make a reusable authorization filter (*ch14/04-authorizer.js*
    in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Route Paths and Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you specify a path (like */foo*) in your route, it’s eventually converted
    to a regular expression by Express. Some regular expression metacharacters are
    available in route paths: `+`, `?`, `*`, `(`, and `)`. Let’s look at a couple
    of examples. Let’s say you want the URLs */user* and */username* to be handled
    by the same route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'One of my favorite novelty websites—now sadly defunct—was *http://khaaan.com*.
    All it was was everyone’s favorite starship captain belting his most iconic line.
    Useless, but made me smile every time. Let’s say we want to make our own “KHAAAAAAAAN”
    page but we don’t want our users to have to remember if it’s 2 *a*’s or 3 or 10\.
    The following will get the job done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Not all normal regex metacharacters have meaning in route paths, though—only
    the ones listed earlier. This is important, because periods, which are normally
    a regex metacharacter meaning “any character,” can be used in routes unescaped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, if you really need the full power of regular expressions for your route,
    that is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I have yet to find a good reason for using regex metacharacters in my route
    paths, much less full regexes, but it’s good to be aware the functionality is
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Route Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While regex routes may find little day-to-day use in your Expression toolbox,
    you’ll most likely be using route parameters quite frequently. In short, it’s
    a way to turn part of your route into a variable parameter. Let’s say in our website
    we want to have a page for each staff member. We have a database of staff members
    with bios and pictures. As our company grows, it becomes more and more unwieldy
    to add a new route for each staff member. Let’s see how route parameters can help
    us (*ch14/05-staff.js* in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how we used *:name* in our route. That will match any string (that doesn’t
    include a forward slash) and put it in the `req.params` object with the key `name`.
    This is a feature we will be using often, especially when creating a REST API.
    You can have multiple parameters in our route. For example, if we want to break
    up our staff listing by city, we can use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Organizing Routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may be clear to you already that it would be unwieldy to define all of our
    routes in the main application file. Not only will that file grow over time, it’s
    also not a great separation of functionality because there’s a lot going on in
    that file already. A simple site may have only a dozen routes or fewer, but a
    larger site could have hundreds of routes.
  prefs: []
  type: TYPE_NORMAL
- en: So how to organize your routes? Well, how do you *want* to organize your routes?
    Express is not opinionated about how you organize your routes, so how you do it
    is limited only by your own imagination.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll cover some popular ways to handle routes in the next sections, but at
    the end of the day, I recommend four guiding principles for deciding how to organize
    your routes:'
  prefs: []
  type: TYPE_NORMAL
- en: Use named functions for route handlers
  prefs: []
  type: TYPE_NORMAL
- en: Writing route handlers inline by actually defining the function that handles
    the route right then and there is fine for small applications or prototyping,
    but it will quickly become unwieldy as your website grows.
  prefs: []
  type: TYPE_NORMAL
- en: Routes should not be mysterious
  prefs: []
  type: TYPE_NORMAL
- en: This principle is intentionally vague because a large, complex website may by
    necessity require a more complicated organizational scheme than a 10-page website.
    At one end of the spectrum is simply putting *all* of the routes for your website
    in one single file so you know where they are. For large websites, this may be
    undesirable, so you break the routes out by functional areas. However, even then,
    it should be clear where you should go to look for a given route. When you need
    to fix something, the last thing you want to do is have to spend an hour figuring
    out where the route is being handled. I had an ASP.NET MVC project at work that
    was a nightmare in this respect. The routes were handled in at least 10 different
    places, and it wasn’t logical or consistent and was often contradictory. Even
    though I was intimately familiar with that (very large) website, I still had to
    spend a significant amount of time tracking down where certain URLs were handled.
  prefs: []
  type: TYPE_NORMAL
- en: Route organization should be extensible
  prefs: []
  type: TYPE_NORMAL
- en: If you have 20 or 30 routes now, defining them all in one file is probably fine.
    What about in three years when you have 200 routes? It can happen. Whatever method
    you choose, you should ensure you have room to grow.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t overlook automatic view-based route handlers
  prefs: []
  type: TYPE_NORMAL
- en: 'If your site consists of many pages that are static and have fixed URLs, all
    of your routes will end up looking like this: `app.get(''/static/thing'', (req,
    res) => res.render(\''static/thing''))`. To reduce needless code repetition, consider
    using an automatic view-based route handler. This approach is described later
    in this chapter and can be used together with custom routes.'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring Routes in a Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to organizing our routes is getting them all into their own
    module. There are multiple ways to do this. One approach is to have your module
    return an array of objects containing method and handler properties. Then you
    could define the routes in your application file thusly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This method has its advantages and could be well suited to storing our routes
    dynamically, such as in a database or a JSON file. However, if you don’t need
    that functionality, I recommend passing the `app` instance to the module and letting
    it add the routes. That’s the approach we’ll take for our example. Create a file
    called *routes.js* and move all of our existing routes into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If we just cut and paste, we’ll probably run into some problems. For example,
    if we have inline route handlers that use variables or methods not available in
    the new context, those references will now be broken. We could add the necessary
    imports, but hold off on that. We’ll be moving the handlers into their own module
    soon, and we’ll solve the problem then.
  prefs: []
  type: TYPE_NORMAL
- en: 'So how do we link our routes in? Simple: in *meadowlark.js*, we simply import
    our routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we could be more explicit and add a named import (which we name `addRoutes`
    to better reflect its nature as a function; we could also name the file this way
    if we wanted):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Grouping Handlers Logically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To meet our first guiding principle (use named functions for route handlers),
    we’ll need somewhere to put those handlers. One rather extreme option is to have
    a separate JavaScript file for every handler. It’s hard for me to imagine a situation
    in which this approach would have benefit. It’s better to somehow group related
    functionality together. That makes it easier not only to leverage shared functionality,
    but also to make changes in related methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let’s group our functionality into separate files: *handlers/main.js*,
    where we’ll put the home page handler, the “about” handler, and generally any
    handler that doesn’t have another logical home; *handlers/vacations.js*, where
    vacation-related handlers will go; and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider *handlers/main.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s modify *routes.js* to make use of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This satisfies all of our guiding principles. */routes.js* is *very* straightforward.
    It’s easy to see at a glance what routes are in your site and where they are being
    handled. We’ve also left ourselves plenty of room to grow. We can group related
    functionality in as many different files as we need. And if *routes.js* ever gets
    unwieldy, we can use the same technique again and pass the `app` object on to
    another module that will in turn register more routes (though that is starting
    to veer into the “overcomplicated” territory—make sure you can really justify
    an approach that complicated!).
  prefs: []
  type: TYPE_NORMAL
- en: Automatically Rendering Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you ever find yourself wishing for the days of old where you could just put
    an HTML file in a directory and—presto!—your website would serve it, then you’re
    not alone. If your website is content-heavy without a lot of functionality, you
    may find it a needless hassle to add a route for every view. Fortunately, we can
    get around this problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you want to add the file *views/foo.handlebars* and just magically
    have it available on the route */foo*. Let’s see how we might do that. In our
    application file, right before the 404 handler, add the following middleware (*ch14/06-auto-views.js*
    in the companion repo):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we can just add a *.handlebars* file to the *view* directory and have it
    magically render on the appropriate path. Note that regular routes will circumvent
    this mechanism (because we placed the automatic view handler after all other routes),
    so if you have a route that renders a different view for the route */foo*, that
    will take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this approach will run into problems if you *delete* a view that had
    been visited; it will have been added to the `autoViews` object, so subsequent
    views will try to render it even though it’s been deleted, resulting in an error.
    The problem could be solved by wrapping the rendering in a `try/catch` block and
    removing the view from `autoViews` when an error is discovered; I will leave this
    enhancement as a reader’s exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing is an important part of your project, and there are many more possible
    approaches to organizing your route handlers than outlined here, so feel free
    to experiment and find a technique that works for you and your project. I encourage
    you to favor techniques that are clear and easy to trace. Routing is very much
    a map from the outside world (the client, usually a browser) to the server-side
    code that responds to it. If that map is convoluted, it makes it difficult for
    you to trace the flow of information in your application, which will hinder both
    development and debugging.
  prefs: []
  type: TYPE_NORMAL
