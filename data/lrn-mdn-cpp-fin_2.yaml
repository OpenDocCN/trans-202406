- en: Chapter 3\. Writing User-Defined Functions and Classes in Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our code examples so far, we have placed all our code into one file with
    a top-down design, beginning with the `main` function where execution of the program
    begins. This is of course not practical for realistic production programming.
    Prior to C++20, the usual approach to writing user-defined (non-templated) functions
    and classes would first involve placing their declarations placed in header files
    (usually `.h`, `.hpp`, or `.hxx` extensions). An implementation file (typically
    `.cpp`, `.cxx`, or `.cc` extensions) would then load the declarations using the
    `#include` preprocessor command. Each implementation file would then be compiled
    into a *translation unit* (de facto standard extensions are `.o` for Clang and
    gcc, and `.obj` for Visual Studio).
  prefs: []
  type: TYPE_NORMAL
- en: C++20 introduced *modules* which, without going into excessive detail here,
    offer the advantages of reduced time required to compile and build a code base,
    elimination of problems that can arise with header files and preprocessor directives,
    and greater control over what is exported to other code files. One convenient
    result is it is no longer necessary to wrap declarations in include guard macros.
    In addition, the problem of header file leaking can also be avoided, as an imported
    module into another does not carry with it everything that it imports, unlike
    `#include` macros in one header file that get propagated into another. [[For more
    details, see Ranier Grimm, and Niall Cooling (https://blog.feabhas.com/2021/08/c20-modules-with-gcc11/)]]
  prefs: []
  type: TYPE_NORMAL
- en: Modules also allow placing both declarations and implementations in a single
    file, although it is also possible to separate them over multiple files with an
    interface and multiple implementation files. For this book, we will limit the
    discussion to the single file case [[at least for now]].
  prefs: []
  type: TYPE_NORMAL
- en: Single file modules can be used to implement functions and classes similar to
    C# and Java, without separate declarations. But keeping the separation even within
    one file still provides certain advantages, namely a clear separation of interface
    and implementation, and the potential to reduce or eliminate the recompilation
    of other code that consumes a module.
  prefs: []
  type: TYPE_NORMAL
- en: Default file extensions for single file modules at this stage seem to be converging
    around `.ixx` for Visual Studio, and `.cppm` on Clang, although using `.cpp` is
    also an option. [[Check Ranier Grimm’s warning about using cppm; he recommends
    using .cpp with Clang, or .ixx with Clang-Cl in MSVC]]. In this book, we will
    use the `.ixx` extension for module files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: At the time of this writing, there are still various points with respect to
    standardization that are still pending. This could change by the time this book
    reaches publication.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will firt show introductory first examples of using modules
    for both user-defined non-member functions and classes. This will a good segue
    into a deeper discussion on class design, including compiler-provided default
    special functions, user-defined constructors and destructors, and operator overloading.
    Move semantics, a language feature added in C++11, will also be introduced. For
    some readers this will be review, but the examples will be shown again within
    the context of C++20 modules.
  prefs: []
  type: TYPE_NORMAL
- en: Using Modules to Write User-Defined Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now build up the process of writing functions in modules, starting from
    a very simple example, and then introducing the details step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: A First Example with Non-Member Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we want to write a function that sums up the elements in a vector of
    integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is placed in a module called `CppMod`, in a separate `.ixx` file, say `CppModule.ixx`.
    It will be easier to follow by just writing out the entire code in this file and
    then going through it section by section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `module` statement on the first line determines where the *global fragment*
    of the module begins. This section is [[exclusively]] reserved for pre-processor
    commands, particularly for `#include` statements of header files in the Standard
    Library and elsewhere that are needed for the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `export module` statement indicates the end of the global fragment
    and defines the module itself. This will make it available for *import* into other
    modules and source code. What follows first is the declaration of the ` vector_sum_of_ints
    ` function, preceded by another use of the `export` keyword. What this does is
    indicate to the compiler that this function can be called externally from code
    outside the module. Functions that are not marked as `export` will only be callable
    from inside the module.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we can then write the function implementation. Note that we do not
    need to put `export` here, as placing it with the function declaration is sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how we can use this module, we will import it into our usual `Main.cpp`
    file (not a module itself at this stage). This is accomplished using the `import`
    keyword before the `main` function. Then, from `main`, we will call ` vector_sum_of_ints
    `:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running this code, you can verify the result is 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can have a look at what happens if a non-export function, `add_stuff`
    is added to the module. Again, a very simple example, this will just double an
    integer value. If we call it from inside the exported function, then twice the
    sum of the vector results is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Compiling and running the program again, the result is not surprisingly (drum
    roll please), 12\. Attempting to call `add_stuff ` from the external `main` function,
    however, would result in a compiler error.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to define a *variable* that is local to the module and
    not accessible outside. For example, we could declare and initialize a non-exported
    integer variable to 0, and then if it is reassigned, it will maintain its new
    value inside the module. For example, we can set it equal to `n` inside the `add_stuff
    ` function, and then add it again in the exported function where it retains its
    reassigned value of 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The result now is 18, but that isn’t as important as the fact that `k` is local
    to the module and cannot be accessed externally. Similar to a non-exported function,
    an attempt to use `k` inside the `main` function will fail to compile. Conceptually,
    both non-exported functions and variables act like private members on a class,
    but with respect to the module and its non-member functions instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is furthermore possible to make the separation of interface and implementation
    clearer by rearranging the function implementations in what is called the *private
    fragment* of a single-file module. This must be the final section in the module,
    and it is indicated with `module: private` separating the declarations above with
    the implementations below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using a private fragment also purportedly will/can prevent external code using
    the module from recompiling when a change is made inside the module. There is
    still some ambiguity on this point that will hopefully be clarified within the
    next few months.
  prefs: []
  type: TYPE_NORMAL
- en: We will soon see how a module with a private fragment can be useful in a more
    realistic example.
  prefs: []
  type: TYPE_NORMAL
- en: Standard Library Header Units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Proposals to the [ISO C++ Committee](https://isocpp.org/std/the-committee) for
    reorganizing the Standard Library into “[a standard-module version](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2412r0.pdf)”
    [Stroustrup P2412r0] were also drafted and submitted for inclusion in C++20, but
    this effort has been deferred until the next release planned for 2023\. In the
    interim, as a placeholder, *Standard Library header units* that guarantee [“[e]xisting
    `#include`s of standard library headers transparently turn into module imports
    in C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r1.html)”
    [ISO P1502R1] are now available. What this essentially means is preprocessor statements
    such as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'can be replaced by importing their header equivalents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This applies to all C++ Standard Library declaration files; however, due to
    complications arising in headers inherited from C – eg, <cassert> and <cmath>,
    based on the legacy C headers <assert.h> and <math.h> respectively – these are
    not covered.
  prefs: []
  type: TYPE_NORMAL
- en: In the above example then, we can eliminate the global fragment and import the
    `vector` header file under the `export module` statement; viz,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If other header files outside of the Standard Library need to be `#include`d,
    as preprocessor directives, *these must* go into the global fragment of the module.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the convenience of importing Standard Library header units, they also
    have been shown to decrease build times and binary file bloat, although this is
    not always guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples can be found in Stroustrup [P2412r0].
  prefs: []
  type: TYPE_NORMAL
- en: Modules Prevent Leaking into Other Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A module will not “leak” imported modules within itself when imported into other
    models. That is, if a module `A` imports another module `B`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'then if `A` is imported into another module `C`, or into a `Main.cpp` file,
    `B` will not be implicitly imported as well unless it also is explicitly imported
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is in contrast with `#include`d header files that will leak. For example,
    a header file `MyHeader.h` includes a user-defined `YourHeader.h` and the STL
    <vector> header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If `MyHeader.h` is `#include`d in `Main.cpp`, then it will also carry functions
    in “YourHeader.h” and the `std::vector` class will also be present in `Main.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: // Main.cpp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With preprocessor `#include` statements, the content contained in `YourHeader.h`
    and `std::vector` are “leaked” into the `main` function. In realistic situations
    where many more header files might be involved, losing track of what is included
    and what is not can potentially lead to unexpected behavior or errors at runtime.
    In addition, this can also lead to longer build times. With modules, the programmer
    has greater control over what is imported, and build times can be substantially
    lower.
  prefs: []
  type: TYPE_NORMAL
- en: More details are available in [Ranier Grimm’s very informative ModernesCpp blog
    site](https://www.modernescpp.com/index.php/cpp20-modules).
  prefs: []
  type: TYPE_NORMAL
- en: A Black-Scholes Module Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For something closer to a realistic financial example, the Black-Scholes model
    for pricing a European equity option can be written inside a module. Before coding
    up the model, though, we will need a reliable way to indicate the payoff type,
    call or put. For this, a module called `Enums` will contain an exported enum class
    `PayoffType`:'
  prefs: []
  type: TYPE_NORMAL
- en: For the Black-Scholes functions, the mathematical formulation shown in James,
    Option Theory will be used.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3.1.png)'
  prefs: []
  type: TYPE_IMG
- en: A Module Containing Enum Definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, so as to prevent bogus input values of ɸ, an enum class is used to represent
    the payoff type, and it resides in its own module and separate file, say `Enums.ixx`
    so that it can be reused elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In practice, other enum classes representing bond types, futures contract identifiers,
    currency codes etc could be appended to this module and then imported into other
    pricing and risk modules as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The Black-Scholes Formula Module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The model requires a natural log function, and a way to compute the cumulative
    distribution function for a standard normal distribution. We are in luck here,
    because the CDF can be written as
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3.2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where erf is the [error function](https://en.wikipedia.org/wiki/Error_function),
    and it is available in `<cmath>`, as is the natural log function `log`. However,
    because this header does not have a header unit guaranteed by the C++20 Standard
    [[discussed above]], it needs to be `#include`d in the global fragment of the
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: An `export` statement follows next and defines the name of the module, say `BlackScholesFcns`.
    For convenience, the required `<cmath>` function `using` aliases go next
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The formula also uses ![](Images/1.4.png), and this is now available as a constant
    alias in C++20\. It also needs to determine the maximum between the option payoff
    and zero at expiration. For these, the `sqrt2` constant in `<numbers>`, and the
    `std::max` function in `<algorithms>` are available. Because `<numbers>` and `<algorithms>`
    are available as header units, they can be `import`ed rather than `#include`d:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`export import`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `BlackScholesFcns` module will need to `import` the `Enums` module in order
    to indicate whether an option is a call or a put. But as described earlier, a
    benefit of using a module is it will not leak an imported module into another
    location. This means if `BlackScholesFcns` is imported into `Main.cpp`, the programmer
    will need to know to also `import` the `Enums` module. This is not a desirable
    approach, as it would require inspecting the source code of a module for others
    it imports before it could be consumed elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the `export import` command is available. It will first `import`
    the `Enums` module into `BlackScholesFcns`, and then `export` it wherever the
    latter is consumed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This way, when `BlackScholesFcns` is imported into another module or file, it
    will not be necessary to hunt through the source code in `BlackScholesFcns` for
    the imported `Enums`, and then re-import it into the new target. In addition,
    and in general, the only imported modules that can be carried through are those
    marked with `export import`. This way, unexpected behavior due to an unintentionally
    leaked module can be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `<cmath>` header will leak into the target where `BlackScholesFcns` is imported
    due to the `#include` statement. This should be rectified with the standard-module
    version of the Standard Library currently slated for C++23.
  prefs: []
  type: TYPE_NORMAL
- en: 'The calculations are naturally divided up into an exported Black-Scholes function,
    and two private functions that compute the *d*1 and *d*2 values, and the Standard
    Normal CDF. The declarations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The salient point here is module users only need to be concerned with the `black_scholes_price`
    function. The responsibility for calling other two is delegated to the exported
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Because the *d*1 and *d*2 values are internal to the model, they are declared
    and initialized, but also not exported. This makes them accessible to the functions
    in the module but not to the outside world, much like a private member function
    on a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The function implementations go last, with the exported `black_scholes_price`
    function first, followed by the two helper functions in the private fragment.
    Note that `dee_fcns` is a `void` function. Rather than have two separate functions
    to calculate the *d*1 and *d*2 values, this can be done in one function by setting
    the results on the `d1` and `d2` variables that are common to the module, but
    hidden from its users.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the `Main.cpp` file, put
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: to import the model, and then call the exported function; eg, an in-the-money
    put with about three months until expiration. Note that the payoff enum type can
    be assigned because the `Enums` module was exported from `BlackScholesFcns` with
    the `export import` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This gives a price of 17.0649.
  prefs: []
  type: TYPE_NORMAL
- en: As can (hopefully) be seen, in addition to their other benefits, modules can
    be quite useful for implementing financial models where a lot of internal calculations
    are required but not necessary for the consumer to be concerned with. This way,
    the intermediate values can be encapsulated similar to a private variable on a
    class rather than passed around between functions and being exposed to unexpected
    modification, without the overhead of creating an object. For models more complex
    than Black-Scholes – and many of course exist – this means fewer moving parts
    accessible to the outside world, and hence fewer things to go wrong.
  prefs: []
  type: TYPE_NORMAL
- en: This is not to say it would be wrong to use a class to implement a financial
    model, but the decision to use a module of non-member functions rather than a
    class will come down to a design decision. There may be cases where it might be
    preferable to have a set of models conform to a contract set on an abstract base
    class, as we will discuss in the next chapter., so it really comes down to weighing
    the pros and cons of each while considering the requirements set in the design
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: As for writing classes, the modern approach also involves using modules. This
    is the topic of the next section.
  prefs: []
  type: TYPE_NORMAL
- en: User-Defined Class Implementation in Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The traditional way to write a (non-templated) class in C++ has also been to
    write the declarations in a header file, and the implementations in a separate
    file. For a class, this could also be beneficial in terms of code maintenance,
    as the declarations alone – provided the member function and variable naming was
    informative – essentially presented an outline up front about what the class did
    without the “clutter” from all the function implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Moving to modules, again the declarations and implementations can now be placed
    in a single file, with the same best practice of keeping the class declaration
    separate from the implementation. This way, compile times can be reduced, plus
    the outline of the class once found in a header file is preserved inside a module.
  prefs: []
  type: TYPE_NORMAL
- en: With the exception of a new module name to hold a class called `BlackScholes`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: the same preliminary `import`, `export`, and `export import` statements, as
    in the non-member function version, remain the same. Things then change with writing
    the class declaration rather than those for individual functions. Note the entire
    class declaration is placed inside the scope of the `export class` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The member functions are the same as before, but scoped with the class name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As the class declaration is marked `export`, the implementations are implicitly
    exported, so there is no need to `export` the public `black_scholes_price` function.
  prefs: []
  type: TYPE_NORMAL
- en: Using Namespaces with Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Namespaces have often been employed to prevent name clashes between functions
    with the same name and signature, but from different source files or libraries.
    They can also prevent similar compiler errors from two different modules.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose there are two modules, `ThisModule` and `ThatModule`, each containing
    a `maximum` function that returns the maximum value of two real numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If both modules are imported into another translation unit (eg Main.cpp) and
    a call is made to the `maximum` function, the compiler will not be able to determine
    which version of the function is intended, resulting in a compiler error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: By wrapping the `maximum` function in a distinct namespace and indicating the
    namespace scope when called outside the module, the compiler error is avoided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, scope the function call with one of the namespaces, just as we do for
    functions in classes in the `std` Standard Library namespace, and the code will
    compile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'An alternative would be to use a `using` alias for one of the namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if in `Main.cpp`, the entirety of each of these namespaces is loaded
    into the global namespace with `using namespace` statements, and there is no scoping
    of the `maximum` function, the same problem will ensue, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As a corollary, you can now see why global use of
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: is also not regarded as good practice. With so many classes and functions in
    the Standard Library, it is entirely possible that someone might use a common
    name as a user-defined class or function elsewhere, causing a name clash that
    leads to a compiler error.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many of the newer features in C++, beginning with C++11, have their roots in
    the Boost Libraries. For example, smart pointers `unique_ptr` and `shared_ptr`
    use the same names in Boost as well as in the Standard Library. As the Boost libraries
    are in wide use, opening up both the entire `std` and `boost` namespaces globally
    could create headaches for code maintenance and build teams
  prefs: []
  type: TYPE_NORMAL
- en: Both smart pointers in particular, and the Boost libraries more generally, will
    be covered in later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Our discussion of namespaces here is related more specifically to modules, but
    for more information about best practices using namespaces in C++, Sutter and
    Alexandrescu, Coding Style, chapter X remains an excellent resource.
  prefs: []
  type: TYPE_NORMAL
- en: As a general takeaway, classes and functions that belong to namespaces should
    either be scoped explicitly; eg,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: or contained in using aliases; eg,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: rather than exposing entire namespaces globally.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TBD…
  prefs: []
  type: TYPE_NORMAL
- en: 'Some references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r1.html](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r1.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1453r0.html](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1453r0.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0581r1.pdf](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0581r1.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2412r0.pdf](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2412r0.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://devblogs.microsoft.com/cppblog/a-tour-of-cpp-modules-in-visual-studio/](https://devblogs.microsoft.com/cppblog/a-tour-of-cpp-modules-in-visual-studio/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/microsoft/STL/issues/60](https://github.com/microsoft/STL/issues/60)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0955r0.pdf](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0955r0.pdf)'
  prefs: []
  type: TYPE_NORMAL
