- en: Chapter 10\. Pod and Container Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章。Pod 和容器安全
- en: 'When it comes to pod security via the Kubernetes API, you have two main options
    at your disposal: Pod Security Admission and RuntimeClass. In this chapter, we
    review the purpose and use of each API and provide best practices for their use.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及通过 Kubernetes API 实现 Pod 安全时，您有两个主要选项可供选择：Pod 安全准入和 RuntimeClass。在本章中，我们将审查每个
    API 的目的和用途，并提供其最佳实践。
- en: Pod Security Admission Controller
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pod 安全准入控制器
- en: This cluster-wide resource creates a single place to define and manage all the
    security-sensitive fields found in pod specifications. Prior to the creation of
    the Pod Security Admission resource, cluster administrators and/or users used
    PodSecurityPolicy, which was complex and could be challenging to set up correctly.
    Before PodSecurityPolicy, users would need to independently define individual
    `SecurityContext` settings for each pod or Deployment in their workloads or enable
    bespoke admission controllers on the cluster to enforce some aspects of pod security.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此全集群资源创建一个统一的地方，用于定义和管理 Pod 规范中的所有安全敏感字段。在创建 Pod 安全准入资源之前，集群管理员和/或用户使用的是 PodSecurityPolicy，这是一个复杂的设置，可能难以正确设置。在
    PodSecurityPolicy 之前，用户需要独立地为其工作负载中的每个 Pod 或部署定义个别的 `SecurityContext` 设置，或者在集群上启用定制的准入控制器来强制执行一些
    Pod 安全性方面的规则。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Pod Security Admission controller replaced the beta PodSecurityPolicy API
    starting with Kubernetes 1.22\. PodSecurityPolicy was removed in Kubernetes 1.25\.
    Pod Security Admission provides a simplified API for securing pods, but it does
    not provide complete feature parity with PodSecurityPolicy. For that you will
    need to install a more complete policy solution like the [Gatekeeper](https://oreil.ly/0lVJP)
    project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全准入控制器从 Kubernetes 1.22 开始取代了 Beta 版 PodSecurityPolicy API。PodSecurityPolicy
    在 Kubernetes 1.25 中被移除。Pod 安全准入提供了一个简化的 API 来保护 Pod，但它不提供与 PodSecurityPolicy 的完全功能对等。要实现完全的策略功能对等，您需要安装一个更完整的策略解决方案，如
    [Gatekeeper](https://oreil.ly/0lVJP) 项目。
- en: Pod Security Admission was developed to address this complexity and make it
    fairly straightforward for a cluster administrator to secure pods on their cluster.
    While it is markedly less complicated than other solutions, Pod Security Admission
    also has significant limitations in that it has coarse-grained permissions that
    are applied at the namespace level. Though you can exempt specific users or runtime
    classes from policy enforcement, you cannot enable different levels of security
    for different pods or users within a namespace.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全准入是为了解决这种复杂性，并且让集群管理员能够相对轻松地保护其集群上的 Pod。虽然比其他解决方案复杂度低，但 Pod 安全准入也有显著的局限性，即它具有在命名空间级别应用的粗粒度权限。尽管您可以豁免特定用户或运行时类别免受策略强制执行，但您无法在命名空间内为不同的
    Pod 或用户启用不同级别的安全性。
- en: Because of these limitations, many enterprises or administrators running multitenant
    clusters will likely need to implement a policy solution like the [Gatekeeper](https://oreil.ly/0lVJP)
    project. But especially for many smaller single-tenant clusters, Pod Security
    Admission control may be appropriate.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些限制，许多企业或运行多租户集群的管理员可能需要实施类似 [Gatekeeper](https://oreil.ly/0lVJP) 项目的策略解决方案。但对于许多较小的单租户集群来说，Pod
    安全准入控制可能更为合适。
- en: Enabling Pod Security Admission
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Pod 安全准入
- en: If your cluster is Kubernetes 1.22 or newer, Pod Security Admission is likely
    to be enabled. You can check the version of your cluster using the `kubectl version`
    command. If you are running on an older version of Kubernetes, we recommend updating
    since such older versions are no longer actively supported by the Kubernetes project,
    which puts you at risk for unpatched security vulnerabilities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的集群是 Kubernetes 1.22 或更新版本，那么可能已经启用了 Pod 安全准入。您可以使用 `kubectl version` 命令检查集群的版本。如果您正在运行较旧版本的
    Kubernetes，我们建议更新，因为这些较旧版本已不再由 Kubernetes 项目积极支持，这将使您面临未修补的安全漏洞风险。
- en: Warning
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Proceed with caution when enabling Pod Security Admission control on existing
    clusters because it’s potentially workload blocking if adequate preparation isn’t
    done at the outset. Consider starting with the `warn` and `audit` enforcement
    modes to ensure that your policy works as expected.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在现有集群上启用 Pod 安全准入控制时需要谨慎，因为如果一开始没有充分的准备，它有可能会阻塞工作负载。考虑从 `warn` 和 `audit` 强制模式开始，以确保您的策略按预期工作。
- en: Pod Security levels
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod 安全级别
- en: The Pod Security Admission controller simplifies security configuration by implementing
    three different policy levels for administrators to choose from. Each security
    level contains a collection of different rules for restricting pod configurations.
    The details of the security levels can be found in the [Kubernetes documentation](https://oreil.ly/3bKXr).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全准入控制器通过实施三种不同的策略级别简化了安全配置，供管理员选择。每个安全级别包含一组不同的规则，用于限制 Pod 配置。安全级别的详细信息可以在[Kubernetes
    文档](https://oreil.ly/3bKXr)中找到。
- en: 'The three Pod Security Standard levels are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 三种 Pod 安全标准级别为：
- en: '`privileged`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`privileged`'
- en: Effectively no restrictions. It matches the default behavior of a Kubernetes
    cluster with no pod security enabled.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上没有任何限制。它与未启用 Pod 安全的 Kubernetes 集群的默认行为相匹配。
- en: '`baseline`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`baseline`'
- en: Protects against known privilege escalations and other security issues.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 防止已知的特权升级和其他安全问题。
- en: '`restricted`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`restricted`'
- en: The current community best practice for pod security.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全的当前社区最佳实践。
- en: When starting out with policy, it may be tempting to immediately start enforcing
    the `restricted` level for all namespaces, but it is important to note that preexisting
    configurations in the cluster may break, and community solutions or software provided
    by other third parties may not work correctly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用策略时，可能会急于立即对所有命名空间强制执行`restricted`级别，但需要注意，集群中的现有配置可能会中断，并且社区解决方案或其他第三方提供的软件可能无法正常工作。
- en: In addition to the security levels, the Pod Security Admission controller provides
    three levels of activation for the policy. The `enforce` level actively blocks
    pods from being created if they don’t match the security level. The `warn` level
    provides a warning to a user that their pod violates policy but doesn’t block
    it from being created. The `audit` level logs policy violations but doesn’t provide
    user feedback.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安全级别外，Pod 安全准入控制器还提供了三种策略激活级别。`enforce`级别会主动阻止不符合安全级别的 Pod 创建。`warn`级别会向用户发出警告，指出其
    Pod 违反了策略，但不会阻止创建。`audit`级别记录策略违规情况，但不会向用户提供反馈。
- en: 'Finally, each security level is versioned to match a particular Kubernetes
    version (e.g., `v1.25`). It’s important to note that while the security level
    is associated with a Kubernetes version, it is available in other Kubernetes versions:
    you can use the `v1.25` security level in a Kubernetes 1.26 cluster. The versions
    follow the same three-version deprecation policy as any other Kubernetes component.
    There is also a `latest` version that tracks whatever is the most up-to-date policy.
    However, as with using `latest` in container images, this is discouraged because
    your security policy will change when the cluster is upgraded, which means that
    you could break your cluster by adopting a new policy unexpectedly. Instead, incremental
    upgrading of security policy after a cluster upgrade is a best practice.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，每个安全级别都与特定的 Kubernetes 版本（例如，`v1.25`）相对应。需要注意的是，虽然安全级别与 Kubernetes 版本关联，但在其他
    Kubernetes 版本中也可用：你可以在 Kubernetes 1.26 集群中使用`v1.25`安全级别。这些版本遵循与任何其他 Kubernetes
    组件相同的三版本弃用策略。还有一个`latest`版本，跟踪最新的策略。但是，与使用容器镜像中的`latest`相同，这是不鼓励的，因为当集群升级时，你的安全策略将发生变化，这意味着通过意外采用新策略可能会破坏集群。相反，在集群升级后逐步升级安全策略是最佳实践。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s important to note that the `warn` level provides warnings only in tools
    that support warnings, like `kubectl`. If you are using other tools for deployment,
    especially CI/CD automation, the warnings may not be surfaced to your users. In
    such situations, you may want to combine some sort of linter that examines the
    configurations before they are checked in along with pod security audit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`warn`级别仅在支持警告的工具（如`kubectl`）中提供警告。如果使用其他工具进行部署，特别是 CI/CD 自动化工具，则可能不会向用户显示警告。在这种情况下，你可能需要结合某种检查配置的
    linter，以及 Pod 安全审计。
- en: Activating Pod Security Using Namespace Labels
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命名空间标签激活 Pod 安全时
- en: 'The activation of Pod Security is done on a per-namespace basis by adding labels
    to the namespaces. You can do this in your namespace YAML by adding labels as
    shown in the following example. We will start with a configuration that simply
    audits existing usage at the baseline security level:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全的激活是通过为命名空间添加标签来完成的。你可以在命名空间的 YAML 中添加标签，如下例所示。我们将从一个简单的配置开始，仅在基线安全级别下审核现有用法：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once this configuration is applied to all namespaces, you will start seeing
    audit information in the cluster audit logs. This will give you a sense of your
    cluster’s level of compliance. If your cluster is very far out of compliance,
    you will likely need to identify the owners of various workloads and work with
    them to bring their workloads into compliance. Because the enforcement is per-namespace,
    you can work with teams individually and move to enforcement as their workloads
    become compliant.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此配置到所有命名空间后，您将开始在集群审计日志中看到审计信息。这将让您了解集群的合规水平。如果您的集群严重不合规，您可能需要识别各种工作负载的所有者，并与他们合作，使其工作负载达到合规性。由于执行是按命名空间进行的，您可以逐个团队进行工作，并在其工作负载符合合规性时转向执行。
- en: Ultimately, your final security posture is a function of your teams and their
    workloads, so it is difficult to identify a single best practice for pod security
    configuration. However, for most users, setting `audit` and `warn` to `restricted`
    and `enforce` to `baseline` is a pretty good place to start. It will give you
    visibility into potentially vulnerable configurations while enabling enforcement
    to prevent the most egregious violations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您的最终安全姿态取决于您的团队及其工作负载，因此很难确定单一的最佳 Pod 安全配置实践。然而，对于大多数用户来说，将`audit`设置为`restricted`，`warn`设置为`enforce`是一个不错的起点。这将使您能够查看潜在的漏洞配置，同时启用执行以防止最严重的违规行为。
- en: Workload Isolation and RuntimeClass
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作负载隔离和 RuntimeClass
- en: Container runtimes are still largely considered an insecure workload isolation
    boundary. There is no clear path to whether the most common runtimes of today
    will ever be recognized as secure. The momentum and interest among those in the
    industry toward Kubernetes has led to the development of different container runtimes
    that offer varying levels of isolation. Some are based on familiar and trusted
    technology stacks, whereas others are a completely new attempt to tackle the problem.
    Open source projects like Kata containers, gVisor, and Firecracker tout the promise
    of stronger workload isolation. These specific projects are either based on nested
    virtualization (running a super lightweight virtual machine within a virtual machine)
    or system call filtering and servicing. There has also been recent interest in
    the sandbox provided by the WebAssembly virtual machine, which was originally
    built for running in the browser but is seeing increased usage on the server side.
    The `containerd` project, one of the most popular container runtimes, now supports
    WebAssembly (WASM) based containers. Additionally RuntimeClass may be needed to
    choose a container runtime based on specific hardware capabilities like interacting
    with a GPU for artificial intelligence and machine learning workloads.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时仍然被普遍认为是一个不安全的工作负载隔离边界。目前最常见的运行时是否会被认为是安全的，尚无明确的路径。行业内对 Kubernetes 的动力和兴趣促使了不同容器运行时的发展，它们提供不同级别的隔离。有些基于熟悉和值得信赖的技术堆栈，而另一些则是解决问题的全新尝试。像
    Kata 容器、gVisor 和 Firecracker 这样的开源项目宣称具有更强的工作负载隔离能力。这些特定项目要么基于嵌套虚拟化（在虚拟机内运行超轻量级虚拟机），要么基于系统调用过滤和服务。最近还对
    WebAssembly 虚拟机提供的沙箱产生了兴趣，它最初是为浏览器而构建的，但在服务器端的使用越来越多。其中，`containerd` 项目，作为最受欢迎的容器运行时之一，现在支持基于
    WebAssembly（WASM）的容器。此外，可能需要 RuntimeClass 来选择基于特定硬件能力的容器运行时，例如与 GPU 交互用于人工智能和机器学习工作负载。
- en: The introduction of these container runtimes that offer different workload isolation
    allows users to choose different runtimes based on their isolation guarantees
    in the same cluster. For example, you could have trusted and untrusted workloads
    running in the same cluster in different container runtimes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 引入这些提供不同工作负载隔离的容器运行时允许用户在同一集群中根据其隔离保证选择不同的运行时。例如，您可以在同一集群中使用不同的容器运行时运行可信和不可信的工作负载。
- en: RuntimeClass was introduced into Kubernetes as an API to allow container runtime
    selection. It is used to represent one of the supported container runtimes on
    the cluster when it has been configured by the cluster administrator. As a Kubernetes
    user, you can define specific runtime classes for your workloads by using the
    RuntimeClassName in the pod specification. How this is implemented under the hood
    is that the RuntimeClass designates a `RuntimeHandler` that is passed to the Container
    Runtime Interface (CRI) to implement. Node labeling or node taints can then be
    used in conjunction with nodeSelectors or tolerations to ensure that the workload
    lands on a node capable of supporting the desired RuntimeClass. [Figure 10-1](#runtimeclass_flow_diagram)
    demonstrates how a kubelet uses RuntimeClass when launching pods.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: RuntimeClass被引入Kubernetes作为一个API，允许选择容器运行时。当集群由集群管理员配置时，它用于表示集群上支持的容器运行时之一。作为Kubernetes用户，您可以通过在Pod规范中使用RuntimeClassName来为您的工作负载定义特定的运行时类别。在底层实现方式是，RuntimeClass指定了一个`RuntimeHandler`，该Handler被传递给容器运行时接口（CRI）来实现。然后可以使用节点标签或节点污点与节点选择器或容忍性结合使用，以确保工作负载落在能够支持所需RuntimeClass的节点上。[Figure 10-1](#runtimeclass_flow_diagram)演示了kubelet在启动Pod时如何使用RuntimeClass。
- en: '![RunTimeClass flow diagram](assets/kbp2_1001.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![RuntimeClass流程图](assets/kbp2_1001.png)'
- en: Figure 10-1\. `RuntimeClass` flow diagram
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-1。`RuntimeClass`流程图
- en: Using RuntimeClass
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RuntimeClass
- en: 'If a cluster administrator has set up different RuntimeClasses, you can use
    them by specifying `runtimeClassName` in the pod specification; for example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果集群管理员设置了不同的RuntimeClasses，则可以通过在Pod规范中指定`runtimeClassName`来使用它们；例如：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Runtime Implementations
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时实现
- en: 'Following are some open source container runtime implementations that offer
    different levels of security and isolation for your consideration. This list is
    intended as a guide and is by no means exhaustive:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些开源容器运行时实现，它们提供不同级别的安全性和隔离性供您参考。此列表旨在作为指南，并非详尽无遗：
- en: '[CRI containerd](https://oreil.ly/1wxU1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[CRI containerd](https://oreil.ly/1wxU1)'
- en: An API facade for container runtimes with an emphasis on simplicity, robustness,
    and portability.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个API外观，专注于简单性，健壮性和可移植性的容器运行时。
- en: '[cri-o](https://oreil.ly/OiXpP)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[cri-o](https://oreil.ly/OiXpP)'
- en: A purpose-built, lightweight Open Container Initiative (OCI)-based implementation
    of a container runtime for Kubernetes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基于Open Container Initiative（OCI）的轻量级容器运行时的专用实现，用于Kubernetes。
- en: '[Firecracker](https://oreil.ly/on3Ge)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[Firecracker](https://oreil.ly/on3Ge)'
- en: Built on top of the Kernel-based Virtual Machine (KVM), this virtualization
    technology allows you to launch microVMs in nonvirtualized environments very quickly
    using the security and isolation of traditional VMs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基于基于内核的虚拟机（KVM）构建，这种虚拟化技术允许您在非虚拟化环境中非常快速地启动微型VM，同时利用传统VM的安全性和隔离性。
- en: '[gVisor](https://oreil.ly/ZZt3n)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[gVisor](https://oreil.ly/ZZt3n)'
- en: An OCI-compatible sandbox runtime that runs containers with a new user-space
    kernel, which provides a low overhead and secure, isolated container runtime.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个兼容OCI的沙箱运行时，使用新的用户空间内核来运行容器，提供低开销和安全、隔离的容器运行时。
- en: '[Kata Containers](https://oreil.ly/giOxk)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kata Containers](https://oreil.ly/giOxk)'
- en: A secure container runtime that provides VM-like security and isolation by running
    lightweight VMs that feel and operate like containers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行轻量级VM感觉和操作像容器的轻量级VM来提供类似VM的安全性和隔离性的安全容器运行时。
- en: Workload Isolation and RuntimeClass Best Practices
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作负载隔离和RuntimeClass最佳实践
- en: 'The following best practices will help you to avoid common workload isolation
    and RuntimeClass pitfalls:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下最佳实践将帮助您避免常见的工作负载隔离和RuntimeClass陷阱：
- en: Implementing different workload isolation environments via RuntimeClass will
    complicate your operational environment. This means that workloads might not be
    portable across different container runtimes given the nature of the isolation
    they provide. Understanding the matrix of supported features across different
    runtimes can be complicated and will lead to poor user experience. We recommend
    having separate clusters, each with a single runtime, to avoid confusion, if possible.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过RuntimeClass实现不同的工作负载隔离环境会使您的操作环境变得复杂。这意味着鉴于它们提供的隔离性质，工作负载可能在不同的容器运行时之间不可移植。理解不同运行时支持功能矩阵可能很复杂，并且会导致用户体验不佳。如果可能的话，我们建议使用单一运行时的单独集群，以避免混淆。
- en: Workload isolation doesn’t mean secure multitenancy. Even though you might have
    implemented a secure container runtime, this doesn’t mean that the Kubernetes
    cluster and APIs have been secured in the same fashion. You must consider the
    total surface area of Kubernetes end to end. Just because you have an isolated
    workload doesn’t mean that it cannot be modified by a bad actor via the Kubernetes
    API.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载隔离并不意味着安全的多租户。即使您可能已经实施了安全的容器运行时，这并不意味着Kubernetes集群和API以相同方式已经得到保护。您必须考虑Kubernetes端到端的总表面积。仅仅因为您有一个隔离的工作负载，并不意味着它不能通过Kubernetes
    API被不良行为者修改。
- en: Tooling across different runtimes is inconsistent. You might have users who
    rely on container runtime tooling for debugging and introspection. Having different
    runtimes means that you might no longer be able to run `docker ps` to list running
    containers. This leads to confusion and complications when troubleshooting.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同运行时的工具集不一致。您可能有用户依赖于容器运行时的工具进行调试和内省。拥有不同的运行时意味着您可能无法再运行`docker ps`来列出运行中的容器。这会在故障排除时导致混淆和复杂化。
- en: Other Pod and Container Security Considerations
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他Pod和容器安全考虑
- en: In addition to Pod Security Admission control and workload isolation, here are
    some other tools you may consider when determining how to handle pod and container
    security.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Pod安全准入控制和工作负载隔离之外，以下是一些处理Pod和容器安全性时您可能考虑的其他工具。
- en: Admission Controllers
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准入控制器
- en: The previous discussion of pod security was powered by the Pod Security Admission
    controller, but there are many other admission controllers that you can choose
    from in the cloud native ecosystem. If you find the Pod Security Admission controller
    to be too restrictive, many other options provide more sophisticated policy solutions.
    For more information on admission control, refer to [Chapter 17](ch17.html#admission_control_and_authorization).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 之前讨论的Pod安全准入控制是由Pod安全准入控制器提供支持的，但在云原生生态系统中还有许多其他准入控制器可供选择。如果您认为Pod安全准入控制器过于限制，许多其他选项提供了更复杂的策略解决方案。有关准入控制的更多信息，请参阅[第17章](ch17.html#admission_control_and_authorization)。
- en: Intrusion and Anomaly Detection Tooling
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入侵和异常检测工具集
- en: We’ve covered security policies and container runtimes, but what happens when
    you want to introspect and enforce policy within the container runtime? There
    are open source tools that can do this and more. They operate by either listening
    and filtering Linux system calls or by utilizing a Berkeley Packet Filter (BPF).
    One such tool is [Falco](https://oreil.ly/9KOeg), a Cloud Native Computing Foundation
    (CNCF) project that installs as a DaemonSet and allows you to configure and enforce
    policy during execution. Falco is just one approach. We encourage you to explore
    the tooling in this space to see what works for you.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了安全策略和容器运行时，但当您希望在容器运行时内部检查和执行策略时会发生什么？有一些开源工具可以实现这一点及更多功能。它们通过监听和过滤Linux系统调用或利用伯克利数据包过滤器（BPF）来运行。其中一个工具是[Falco](https://oreil.ly/9KOeg)，这是一个云原生计算基金会（CNCF）项目，作为DaemonSet安装，允许您在执行过程中配置和执行策略。Falco只是一种方法。我们鼓励您探索这个领域的工具，看看哪种适合您。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we covered in depth both the Pod Security Admission control
    and the RuntimeClass APIs with which you can configure a granular level of security
    for your workloads. We have also taken a look at some open source ecosystem tooling
    that you can use to monitor and enforce policy within the container runtime. We
    have provided a thorough overview for you to make an informed decision about providing
    the level of security best suited for your workload needs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Pod安全准入控制和RuntimeClass API，您可以使用这些工具为您的工作负载配置粒度级别的安全性。我们还查看了一些开源生态系统工具，可以用于监视和执行容器运行时内的策略。我们为您提供了详尽的概述，以便您做出关于提供最适合您工作负载需求的安全级别的知情决策。
