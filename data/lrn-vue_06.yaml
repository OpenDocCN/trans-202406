- en: Chapter 6\. Incorporating External Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapters prepared you for the essentials of working with components,
    including passing data between components and handling data changes and events
    within components. You are now ready to use Vue components to incorporate and
    represent your application’s data on the screen to your users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases, an application will not have data available within the application
    itself. Instead, we usually request the data from an external server or database,
    then populate the proper UI with the received data for our application. This chapter
    covers this aspect of developing a robust Vue application: how to communicate
    and handle external data from an external resource using Axios as the HTTP request
    tool.'
  prefs: []
  type: TYPE_NORMAL
- en: What Is Axios?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For making HTTP requests to external resources, various options are available
    for Vue developers, including the built-in `fetch` method, the classic `XMLHttpRequest`,
    and third-party libraries such as Axios. While the built-in `fetch` is a good
    option for making HTTP requests for fetching data only, Axios, in the long term,
    provides extra functionalities that come in handy when working with more complex
    external resources’ API handling.
  prefs: []
  type: TYPE_NORMAL
- en: Axios is a JavaScript open source lightweight library for making HTTP requests.
    Like `fetch`, it is a promise-based HTTP client and isomorphic, supporting both
    node (server-side) and browser side.
  prefs: []
  type: TYPE_NORMAL
- en: Some significant advantages of using Axios are the ability to intercept and
    cancel HTTP requests and its built-in cross-site request forgery protection for
    the client side. Another advantage of Axios is that it automatically transforms
    the response data to JSON format, giving you a better developer experience in
    working with the data than using the built-in `fetch`.
  prefs: []
  type: TYPE_NORMAL
- en: The [official website for Axios](https://oreil.ly/WxSN3) includes API documentation,
    installation, and primary use cases for reference ([Figure 6-1](#figure_06_01)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of Axios Official Website](assets/lvue_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Axios official website
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Installing Axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add Axios to your Vue project within your project’s root directory, use
    the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Axios is installed, you can import the Axios library into your component
    where needed with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You then can use `axios` to start querying for your application’s data. Let’s
    explore how to combine Axios with lifecycle hooks to load and display data.
  prefs: []
  type: TYPE_NORMAL
- en: Load Data with Lifecycle Hooks and Axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in [Chapter 3](ch03.html#unique_chapter_id_03), you can use the
    `beforeCreate`, `created`, and `beforeMounted` lifecycle hooks to perform side
    calls such as data fetching. However, in a scenario where you need to load external
    data and use it within the component and use Options API, `beforeCreate` is not
    an option. Vue ignores any data assignment using `beforeCreate` since it hasn’t
    initialized any reactive data yet. Using `created` and `beforeMounted` is a better
    choice in this case. However, `beforeMounted` is not available in server-side
    rendering, and if we want to use the Composition API (covered in [Chapter 5](ch05.html#unique_chapter_id_06)),
    there is no equivalent lifecycle function in Composition API to the `created`
    hook.
  prefs: []
  type: TYPE_NORMAL
- en: A better option for loading external data is to use `setup()` or `<script setup>`
    with the respective reactive composition functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make an asynchronous GET request to get the public information about
    my GitHub profile through the URL *[*https://api.github.com/users/mayashavin*](https://api.github.com/users/mayashavin)*
    by using the `axios.get()` method, as seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`axios.get()` returns a promise, which can use the promise chaining method
    `then()` to handle the response data when it resolves. Axios automatically parses
    the response data from the HTTP response body into the appropriate JSON format.
    In this example, we assign the received data to the `user` data property of the
    component. We can also rewrite this code to use `await/async` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We also should wrap the code in a `try/catch` block to handle any errors that
    may occur during the request. Hence, our code becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_incorporating_external_data_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Add an `error` data property to store any error received from the request.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_incorporating_external_data_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Wrap the code in a `try/catch` block to handle any errors that occur during
    the request.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_incorporating_external_data_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Assign the error to the `error` data property, for displaying an error message
    to the user in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub responds to our request with a JSON object containing the primary fields
    shown in [Example 6-1](#user_profile_type_05).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-1\. `UserProfile` type
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With this response data, we now have the necessary information to display the
    user’s profile on the screen. Let’s add the following code to our component’s
    `template` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note here we add `v-if="user"` to ensure the Vue renders the user profile only
    when `user` is available.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as in [Example 6-2](#example_user_profile), we need to add some modifications
    to our component’s `script` section to make the code fully TypeScript compatible,
    including mapping the response data to be the `User` data type before assigning
    it to the `user` property, as well as the `error`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-2\. UserProfile component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_incorporating_external_data_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `User` type declaration to the `user`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_incorporating_external_data_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Assign the response data to the `user` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_incorporating_external_data_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Cast the error to be `Error` type before assigning it to the `error` property.
  prefs: []
  type: TYPE_NORMAL
- en: When the request is successfully resolved, you will see my GitHub profile information
    displayed on the screen, as shown in [Figure 6-2](#figure_05_02).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot displaying a photo of Maya Shavin with her name, job title,
    twitter handler and blog address.](assets/lvue_0602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. Sample output for a successful GitHub profile information request
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Similarly, you can also add a section with `v-else-if="error"` condition to
    display an error message to the user when the request fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you may wonder what happens behind the scenes when we perform
    an asynchronous request while the component is in the middle of creation. The
    component’s lifecycle operates synchronously, meaning Vue still proceeds in creating
    the component despite the status of the asynchronous request. That brings us to
    the challenge of handling different data requests in various components during
    run-time, which we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Async Data Requests in Run-Time: the Challenge'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to how the JavaScript engine works, Vue also works synchronously. If
    there is any asynchronous request along the way, Vue will not wait for the request
    to complete before proceeding to the next step. Instead, Vue finishes the component’s
    creation process, then returns to handle the asynchronous request when it resolves/rejects
    according to the execution order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a step back, add some console logs to the `onBeforeMounted`, `onMounted`,
    and `onUpdated` hooks in our component and see the order of execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_incorporating_external_data_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Log the details of `user` when finished fetching to the console.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_incorporating_external_data_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log the lifecycle state: before mounting'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_incorporating_external_data_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log the lifecycle state: mounted'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_incorporating_external_data_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log the lifecycle state: component is updated'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the browser’s console log, we see the order displayed as in [Figure 6-3](#figure_05_03).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot showing the execution order when there is an asynchronous request.](assets/lvue_0603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. Order of execution with an asynchronous request
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once the asynchronous request is resolved/rejected and there are component data
    changes, the Vue renderer will trigger the update process for the component. The
    component is not yet with the response data when Vue mounts it to the DOM. Thus,
    we still need to handle the component’s loading state before receiving the server’s
    data.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, we can add another `loading` property to the component’s data and
    disable the loading state after the request is resolved/rejected, as in [Example 6-3](#example_user_profile_loading_05).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-3\. UserProfile component with loading state and error state
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_incorporating_external_data_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Create a reactive `loading` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_incorporating_external_data_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Set `loading` to `true` before fetching the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_incorporating_external_data_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Set `loading` to `false` after the request is resolved/rejected.
  prefs: []
  type: TYPE_NORMAL
- en: And then add a `v-if="loading"` condition to the component’s `template` section
    for a loading message, as in [Example 6-4](#example_user_profile_loading_UI_05).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-4\. UserProfile component template with loading state and error state
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This code renders a loading message while the asynchronous request is in progress
    and displays the user’s profile information when the request resolves or otherwise
    sends an error message.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create your reusable wrapper component to handle different states
    for components with the asynchronous data request, such as a skeleton placeholder
    component when a list of components is loading ([Figure 6-4](#figure_05_04)) or
    a fetch component (covered next).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot showing a skeleton component for loading state.](assets/lvue_0604.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-4\. Skeleton component for loading state
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating Your Reusable Fetch Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Handling states in a Vue component for its asynchronous data request is a common
    challenge. The UI for these states usually follows the same pattern: a spinner
    or loading message for the loading state, an error message, or a more stylish
    error component when a data request rejects. Thus, we can create one common component
    for handling such cases, which we call `FetchComponent`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`FetchComponent` has a `template` section divided into three main areas using
    `slot` and `v-if`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#loading` slot for displaying a loading message'
  prefs: []
  type: TYPE_NORMAL
- en: The condition for this slot to render is if the component is in the `isLoading`
    state.
  prefs: []
  type: TYPE_NORMAL
- en: '`#error` slot for displaying an error message'
  prefs: []
  type: TYPE_NORMAL
- en: We also pass the `error` object as the slot props for customization if needed
    while ensuring Vue renders this slot only if `error` is available.
  prefs: []
  type: TYPE_NORMAL
- en: '`#default` slot for displaying the component’s content, when there is `data`
    received'
  prefs: []
  type: TYPE_NORMAL
- en: We also pass the `data` to the slot as props.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also use a named `slot` to allow customizing the error and loading the component
    instead of the default messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `script setup` section, we need to declare our data type `FetchComponentData`
    for the component to contain the `isLoading`, `error`, and `data` properties of
    type generics `Object`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The component receives two props: a `url` for the request URL and a `method`
    for the request method with the default value of `GET`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we make the asynchronous request and update the component’s state
    when Vue creates the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you know the types of `data` in advance, you should use them instead of `any`
    or `Object` to ensure full TypeScript type check coverage. Don’t use `any` unless
    there is no other way.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can rewrite [Example 6-2](#example_user_profile) to use the new `FetchComponent`
    component as in [Example 6-5](#example_user_profile_fetch_component_01).
  prefs: []
  type: TYPE_NORMAL
- en: Example 6-5\. UserProfile component using the `FetchComponent`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_incorporating_external_data_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `FetchComponent` component and pass the `url` prop as the target URL
    for the request (*[*https://api.github.com/users/mayashavin*](https://api.github.com/users/mayashavin)*).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_incorporating_external_data_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Wrap the main content of the component inside the `template` for the main slot,
    `#default`. We also bind the props this slot receives to the `defaultProps` object.
    Since `defaultProps.data` is of `Object` type, we cast it to `User` to pass TypeScript
    validation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_incorporating_external_data_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `defaultProps.data` to access the data received from the request and
    display it on the UI.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_incorporating_external_data_CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Remove all the related original logic code for fetching.
  prefs: []
  type: TYPE_NORMAL
- en: Here we pass `data` to this slot from our `FetchComponent` implementation, which
    in our case stands for our original `user` property. Thus, we replace the occurrences
    of `user` from the previous implementation with `defaultProps.data`. The output
    remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing FetchComponent with Composition API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can rewrite the `FetchComponent` with `useFetch()` (see [Example 5-20](ch05.html#example_22_06))
    in `setup()` function (or `<script setup>` tag) instead.
  prefs: []
  type: TYPE_NORMAL
- en: Now you understand how to create a simple `FetchComponent` to fetch and handle
    data request states on the UI for your Vue components. You may want to extend
    it to handle more complex data requests, such as POST requests. By isolating the
    data request and controlling logic in a single place, you can reduce the complexity
    and reuse it in other components more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Connect Your Application with an External Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you can handle external data requests and errors on the UI of
    your Vue components. However, fetching data every time Vue creates a component
    may not be the best practice, especially if the component’s data is not likely
    to change frequently.
  prefs: []
  type: TYPE_NORMAL
- en: A perfect illustration is switching between pages in a web application, where
    we need to fetch the page’s data only once when loading the view for the first
    time. In this case, we can cache the data using the browser’s local storage as
    an external local database or using a state management service such as Vuex and
    Pinia (more in [Chapter 9](ch09.html#unique_chapter_id_08)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To use local storage, we can use the built-in browser `localStorage` API. For
    example, to save the user’s GitHub profile data to local storage, we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the browser’s `localStorage` saves the item as a string, so we need to
    convert the object to a string before saving it. When we need it, we can use this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add the previous code to your `UserProfile` component ([Example 6-2](#example_user_profile))
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It will trigger the asynchronous call only when loading the page for the first
    time. When the page is loaded again, if we have saved the data successfully, it
    will load directly from local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Using localStorage in Real-World Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I don’t recommend this approach for a real-world application. It has several
    limitations, such as your browser will reset any local storage data for private/incognito
    sessions, or users can disable the use of local stage on their end. The better
    approach is to use state management tools like Vuex or Pinia (see [Chapter 9](ch09.html#unique_chapter_id_08)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced techniques for handling asynchronous data in a Vue component,
    with the help of the Axios library and Composition API. We learned how to create
    a reusable component to fetch and handle data request states on the UI for your
    Vue applications while keeping the code clean and readable. We also explored connecting
    your application to an external database service such as local storage.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce more advanced rendering concepts of Vue, including
    using functional components, registering custom plugins globally in your Vue application,
    and using dynamic rendering to compose layouts conditionally and dynamically.
  prefs: []
  type: TYPE_NORMAL
