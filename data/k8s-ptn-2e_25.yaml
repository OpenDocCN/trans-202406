- en: Chapter 20\. Configuration Resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes provides native configuration resources for regular and confidential
    data, which allows you to decouple the configuration lifecycle from the application
    lifecycle. The *Configuration Resource* pattern explains the concepts of ConfigMap
    and Secret resources and how we can use them, as well as their limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One significant disadvantage of the *EnvVar Configuration* pattern, discussed
    in [Chapter 19](ch19.html#EnvVarConfiguration), is that it’s suitable for only
    a handful of variables and simple configurations. Another disadvantage is that
    because environment variables can be defined in various places, it is often hard
    to find the definition of a variable. And even if you find it, you can’t be entirely
    sure it won’t be overridden in another location. For example, environment variables
    defined within a OCI image can be replaced during runtime in a Kubernetes Deployment
    resource.
  prefs: []
  type: TYPE_NORMAL
- en: Often, it is better to keep all the configuration data in a single place and
    not scattered around in various resource definition files. But it does not make
    sense to put the content of a whole configuration file into an environment variable.
    So some extra indirection would allow more flexibility, which is what Kubernetes
    configuration resources offer.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes provides dedicated configuration Resources that are more flexible
    than pure environment variables. These are the ConfigMap and Secret objects for
    general-purpose and sensitive data, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: We can use both in the same way, as both provide storage and management of key-value
    pairs. When we are describing ConfigMaps, the same can be applied most of the
    time to Secrets too. Besides the actual data encoding (which is Base64 for Secrets),
    there is no technical difference for the use of ConfigMaps and Secrets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a ConfigMap is created and holding data, we can use the keys of a ConfigMap
    in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: As a reference for *environment variables*, where the key is the name of the
    environment variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As *files* that are mapped to a volume mounted in a Pod. The key is used as
    the filename.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file in a mounted ConfigMap volume is updated when the ConfigMap is updated
    via the Kubernetes API. So, if an application supports hot reload of configuration
    files, it can immediately benefit from such an update. However, with ConfigMap
    entries used as environment variables, updates are not reflected because environment
    variables can’t be changed after a process has been started.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to ConfigMap and Secret, another alternative is to store configuration
    directly in external volumes that are then mounted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following examples concentrate on ConfigMap usage, but they can also be
    used for Secrets. There is one big difference, though: values for Secrets have
    to be Base64 encoded.'
  prefs: []
  type: TYPE_NORMAL
- en: A ConfigMap resource contains key-value pairs in its `data` section, as shown
    in [Example 20-1](#ex-config-resource).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-1\. ConfigMap resource
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_configuration_resource_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: ConfigMaps can be accessed as environment variables and as a mounted file. We
    recommend using uppercase keys in the ConfigMap to indicate an EnvVar usage and
    proper filenames when used as mounted files.
  prefs: []
  type: TYPE_NORMAL
- en: We see here that a ConfigMap can also carry the content of complete configuration
    files, like the Spring Boot `application.properties` in this example. You can
    imagine that for a nontrivial use case, this section could get quite large!
  prefs: []
  type: TYPE_NORMAL
- en: Instead of manually creating the full resource descriptor, we can use `kubectl`
    to create ConfigMaps or Secrets too. For the preceding example, the equivalent
    `kubectl` command looks like that in [Example 20-2](#ex-config-map-apply).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-2\. Create a ConfigMap from a file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This ConfigMap then can be read in various places—everywhere environment variables
    are defined, as demonstrated [Example 20-3](#ex-config-map-env).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-3\. Environment variable set from ConfigMap
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If a ConfigMap has many entries that you want to consume as environment variables,
    using a certain syntax can save a lot of typing. Rather than specifying each entry
    individually, as shown in the preceding example in the `env` section, `envFrom`
    allows you to expose all ConfigMap entries that have a key that also can be used
    as a valid environment variable. We can prepend this with a prefix, as shown in
    [Example 20-4](#ex-config-map-env-from). Any key that cannot be used as an environment
    variable is ignored (e.g., `"illeg.al"`). When multiple ConfigMaps are specified
    with duplicate keys, the last entry in `envFrom` takes precedence. Also, any same-named
    environment variable set directly with `env` has higher priority.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-4\. Setting all entries of a ConfigMap as environment variables
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_configuration_resource_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Pick up all keys from the ConfigMap `random-generator-config` that can be used
    as environment variable names.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_configuration_resource_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prefix all suitable ConfigMap keys with `CONFIG_`. With the ConfigMap defined
    in [Example 20-1](#ex-config-resource), this leads to three exposed environment
    variables: `CONFIG_​PAT⁠TERN_NAME`, `CONFIG_EXTRA_OPTIONS`, and `CONFIG_SEED`.'
  prefs: []
  type: TYPE_NORMAL
- en: Secrets, as with ConfigMaps, can also be consumed as environment variables,
    either per entry or for all entries. To access a Secret instead of a ConfigMap,
    replace `configMapKeyRef` with `secretKeyRef`.
  prefs: []
  type: TYPE_NORMAL
- en: When a ConfigMap is used as a volume, its complete content is projected into
    this volume, with the keys used as filenames. See [Example 20-5](#ex-config-map-volume).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-5\. Mount a ConfigMap as a volume
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_configuration_resource_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A ConfigMap-backed volume will contain as many files as entries, with the map’s
    keys as filenames and the map’s values as file content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration in [Example 20-1](#ex-config-resource) that is mounted as
    a volume results in four files in the */config* folder: an *application.properties*
    file with the content defined in the ConfigMap and the files *PATTERN*, *EXTRA_OPTIONS*,
    and *SEED*, each with a single line of content.'
  prefs: []
  type: TYPE_NORMAL
- en: The mapping of configuration data can be fine-tuned more granularly by adding
    additional properties to the volume declaration. Rather than mapping all entries
    as files, you can also individually select every key that should be exposed, the
    filename, and permissions under which it should be available. [Example 20-6](#ex-config-map-volume-items)
    demonstrates how you can granularly select which parts of a ConfigMap are exposed
    as volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-6\. Expose ConfigMap entries selectively as volumes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_configuration_resource_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: List of ConfigMap entries to expose as volumes.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_configuration_resource_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Expose only `application.properties` from the ConfigMap under the path `spring/myapp.properties`
    with file mode 0400.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, changes to a ConfigMap are directly reflected in a projected
    volume that contains the ConfigMap’s content as files. An application can watch
    those files and immediately pick up any changes. This hot reload is very useful
    to avoid a redeployment of an application, which can cause an interruption of
    the service. On the other hand, such live changes are not tracked anywhere and
    can easily get lost during a restart. These ad hoc chances can cause configuration
    drift that is hard to detect and analyze. That is one of the reasons many people
    prefer an *immutable configuration* that stays constant once deployed. We have
    dedicated a whole pattern in [Chapter 21, “Immutable Configuration”](ch21.html#ImmutableConfiguration),
    to this paradigm, but there is a cheap way to easily achieve this with ConfigMap
    and Secrets too.
  prefs: []
  type: TYPE_NORMAL
- en: Since version 1.21, Kubernetes supports an `immutable` field for ConfigMaps
    and Secrets that, if set to `true`, prevents the resource from being updated once
    created. Besides preventing unwanted updates, using immutable ConfigMaps and Secrets
    considerably improves a cluster’s performance as the Kubernetes API server does
    not need to monitor changes on those immutable objects. [Example 20-7](#ex-secret-immutable)
    shows how to declare a Secret immutable. The only way to change such a Secret
    after it has been stored on the cluster is to delete and recreate the updated
    Secret. Any running Pod referencing this secret needs to be restarted too.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-7\. Immutable Secret
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_configuration_resource_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean flag declaring the mutability of the Secret (default is `false`).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ConfigMaps and Secrets allow you to store configuration information in dedicated
    resource objects that are easy to manage with the Kubernetes API. The most significant
    advantage of using ConfigMaps and Secrets is that they decouple the *definition*
    of configuration data from its *usage*. This decoupling allows us to manage the
    objects that use the configuration independently of the configuration definition.
    Another benefit of ConfigMaps and Secrets is that they are intrinsic features
    of the platform. No custom construct like that in [Chapter 21, “Immutable Configuration”](ch21.html#ImmutableConfiguration),
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, these configuration resources also have their restrictions: with a
    1 MB size limit for Secrets, they can’t store arbitrarily large data and are not
    well suited for nonconfiguration application data. You can also store binary data
    in Secrets, but since they have to be Base64 encoded, you can use only around
    700 KB data for it. Real-world Kubernetes clusters also put an individual quota
    on the number of ConfigMaps that can be used per namespace or project, so ConfigMap
    is not a golden hammer.'
  prefs: []
  type: TYPE_NORMAL
- en: The next two chapters show how to deal with large configuration data by using
    the *Immutable Configuration* and *Configuration Template* patterns.
  prefs: []
  type: TYPE_NORMAL
- en: More Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Configuration Resource Example](https://oreil.ly/-_jDa)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configure a Pod to Use a ConfigMap](https://oreil.ly/oRN9a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Secrets](https://oreil.ly/mvoXO)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Encrypting Secret Data at Rest](https://oreil.ly/GrL0_)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Distribute Credentials Securely Using Secrets](https://oreil.ly/Im-R9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Immutable Secrets](https://oreil.ly/9PvQ5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Create Immutable ConfigMaps and Secrets](https://oreil.ly/ndYd0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Size Limit for a ConfigMap](https://oreil.ly/JUDZU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
