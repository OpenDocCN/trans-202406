- en: Chapter 11\. Policy and Governance for Your Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。你的集群的政策与治理
- en: Have you ever wondered how you might ensure that all containers running on a
    cluster come only from an approved container registry? Or maybe you’ve been asked
    by the security team to enforce a policy that services are never exposed to the
    internet. These are precisely the challenges that policy and governance for your
    cluster set out to address. As Kubernetes continues to mature and becomes adopted
    by more enterprises, the question of how to apply policy and governance to Kubernetes
    resources is increasing in frequency. In this chapter we share what you can do
    and the tools to use to make sure that your cluster is in compliance with the
    defined policies, whether you work at a startup or an enterprise.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾想过如何确保集群上运行的所有容器仅来自已批准的容器注册表？或者，也许安全团队要求你强制执行一项政策，即服务永远不暴露在互联网上。这些正是集群政策与治理旨在解决的挑战。随着
    Kubernetes 的成熟和越来越多企业的采用，如何将政策与治理应用于 Kubernetes 资源的问题日益频繁。在本章中，我们分享了你可以采取的方法和工具，以确保你的集群符合定义的政策，无论你是在初创企业还是大企业工作。
- en: Why Policy and Governance Are Important
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么政策与治理至关重要
- en: Whether you operate in a highly regulated environment—for example, health care
    or financial services—or you simply want to make sure that you maintain a level
    of control over what’s running on your clusters, you’re going to need a way to
    implement the company-specific policies. Once your policy is defined, you will
    need to determine how to implement it and maintain clusters that are compliant
    to these policies. These policies may be required to meet regulatory compliance
    or simply to enforce best practices. Whatever the reason, you must be sure that
    you do not sacrifice developer agility and self-service when implementing these
    policies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是在高度受管制的环境中操作（例如医疗或金融服务），还是仅仅想确保你对集群上运行的内容保持控制，你都需要一种实施公司特定政策的方法。一旦定义了你的政策，你就需要确定如何实施它，并维护符合这些政策的集群。这些政策可能需要符合法规合规性，或者仅仅是强制执行最佳实践。无论原因如何，你必须确保在实施这些政策时不牺牲开发者的灵活性和自助服务。
- en: How Is This Policy Different?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这项政策有何不同？
- en: In Kubernetes, policy is everywhere. Whether it be network policy or pod security,
    we’ve all come to understand what policy is and when to use it. We trust that
    whatever is declared in Kubernetes resource specifications is implemented as per
    the policy definition. Both network policy and pod security are implemented at
    runtime. However, what policy restricts the field values in these Kubernetes resource
    specifications? That’s the job of policy and governance. Rather than implementing
    policy at runtime, when we talk about policy in the context of governance, what
    we mean (or at least what we are trying to achieve) is the ability to limit the
    way fields are configured in Kubernetes resources. Only Kubernetes resource specifications
    that are compliant when evaluated by policies are allowed and committed to the
    cluster state.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，政策无处不在。无论是网络策略还是 Pod 安全，我们都明白何时以及如何使用政策。我们相信 Kubernetes 资源规范中声明的任何内容都会按照政策定义进行实施。网络策略和
    Pod 安全都是在运行时实施的。然而，政策限制 Kubernetes 资源规范中的字段值。这是政策与治理的工作。与在运行时实施政策不同，当我们在治理的背景下谈论政策时，我们的意思（或者至少我们试图达到的目标）是限制在
    Kubernetes 资源中配置字段的方式。只有在通过政策评估时符合的 Kubernetes 资源规范才允许提交到集群状态。
- en: Cloud Native Policy Engine
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生政策引擎
- en: To be able to evaluate which resources are compliant, we need a policy engine
    that is flexible enough to meet a variety of needs. [The Open Policy Agent (OPA)](https://oreil.ly/xzN2p)
    is an open source, flexible, lightweight policy engine that has become increasingly
    popular in the cloud native ecosystem. Having OPA in the ecosystem has allowed
    many implementations of different Kubernetes governance tools to appear. One such
    Kubernetes policy and governance project the community is rallying around is called
    [Gatekeeper](https://oreil.ly/RvKUw). For the rest of this chapter, we use Gatekeeper
    as the canonical example to illustrate how you might achieve policy and governance
    for your cluster. Although there are other implementations of policy and governance
    tools in the ecosystem, they all seek to provide the same user experience (UX)
    by allowing only compliant Kubernetes resource specifications to be committed
    to the cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够评估哪些资源符合规定，我们需要一个灵活到可以满足各种需求的策略引擎。[开放策略代理 (OPA)](https://oreil.ly/xzN2p)
    是一个开源、灵活、轻量级的策略引擎，在云原生生态系统中越来越受欢迎。在生态系统中引入 OPA 后，出现了许多不同的 Kubernetes 管理工具实现。社区正在支持的一个这样的
    Kubernetes 策略和治理项目称为 [Gatekeeper](https://oreil.ly/RvKUw)。在本章的其余部分，我们使用 Gatekeeper
    作为规范示例，展示如何为您的集群实现策略和治理。尽管生态系统中还有其他策略和治理工具的实现，它们都致力于通过允许只提交符合 Kubernetes 资源规范的资源来提供相同的用户体验（UX）。
- en: Introducing Gatekeeper
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gatekeeper 简介
- en: Gatekeeper is an open source, customizable Kubernetes admission webhook for
    cluster policy and governance. Gatekeeper takes advantage of the OPA constraint
    framework to enforce custom resource definition (CRD)-based policies. Using CRDs
    allows for an integrated Kubernetes experience that decouples policy authoring
    from implementation. Policy templates are referred to as *constraint templates*,
    which can be shared and reused across clusters. Gatekeeper enables resource validation
    and audit functionality. One of the great things about Gatekeeper is that it’s
    portable, which means that you can implement it on any Kubernetes clusters, and
    if you are already using OPA, you might be able to port that policy over to Gatekeeper.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Gatekeeper 是一个开源的、可定制的 Kubernetes 准入 webhook，用于集群策略和治理。Gatekeeper 利用 OPA 约束框架来强制执行基于自定义资源定义（CRD）的策略。使用
    CRD 允许集成的 Kubernetes 体验，将策略编写与实现分离。策略模板称为 *约束模板*，可以在集群间共享和重用。Gatekeeper 支持资源验证和审计功能。Gatekeeper
    的一个很大的优点是它的可移植性，这意味着您可以将其实现在任何 Kubernetes 集群上，如果您已经使用 OPA，可能可以将该策略迁移到 Gatekeeper
    上。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Gatekeeper is a production-ready open source project. For the latest stable
    version, please visit the official [upstream repository](https://oreil.ly/Rk8dc).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Gatekeeper 是一个成熟的开源项目。请访问官方的[上游存储库](https://oreil.ly/Rk8dc)获取最新稳定版本。
- en: Example Policies
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例策略
- en: 'Before diving into how to configure Gatekeeper, it’s important to keep the
    problem we are trying to solve in focus. While every organization/team will need
    to optimize their policies for their needs, some fairly universal policies serve
    as best practices. Let’s look at some policies that solve the most common compliance
    issues for context:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解如何配置 Gatekeeper 之前，保持解决问题的关注至关重要。虽然每个组织/团队都需要根据其需求优化其策略，但一些普遍适用的策略可作为最佳实践。让我们看一些解决常见合规问题的策略作为背景：
- en: Services must not be exposed publicly on the internet.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务不得在互联网上公开。
- en: Allow containers only from trusted container registries.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅允许来自受信任的容器注册表的容器。
- en: All containers must have resource limits.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有容器必须设置资源限制。
- en: Ingress hostnames must not overlap.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ingress 主机名不得重叠。
- en: Ingresses must use only HTTPS.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ingress 必须仅使用 HTTPS。
- en: Gatekeeper Terminology
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gatekeeper 术语
- en: 'Gatekeeper has adopted much of the same terminology as OPA. It’s important
    that we cover that terminology so you can understand how Gatekeeper operates.
    Gatekeeper uses the OPA constraint framework, which introduces three new terms:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Gatekeeper 采用了与 OPA 相同的大部分术语。了解这些术语对您理解 Gatekeeper 如何运作至关重要。Gatekeeper 使用 OPA
    约束框架，引入了三个新术语：
- en: Constraint
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束
- en: Rego
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rego
- en: Constraint template
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束模板
- en: Constraint
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 约束
- en: The best way to think about constraints is as restrictions that you apply to
    specific fields and values of Kubernetes resource specifications. This is really
    just a long way of saying policy. When constraints are defined, you are effectively
    stating that you *DO NOT* want to allow this. The implications of this approach
    mean that resources are implicitly allowed without a constraint that issues a
    deny. This is an important nuance because rather then allowing the Kubernetes
    resources specification fields and values you want, you are denying only the ones
    you *DO NOT* want. This architectural decision suits Kubernetes resource specifications
    nicely because they are ever changing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的理解约束的方式是将其视为应用于 Kubernetes 资源规范特定字段和值的限制。这实际上只是在说策略的长远方式。当定义约束时，您实际上是在声明您*不希望*允许这样做。这种方法的含义是资源在没有发出拒绝的约束时会被隐式地允许。这是一个重要的细微差别，因为它不是允许您希望的
    Kubernetes 资源规范字段和值，而是只拒绝您*不希望*的。这种架构决策非常适合 Kubernetes 资源规范，因为它们是不断变化的。
- en: Rego
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rego
- en: Rego is an OPA-native query language. Rego queries are assertions on the data
    stored in OPA. Gatekeeper stores rego in the constraint template.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Rego 是一种 OPA 本机查询语言。 Rego 查询是对 OPA 存储的数据的断言。 Gatekeeper 在约束模板中存储 rego。
- en: Constraint template
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 约束模板
- en: Think of this as a policy template. It’s portable and reusable. Constraint templates
    consist of typed parameters and the target rego that is parameterized for reuse.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将其视为一个策略模板。它是可移植和可重用的。约束模板由类型化参数和用于重用的目标 rego 组成。
- en: Defining Constraint Templates
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义约束模板
- en: 'Constraint templates are a [custom resource definition](https://oreil.ly/LQSAH)
    (CRD) that provide a means of templating policy so that it can be shared or reused.
    In addition, parameters for the policy can be validated. Let’s look at a constraint
    template, from the upstream [Gatekeeper policy library](https://oreil.ly/HksnE),
    in the context of the earlier examples. In the following example, we share a constraint
    template that provides the policy “Only allow containers from trusted container
    registries”:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 约束模板是一个[自定义资源定义](https://oreil.ly/LQSAH)（CRD），提供了模板化策略的手段，以便进行共享或重用。此外，可以验证策略的参数。让我们在上文示例的背景下看一个约束模板，来自上游[Gatekeeper
    策略库](https://oreil.ly/HksnE)。在以下示例中，我们分享了一个约束模板，提供策略“仅允许来自可信容器注册表的容器”：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The constraint template consists of three main components:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 约束模板由三个主要组成部分组成：
- en: Kubernetes-required CRD metadata
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 必需的 CRD 元数据
- en: The name is the most important part. It’s best practice to make it descriptive
    enough to easily identify the purpose of the policy. We reference this later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 名称是最重要的部分。最佳做法是使其描述性足够强，以便轻松识别策略的目的。我们稍后引用此名称。
- en: Schema for input parameters
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数的模式
- en: Indicated by the validation field, this section defines the input parameters
    and their associated types. In this example, we have a single parameter called
    `repos` that is an array of strings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据验证字段指示，此部分定义了输入参数及其关联类型。在本例中，我们有一个名为`repos`的单一参数，它是一个字符串数组。
- en: Policy definition
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 策略定义
- en: Indicated by the `target` field, this section contains templated rego (the language
    to define policy in OPA). Using a constraint template allows the templated rego
    to be reused and means that generic policy can be shared. If the rule matches,
    the constraint is violated.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`target`字段指示，此部分包含模板化的 rego（在 OPA 中定义策略的语言）。使用约束模板允许重复使用模板化的 rego，这意味着通用策略可以共享。如果规则匹配，则违反了约束。
- en: Defining Constraints
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义约束
- en: 'To use the previous constraint template, we must create a constraint resource.
    The purpose of the constraint resource is to provide the necessary parameters
    to the constraint template that we created earlier. You can see that the `kind`
    of the resource defined in the following example is `K8sAllowedRepos`, which maps
    to the constraint template defined in the previous section:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用先前的约束模板，我们必须创建约束资源。约束资源的目的是为我们之前创建的约束模板提供必要的参数。您可以看到以下示例中定义的资源的`kind`是`K8sAllowedRepos`，它映射到先前部分定义的约束模板：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The constraint consists of two main sections:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 约束包含两个主要部分：
- en: Kubernetes metadata
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 元数据
- en: Notice that this constraint is of `kind K8sAllowedRepos`, which matches the
    name of the constraint template.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此约束属于`kind K8sAllowedRepos`，与约束模板的名称匹配。
- en: The spec
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 规范
- en: The `match` field defines the scope of intent for the policy. In this example,
    we are matching pods only in the production namespace.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`match` 字段定义了策略的意图范围。在此示例中，我们仅匹配生产命名空间中的 Pod。'
- en: The parameters define the intent for the policy. Notice that they match the
    type from the constraint template schema from the previous section. In this case,
    we allow only container images that start with `openpolicyagent/`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参数定义策略的意图。请注意，它们与前一节约束模板架构的类型匹配。在本例中，我们只允许以 `openpolicyagent/` 开头的容器镜像。
- en: 'Constraints have the following operational characteristics:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 约束具有以下操作特征：
- en: Logical AND
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑 AND
- en: When multiple policies validate the same field, if one violates then the whole
    request is rejected
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当多个策略验证相同字段时，如果一个违反，则整个请求被拒绝
- en: Schema validation that allows early error detection
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许早期错误检测的模式验证
- en: Selection criteria
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择标准
- en: Can use label selectors
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用标签选择器
- en: Constrain only certain kinds
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅约束特定种类
- en: Constrain only in certain namespaces
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在特定命名空间约束
- en: Data Replication
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据复制
- en: In some cases, you might want to compare the current resource against other
    resources that are in the cluster, for example, in the case of “Ingress hostnames
    must not overlap.” OPA needs to have all the other Ingress resources in its cache
    in order to evaluate the rule. Gatekeeper uses a `config` resource to manage which
    data is cached in OPA in order to perform evaluations such as the one previously
    mentioned. In addition, `config` resources are also used in the audit functionality,
    which we explore a bit later on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望将当前资源与集群中的其他资源进行比较，例如，“Ingress 主机名不得重叠”的情况。为了评估规则，OPA 需要将所有其他 Ingress
    资源缓存到其缓存中。Gatekeeper 使用 `config` 资源来管理在 OPA 缓存中缓存哪些数据，以执行诸如前述的评估。此外，`config` 资源还用于审计功能，稍后我们会详细探讨。
- en: 'The following example `config` resource caches v1 service, pods, and namespaces:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例 `config` 资源缓存 v1 服务、Pod 和命名空间：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: UX
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UX
- en: Gatekeeper enables real-time feedback to cluster users for resources that violate
    defined policy. If we consider the example from the previous sections, we allow
    containers only from repositories that start with `openpolicyagent/`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Gatekeeper 允许实时反馈给集群用户资源违反了定义的策略。如果我们考虑前面章节的例子，我们只允许从以 `openpolicyagent/` 开头的仓库获取容器。
- en: 'Let’s try to create the following resource; it is not compliant given the current
    policy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试创建以下资源；根据当前策略，它是不合规的：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This gives you the violation message that’s defined in the constraint template:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这会给您定义在约束模板中的违规消息：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using Enforcement Action and Audit
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用执法行动和审计
- en: Thus far, we have discussed only how to define policy and have it enforced as
    part of the request admission process. Constraints include the ability to configure
    an `enforcementAction`, which by default is set to `deny`. In addition to `deny`,
    `enforcementAction` also allows accepted values of `warn` and `dryrun`. When we
    think about rolling out policy, it’s not always the case that you are applying
    to a cluster or namespace without resources already deployed. It’s therefore important
    to understand how to deploy policy to a cluster that already has resources deployed
    with the confidence that you can identify and remediate policy violations without
    necessarily breaking deployed workloads. The `enforcementAction` field allows
    you to define the behavior. When set to `deny`, a resource that violates policy
    will not be created and an error message will both be audit logged and sent back
    to the user. If set to `warn`, the resource will be created; however, a warning
    message will be audit logged and sent back to the user. Finally, if `dryrun` is
    set, the resource will be created and resources that violate the policy will be
    available in the audit log.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们仅讨论了如何定义策略并将其作为请求接受过程的一部分执行。约束包括配置 `enforcementAction` 的能力，默认设置为 `deny`。除了
    `deny` 外，`enforcementAction` 还允许接受 `warn` 和 `dryrun` 的值。当我们考虑部署策略时，并不总是情况下你正在应用到一个已有资源的集群或命名空间。因此，了解如何在已部署工作负载的集群上部署策略，并有信心能够识别和修复策略违规，是非常重要的。`enforcementAction`
    字段允许您定义其行为。当设置为 `deny` 时，违反策略的资源将不会被创建，并且错误消息将被记录到审计日志并返回给用户。如果设置为 `warn`，资源将会被创建；但是，会记录警告消息到审计日志并返回给用户。最后，如果设置为
    `dryrun`，资源将被创建，并且违反策略的资源将在审计日志中可用。
- en: Whatever `enforcementAction` you decide to use, Gatekeeper will periodically
    evaluate resources against any configured policy and provide an audit log. This
    helps with the detection of misconfigured resources according to policy and allows
    for remediation. The audit results are stored in the status field of the constraint,
    making them easy to find by simply using `kubectl`. To use audit, the resources
    to be audited must be replicated. For more details, refer to [“Data Replication”](#data_replication).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您决定使用何种 `enforcementAction`，Gatekeeper 都会定期评估资源，根据任何配置的策略提供审计日志。这有助于检测根据策略配置错误的资源，并允许进行修复。审计结果存储在约束的状态字段中，通过简单使用
    `kubectl` 即可找到。要使用审计，必须复制要审计的资源。有关更多详细信息，请参阅 [“数据复制”](#data_replication)。
- en: 'Let’s look at the constraint called `prod-repo-is-openpolicyagent` that you
    defined in the previous section. In this case, imagine we already had a pod called
    nginx running in the production namespace and we would like to check its compliance
    to the policy using audit:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您在前一节中定义的名为 `prod-repo-is-openpolicyagent` 的约束。在这种情况下，假设我们已经在生产命名空间中运行了一个名为
    nginx 的 Pod，并且我们希望使用审计来检查其符合策略：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Upon inspection, you can see the last time the audit ran in the `auditTimestamp`
    field. We also see all the resources that violate this constraint, only the nginx
    pod in this case, under the `violations` along with the `enforcementAction`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 检查时，您可以看到审计最后运行的时间在 `auditTimestamp` 字段中。我们还看到所有违反此约束的资源，本例中仅有 nginx Pod，在 `violations`
    中，以及 `enforcementAction`。
- en: Mutation
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变异
- en: In addition to resource validation, Gatekeeper also allows you to configure
    mutation policies. Mutation policies allow you to modify Kubernetes resources
    at admission time. Generally, mutating resources at admission time is not considered
    best practice. Having resources “magically” modified by Gatekeeper is a cloud
    native antipattern as this is counter to the declarative nature of Kubernetes.
    Mutation policies are simply mentioned here to provide guidance to avoid them
    unless you feel your use case absolutely requires them and that you have exhausted
    other best practices. Refer to [Chapter 18](ch18.html#gitops) for more details
    on how to implement declarative best practices for Kubernetes resources.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了资源验证外，Gatekeeper 还允许您配置变异策略。变异策略允许您在准入时修改 Kubernetes 资源。通常情况下，在准入时修改资源并不被认为是最佳实践。Gatekeeper
    “神奇地”修改资源是云原生反模式，与 Kubernetes 的声明性本质相违背。这里简单提到变异策略，旨在提供指导，以避免除非您的用例绝对需要，并且已经尽力遵循其他最佳实践。有关如何实施
    Kubernetes 资源的声明式最佳实践的更多详细信息，请参阅 [第18章](ch18.html#gitops)。
- en: Testing Policies
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试策略
- en: As the GitOps philosophy has become widely adopted, testing policy and evaluation
    as part of local testing or CI/CD pipelines has become a must have. Gatekeeper
    ships with a `gator` CLI that enables you to take the constraint templates and
    constraints and run a local evaluation. This is a great tool for building new
    policies, testing them against your resources, and remediating any issues prior
    to deploying them to your production clusters. The [Gatekeeper documentation](https://oreil.ly/Qj4p8)
    provides a practical guide to using the `gator` CLI to test policy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 GitOps 理念的广泛采纳，将策略和评估作为本地测试或 CI/CD 流水线的一部分已成为必备。Gatekeeper 配备了一个 `gator`
    CLI，使您能够获取约束模板和约束，并进行本地评估。这是一个很好的工具，用于构建新策略，对资源进行测试，并在部署到生产集群之前解决任何问题。[Gatekeeper
    文档](https://oreil.ly/Qj4p8) 提供了使用 `gator` CLI 进行策略测试的实用指南。
- en: Becoming Familiar with Gatekeeper
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉 Gatekeeper
- en: If you’d like to explore Gatekeeper further, the repository ships with fantastic
    demonstration content that walks you through a detailed example of building policies
    to meet compliance for a bank. We would strongly recommend walking through the
    demonstration for a hands-on approach to how Gatekeeper operates. You can find
    the demonstration in [this Git repository](https://oreil.ly/GcR3i). Gatekeeper
    also maintains a [public library](https://oreil.ly/e8ESD) of policies that you
    can apply to your cluster with easy installation guidance via [ArtifactHub](https://oreil.ly/uEcfn).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望进一步探索 Gatekeeper，请注意，该存储库附带了出色的演示内容，带您详细了解构建银行合规性政策的示例。我们强烈建议您参与这一演示，以深入了解
    Gatekeeper 的操作方式。您可以在 [此 Git 存储库](https://oreil.ly/GcR3i) 中找到演示。Gatekeeper 还维护着一个
    [公共库](https://oreil.ly/e8ESD)，其中包含一些政策，您可以通过 [ArtifactHub](https://oreil.ly/uEcfn)
    提供的简易安装指南将其应用到您的集群上。
- en: Policy and Governance Best Practices
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 政策与治理最佳实践
- en: 'You should consider the following best practices when implementing policy and
    governance on your clusters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施集群上的策略和治理时，您应考虑以下最佳实践：
- en: If you want to enforce a specific field in a pod, you need to determine which
    Kubernetes resource specification you want to inspect and enforce. Let’s consider
    the case of Deployments, for example. Deployments manage ReplicaSets, which manage
    pods. We could enforce at all three levels, but the best choice is the one that
    is the lowest handoff point before the runtime, which in this case is the pod.
    This decision, however, has implications. The user-friendly error message when
    we try to deploy a noncompliant pod, as seen in [“UX”](#user_x), is not going
    to be displayed. This is because the user is not creating the noncompliant resource,
    the ReplicaSet is. This experience means that the user would need to determine
    that the resource is not compliant by running a `kubectl describe` on the current
    ReplicaSet associated with the Deployment. Although this might seem cumbersome,
    this is consistent behavior with other Kubernetes features, such as pod security.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想强制执行 Pod 中的特定字段，需要确定要检查和强制执行的 Kubernetes 资源规范。例如，让我们考虑 Deployments 的情况。Deployments
    管理 ReplicaSets，ReplicaSets 管理 Pods。我们可以在所有三个级别强制执行，但最佳选择是在运行时之前的最低交接点，即 Pod。然而，这个决定有其影响。例如，当我们尝试部署不符合规范的
    Pod 时，如在 [“UX”](#user_x) 中所见，将不会显示用户友好的错误消息。这是因为用户并未创建不符合规范的资源，而是 ReplicaSet 在创建。这种经历意味着用户需要通过运行
    `kubectl describe` 来确定资源是否符合规范，尽管这可能看起来很繁琐，但与其他 Kubernetes 特性（如 Pod 安全性）的行为是一致的。
- en: 'Constraints can be applied to Kubernetes resources on the following criteria:
    kinds, namespaces, and label selectors. We would strongly recommend scoping the
    constraint to the resources to which you want it to be applied as tightly as possible.
    This ensures consistent policy behavior as the resources on the cluster grow,
    and means that resources that don’t need to be evaluated aren’t being passed to
    OPA, which can result in other inefficiencies.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束可以根据以下标准应用于 Kubernetes 资源：种类、命名空间和标签选择器。我们强烈建议尽可能将约束范围限定在您希望应用的资源上。这样可以确保随着集群资源的增长，政策行为保持一致，并且不需要评估不需要的资源，避免将不需要评估的资源传递给
    OPA，这可能导致其他效率低下的情况发生。
- en: On clusters with resources that are already deployed, utilize `warn` and `dryrun`
    along with audit to remediate resources that violate policy before setting the
    `enforcementAction` to `deny`.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在已部署资源的集群上，利用 `warn` 和 `dryrun` 结合审核，在将 `enforcementAction` 设置为 `deny` 之前，修复违反策略的资源。
- en: Don’t use mutation policies; instead consider other declarative approaches,
    including GitOps.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用变异策略；而是考虑其他声明性方法，包括 GitOps。
- en: Synchronizing and enforcing on potentially sensitive data such as Kubernetes
    secrets is *not* recommended. Given that OPA will hold this in its cache (if it
    is configured to replicate that data) and resources will be passed to Gatekeeper,
    it leaves surface area for a potential attack vector.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不推荐在可能涉及敏感数据的情况下同步和执行，例如 Kubernetes 密钥。考虑到 OPA 可能将其保存在缓存中（如果配置为复制该数据），并且资源将被传递给
    Gatekeeper，这会留下潜在的攻击面。
- en: If you have many constraints defined, a deny of constraint means that the entire
    request is denied. There is no way to make this function as a logical OR.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果定义了许多约束，拒绝约束意味着整个请求都将被拒绝。无法使此功能成为逻辑 OR。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered why policy and governance are important and walked
    through a project that’s built upon OPA, a cloud native ecosystem policy engine,
    to provide a Kubernetes-native approach to policy and governance. You should now
    be prepared and confident the next time the security teams asks, “Are our clusters
    in compliance with our defined policy?”
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了为什么策略和治理很重要，并介绍了一个基于 OPA 构建的项目，它是一个云原生生态系统策略引擎，提供了一种 Kubernetes 本地方法来处理策略和治理。现在，当安全团队询问“我们的集群是否符合我们定义的策略？”时，您应该已经准备好并自信了。
