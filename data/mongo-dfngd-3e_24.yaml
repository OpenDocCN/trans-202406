- en: Chapter 19\. An Introduction to MongoDB Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To protect your MongoDB cluster and the data it holds, you will want to employ
    the following security measures:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable authorization and enforce authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter demonstrates how to address the first two security measures with
    a tutorial on using MongoDB’s support for x.509 to configure authentication and
    transport layer encryption to ensure secure communications among clients and servers
    in a MongoDB replica set. We will touch on encrypting data at the storage layer
    in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Authentication and Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While authentication and authorization are closely connected, it is important
    to note that authentication is distinct from authorization. The purpose of authentication
    is to verify the identity of a user, while authorization determines the verified
    user’s access to resources and operations.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication Mechanisms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enabling authorization on a MongoDB cluster enforces authentication and ensures
    users can only perform actions they are authorized for, as determined by their
    roles. The Community version of MongoDB provides support for SCRAM (Salted Challenge
    Response Authentication Mechanism) and x.509 certificate authentication. In addition
    to SCRAM and x.509, MongoDB Enterprise supports Kerberos authentication and LDAP
    proxy authentication. See the [documentation](https://oreil.ly/RQ5Jp) for details
    on the various authentication mechanisms that MongoDB supports. In this chapter,
    we will focus on x.509 authentication. An x.509 digital certificate uses the widely
    accepted x.509 public key infrastructure (PKI) standard to verify that a public
    key belongs to the presenter.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding a user in MongoDB, you must create the user in a specific database.
    That database is the authentication database for the user; you can use any database
    for this purpose. The username and authentication database serves as a unique
    identifier for a user. However, a user’s privileges are not limited to their authentication
    database. When creating a user, you can specify the operations the user may perform
    on any resources to which they should have access. Resources include the cluster,
    databases, and collections.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB provides a number of built-in roles that grant commonly needed permissions
    for database users. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`read`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read data on all nonsystem collections and on the following system collections:
    *system.indexes*, *system.js*, and *system.namespaces.*'
  prefs: []
  type: TYPE_NORMAL
- en: '`readWrite`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides same privileges as `read`, plus the ability to modify data on all nonsystem
    collections and the *system.js* collection.
  prefs: []
  type: TYPE_NORMAL
- en: '`dbAdmin`'
  prefs: []
  type: TYPE_NORMAL
- en: Perform administrative tasks such as schema-related tasks, indexing, and gathering
    statistics (does not grant privileges for user and role management).
  prefs: []
  type: TYPE_NORMAL
- en: '`userAdmin`'
  prefs: []
  type: TYPE_NORMAL
- en: Create and modify roles and users on the current database.
  prefs: []
  type: TYPE_NORMAL
- en: '`dbOwner`'
  prefs: []
  type: TYPE_NORMAL
- en: Combines the privileges granted by the *readWrite*, *dbAdmin*, and *userAdmin*
    roles.
  prefs: []
  type: TYPE_NORMAL
- en: '`clusterManager`'
  prefs: []
  type: TYPE_NORMAL
- en: Perform management and monitoring actions on the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: '`clusterMonitor`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides read-only access to monitoring tools such as the MongoDB Cloud Manager
    and Ops Manager monitoring agent.
  prefs: []
  type: TYPE_NORMAL
- en: '`hostManager`'
  prefs: []
  type: TYPE_NORMAL
- en: Monitor and manage servers.
  prefs: []
  type: TYPE_NORMAL
- en: '`clusterAdmin`'
  prefs: []
  type: TYPE_NORMAL
- en: Combines the privileges granted by the *clusterManager*, *clusterMonitor*, and
    *hostManager* roles, plus the *dropDatabase* action.
  prefs: []
  type: TYPE_NORMAL
- en: '`backup`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides sufficient privileges to use the MongoDB Cloud Manager backup agent
    or the Ops Manager backup agent, or to use *mongodump* to back up an entire *mongod*
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: '`restore`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides privileges needed to restore data from backups that do not include
    *system.profile* collection data.
  prefs: []
  type: TYPE_NORMAL
- en: '`readAnyDatabase`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides same privileges as *read* on all databases except *local* and *config*,
    plus the *listDatabases* action on the cluster as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: '`readWriteAnyDatabase`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides same privileges as *readWrite* on all databases except *local* and
    *config*, plus the *listDatabases* action on the cluster as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: '`userAdminAnyDatabase`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides same privileges as *userAdmin* on all databases except *local* and
    *config* (effectively a superuser role).
  prefs: []
  type: TYPE_NORMAL
- en: '`dbAdminAnyDatabase`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides same privileges as *dbAdmin* on all databases except *local* and *config*,
    plus the *listDatabases* action on the cluster as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: '`root`'
  prefs: []
  type: TYPE_NORMAL
- en: Provides access to the operations and all the resources of the *readWriteAnyDatabase*,
    *dbAdminAnyDatabase*, *userAdminAnyDatabase*, *clusterAdmin*, *restore*, and *backup*
    roles combined.
  prefs: []
  type: TYPE_NORMAL
- en: You may also create what are known as “user-defined roles,” which are custom
    roles that group together authorization to perform specific operations and label
    them with a name so that you may grant this set of permissions to multiple users
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: A deep dive on built-in roles or user-defined roles is beyond the scope of this
    chapter. However, this introduction should give you a pretty good idea of what’s
    possible with MongoDB authorization. For greater detail, please see [the authorization
    section of the MongoDB documentation](https://docs.mongodb.com/manual/core/authorization/).
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that you can add new users as needed, you must first create an admin
    user. MongoDB does not create a default root or admin user when enabling authentication
    and authorization, regardless of the authentication mode you are using (x.509
    is no exception).
  prefs: []
  type: TYPE_NORMAL
- en: In MongoDB, authentication and authorization are not enabled by default. You
    must explicitly enable them by using the `--auth` option to the `mongod` command
    or specifying a value of `"enabled"` for the `security.authorization` setting
    in a MongoDB config file.
  prefs: []
  type: TYPE_NORMAL
- en: To configure a replica set, first bring it up without authentication and authorization
    enabled, then create the admin user and the users you’ll need for each client.
  prefs: []
  type: TYPE_NORMAL
- en: Using x.509 Certificates to Authenticate Both Members and Clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given that all production MongoDB clusters are composed of multiple members,
    to secure a cluster, it is essential that all services communicating within the
    cluster authenticate with one another. Each member of a replica set must authenticate
    with the others in order to exchange data. Likewise, clients must authenticate
    with the primary and any secondaries that they communicate with.
  prefs: []
  type: TYPE_NORMAL
- en: For x.509, it’s necessary that a trusted certification authority (CA) sign all
    certificates. Signing certifies that the named subject of a certificate owns the
    public key associated with that certificate. A CA acts as a trusted third party
    to prevent man-in-the-middle attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 19-1](#x509) depicts x.509 authentication used to secure a three-member
    MongoDB replica set. Note the authentication among the client and members of the
    replica set and the trust relationships with the CA.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/mdb3_1901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19-1\. Overview of the trust hierarchy for X.509 authentication for the
    three-member replica set used in this chapter
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The members and the client each have their own certificate signed by the CA.
    For production use, your MongoDB deployment should use valid certificates generated
    and signed by a single certificate authority. You or your organization can generate
    and maintain an independent certificate authority, or you can use certificates
    generated by a third-party TLS/SSL vendor.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will refer to certificates used for internal authentication to verify membership
    in a cluster as member certificates. Both member certificates and client certificates
    (used to authenticate clients) have a structure resembling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For use with x.509 authentication in MongoDB, member certificates must have
    the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: A single CA must issue all x.509 certificates for the members of the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Distinguished Name (`DN`), found in the subject of the member certificate,
    must specify a nonempty value for at least one of the following attributes: Organization
    (`O`), Organizational Unit (`OU`), or Domain Component (`DC`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `O`, `OU`, and `DC` attributes must match those from the certificates for
    the other cluster members.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Common Name (`CN`) or a Subject Alternative Name (`SAN`) must match the
    hostname of the server used by the other members of the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Tutorial on MongoDB Authentication and Transport Layer Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial we will set up a root CA and an intermediate CA. Best practice
    recommends signing the server and client certificates with the intermediate CA.
  prefs: []
  type: TYPE_NORMAL
- en: Establish a CA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can generate signed certificates for the members of our replica set,
    we must first address the issue of a certificate authority. As mentioned previously,
    we can either generate and maintain an independent certificate authority or use
    certificates generated by a third-party TLS/SSL vendor. We will generate our own
    CA to use for the running example in this chapter. Note that you may access all
    the code examples in this chapter from the GitHub repository maintained for this
    book. The examples are drawn from a script you can use to deploy a secure replica
    set. You’ll see comments from this script throughout these examples.
  prefs: []
  type: TYPE_NORMAL
- en: Generate a root CA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To generate our CA, we will use OpenSSL. To follow along, please make sure you
    have access to OpenSSL on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: A root CA is at the top of the certificate chain. This is the ultimate source
    of trust. Ideally, a third-party CA should be used. However, in the case of an
    isolated network (typical in a large enterprise environment) or for testing purposes,
    you’ll need to use a local CA.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll initialize some variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we’ll create a key pair and store it in the file *root-ca.key*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll create a configuration file to hold our OpenSSL settings that we
    will use to generate the certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, using the `openssl req` command, we will create the root certificate.
    Since the root is the very top of the authority chain, we’ll self-sign this certificate
    using the private key we created in the previous step (stored in *root-ca.key*).
    The `-x509` option tells the `openssl req` command we want to self-sign the certificate
    using the private key supplied to the `-key` option. The output is a file called
    *root-ca.crt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you take a look at the *root-ca.crt* file, you’ll find that it contains
    the public certificate for the root CA. You can verify the contents by taking
    a look at a human-readable version of the certificate produced by this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from this command will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Create an intermediate CA for signing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we’ve created our root CA, we will create an intermediate CA for signing
    member and client certificates. An intermediate CA is nothing more than a certificate
    signed using our root certificate. It is a best practice to use an intermediate
    CA to sign server (i.e., member) and client certificates. Typically, a CA will
    use different intermediate CAs for signing different categories of certificates.
    If the intermediate CA is compromised and the certificate needs to be revoked,
    only a portion of the trust tree is affected instead of all certificates signed
    by the CA, as would be the case if the root CA were used to sign all certificates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the statements above we are using the `openssl req` command followed
    by the `openssl ca` command to sign our signing certificate using our root certificate.
    The `openssl req` command creates a signing request and the `openssl ca` command
    uses that request as input to create a signed intermediate (signing) certificate.
  prefs: []
  type: TYPE_NORMAL
- en: As a last step in creating our signing CA, we will concatenate our root certificate
    (containing our root public key) and signing certificate (containing our signing
    public key) into a single pem file. This file will be supplied to our mongod or
    client process later as the value of the `--tlsCAFile` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the root CA and signing CA set up, we are now ready to create the member
    and client certificates used for authentication in our MongoDB cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Generate and Sign Member Certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Member certificates are typically referred to as x.509 server certificates.
    Use this type of certificate for *mongod* and *mongos* processes. Members of a
    MongoDB cluster use these certificates to verify membership in the cluster. Stated
    another way, one *mongod* authenticates itself with other members of a replica
    set using a server certificate.
  prefs: []
  type: TYPE_NORMAL
- en: To generate certificates for the members of our replica set, we will use a `for`
    loop to generate multiple certificates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Three steps are involved with each certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the *openssl genrsa* command to create a new key pair.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *openssl req* command to generate a signing request for the key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *openssl x509* command to sign and output a certificate using the signing
    CA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice the variable `$ou_member`. This signifies the difference between server
    certificates and client certificates. Server and client certificates must differ
    in the organization part of the Distinguished Names. More specifically, they must
    differ in at least one of the O, OU, or DC values.
  prefs: []
  type: TYPE_NORMAL
- en: Generate and Sign Client Certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Client certificates are used by the mongo shell, MongoDB Compass, MongoDB utilities
    and tools and, of course, by applications using a MongoDB driver. Generating client
    certificates follows essentially the same process as for member certificates.
    The one difference is our use of the variable `$ou_client`. This ensure that the
    combination of the O, OU, and DC values will be different from those of the server
    certificates generated above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Bring Up the Replica Set Without Authentication and Authorization Enabled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can start each member of our replica set without auth enabled as follows.
    Previously, when working with replica sets we’ve not enabled auth so this should
    look familiar. Here again we are making use of a few variables we defined in [“Generate
    a root CA”](#generateRootca) (or see the full script for this chapter) and a loop
    to launch each member (*mongod*) of our replica set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once each *mongod* has started, we can then initialize a replica set using these
    *mongod*s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that the code above simply constructs a series of commands, stores these
    commands in a JavaScript file, and then runs the *mongo* shell to execute the
    small script that was created. Together, these commands, when executed in the
    *mongo* shell, will connect to the *mongod* running on port 27017 (value of the
    `$mongodb_port` variable set in [“Generate a root CA”](#generateRootca)), initiate
    the replica set, and then add each of the other two *mongod*s (on ports 27018
    and 27019) to the replica set.
  prefs: []
  type: TYPE_NORMAL
- en: Create the Admin User
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we’ll create an admin user based on one of the client certificates we created
    in [“Generate and Sign Client Certificates”](#generateSCC). We will authenticate
    as this user when connecting from the *mongo* shell or another client to perform
    administrative tasks. To authenticate with a client certificate, you must first
    add the value of the subject from the client certificate as a MongoDB user. Each
    unique x.509 client certificate corresponds to a single MongoDB user; i.e., you
    cannot use a single client certificate to authenticate more than one MongoDB user.
    We must add the user in the $external database; i.e., the authentication database
    is the $external database.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll get the subject from our client certificate using the *openssl
    x509* command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This should result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To create our admin user, we’ll first connect to the primary of our replica
    set using the *mongo* shell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'From within the *mongo* shell, we will issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of the $external database in this command and the fact that we’ve
    specified the subject of our client certificate as the user name.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the Replica Set with Authentication and Authorization Enabled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have an admin user, we can restart the replica set with authentication
    and authorization enabled and connect as a client. Without a user of any kind,
    it would be impossible to connect to a replica set with auth enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s stop the replica set in it’s current form (without auth enabled).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to restart the replica set with auth enabled. In a production
    environment, we would copy each of the certificate and key files to their corresponding
    hosts. Here we’re doing everything on localhost to make things easier. To initiate
    a secure replica set we will add the following command-line options to each invocation
    of *mongod*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--tlsMode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--clusterAuthMode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tlsCAFile`—root CA file (root-ca.key)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tlsCertificateKeyFile`—certificate file for the *mongod*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tlsAllowInvalidHostnames`—only used for testing; allows invalid hostnames'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here the file we provide as the value of the `tlsCAFile` option is used to establish
    a trust chain. As you recall the *root-ca.key* file contains the certificate of
    the root CA as well as the signing CA. By providing this file to the *mongod*
    process, we are stating our desire to trust the certificate contained in this
    file as well as all other certificates signed by these certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let’s do this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: And with that, we have a three-member replica set secured using x.509 certificates
    for authentication and transport-layer encryption. The only thing left to do is
    to connect with the mongo shell. We’ll use the client1 certificate to authenticate,
    because that is the certificate for which we created an admin user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Once connected, we encourage you to experiment by inserting some data to a collection.
    You should also attempt to connect using any other user (e.g., using the `client2.pem`).
    Connections attempts will result in errors like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the tutorial in this chapter, we’ve looked at an example of using x.509
    certificates as a basis for authentication and to encrypt communication among
    clients and members of a replica set. The same procedure works for sharded clusters
    as well. With respect to securing a MongoDB cluster, please keep the following
    in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: The directories, root CA and signing CA, as well as the host itself where you
    generate and sign certificates for the member machines or clients, should be protected
    from unauthorized access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For simplicity, the root CA and signing CA keys are not password protected in
    this tutorial. In production it is necessary to use passwords to protect the key
    from unauthorized use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We encourage you to download and experiment with the demo scripts we have provided
    for this chapter in the book’s GitHub repository.
  prefs: []
  type: TYPE_NORMAL
