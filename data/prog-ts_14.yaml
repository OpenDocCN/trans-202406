- en: Appendix A. Type Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript supports a rich set of type operators for working with types. Use
    [Table A-1](#type-operator-table) as a handy reference for when you want to learn
    more about an operator.
  prefs: []
  type: TYPE_NORMAL
- en: Table A-1\. Type operators
  prefs: []
  type: TYPE_NORMAL
- en: '| Type operator | Syntax | Use it on | Learn more |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Type query | `typeof`, `instanceof` | Any type | [“Refinement”](ch06.html#refinement),
    [“Classes Declare Both Values and Types”](ch05.html#classes-declare-values-and-types)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Keys | `keyof` | Object types | [“The keyof operator”](ch06.html#keyof) |'
  prefs: []
  type: TYPE_TB
- en: '| Property lookup | `O[K]` | Object types | [“The keying-in operator”](ch06.html#keying-in)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Mapped type | `[K in O]` | Object types | [“Mapped Types”](ch06.html#mapped-types)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Modifier addition | `+` | Object types | [“Mapped Types”](ch06.html#mapped-types)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Modifier subtraction | `-` | Object types | [“Mapped Types”](ch06.html#mapped-types)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Read-only modifier | `readonly` | Object types, array types, tuple types
    | [“Objects”](ch03.html#object-type), [“Classes and Inheritance”](ch05.html#classes-and-inheritance),
    [“Read-only arrays and tuples”](ch03.html#readonly-array) |'
  prefs: []
  type: TYPE_TB
- en: '| Optional modifier | `?` | Object types, tuple types, function parameter types
    | [“Objects”](ch03.html#object-type), [“Tuples”](ch03.html#tuple-type), [“Optional
    and Default Parameters”](ch04.html#optional-function-params) |'
  prefs: []
  type: TYPE_TB
- en: '| Conditional type | `?` | Generic types, type aliases, function parameter
    types | [“Conditional Types”](ch06.html#conditional-types) |'
  prefs: []
  type: TYPE_TB
- en: '| Non`null` assertion | `!` | Nullable types | [“Nonnull Assertions”](ch06.html#non-null-assertions),
    [“Definite Assignment Assertions”](ch06.html#definite-assignment-assertions) |'
  prefs: []
  type: TYPE_TB
- en: '| Generic type parameter default | `=` | Generic types | [“Generic Type Defaults”](ch04.html#generic-type-defaults)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Type assertion | `as`, `<>` | Any type | [“Type Assertions”](ch06.html#type-assertions),
    [“The const type”](ch06.html#const-types) |'
  prefs: []
  type: TYPE_TB
- en: '| Type guard | `is` | Function return types | [“User-Defined Type Guards”](ch06.html#user-defined-type-guards)
    |'
  prefs: []
  type: TYPE_TB
