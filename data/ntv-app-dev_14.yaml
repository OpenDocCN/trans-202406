- en: Chapter 13\. Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes the functionality provided by Android and iOS just isn’t enough, and
    sometimes the functionality provided by third-party libraries or internal objects
    just doesn’t make the cut. Sure, you can subclass, but it’s not always feasible
    for that to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, both platforms have a means to augment existing objects.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn to add functionality to existing APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we have spent the majority of this book defaulting to Java as the language
    for Android development, and indeed the great majority of Android development
    does happen in Java, we must now mention that in the Android Framework, *only
    Kotlin is capable of supporting extensions*. What does that mean? Let’s define
    the word “extension” to mean “alter or add functionality to any class.” However,
    Java classes in a project with Kotlin extensions *can* take advantage of the extended
    functionality!
  prefs: []
  type: TYPE_NORMAL
- en: Add Functionality to Existing APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Java, if you import a third-party library for `CalendarPicker`, you’re pretty
    much stuck with whatever public API that library provides. Of course, you can
    alter the source, but at that point you’ve created your own `CalendarPicker`,
    which will not be an instance of the same class as the original. You could also
    subclass `CalendarPicker`, but the same caveat applies. It is not possible to
    add or change the existing functionality of the existing `CalendarPicker` API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Kotlin, this is no longer true. Not only could you add a method to `CalendarPicker`
    that *all* instances of `CalendarPicker` would have access to, you could in fact
    add methods to standard library classes like `LinkedList`, or even classes with
    generic typing like `HashSet<String>`. In fact, there’s even an `Any` class in
    Kotlin that can be extended to add functionality to all class instances. The classic
    example of Kotlin extensions does this very thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This adds Kotlin’s `?` null-safety operator to the *body* of the common `Object.toString`
    method. By adding the preceding code, you can safely call `toString` on any object;
    if the object is `null`, instead of a `NullPointerException`, you’ll just get
    back the string `"null"`. Pretty intense!
  prefs: []
  type: TYPE_NORMAL
- en: You can add your extensions anywhere, in any package or directory structure
    you like (as long as it’s a Kotlin file, in a *src* directory). For example, right-click
    any package in your project, select New > Kotlin File/Class, and give any name—let’s
    say “extensions” for now (Android Studio will append the “.kt” extension and show
    a different icon indicating it’s a Kotlin file).
  prefs: []
  type: TYPE_NORMAL
- en: 'You could add a number of extension functions to this file, or any number of
    files, and all would be accessible from any Kotlin class in your project. Let’s
    say you added the following `String` helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in some Kotlin class, you could call something like this and get the expected
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See [the developer docs](https://oreil.ly/oGVHb) for more information on Kotlin
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the core language features of Swift is the ability to add new functionality
    to types with extensions. In fact, this is a major part of the Objective-C language
    runtime as well, albeit by the name of “category” instead of “extension.” This
    capability is well baked into Swift and, in fact, very common in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Add Functionality to Existing APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First, we define a class called `ExtendableObject`. In our example, the class
    doesn’t have a body because it’s not important to the example. The real heart
    of the example is in the next section where we define the extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our extension is declared on the `ExtendableObject` using `extension ExtendableObject
    { ... }`. Within that definition, we declare and define a new method called `helloTacos()`
    that, conveniently, prints the string `Hello, tacos!` to the console. We use our
    newly defined method by instantiating the object and calling `helloTacos()` as
    you would any other method on the object, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One huge, important thing to note. You can add new methods and functions to
    existing object types, but it’s not possible to add new stored properties without
    importing the Objective-C runtime and using associated values. It’s generally
    not recommended except for very rare circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions for code organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because extensions are such an integral part of the Swift language, it’s become
    common practice in Swift projects to use extensions to organize code throughout
    a project. Often, you’ll see implementation of protocols stuffed inside an extension
    at the bottom of a class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we declare a new protocol called `AwesomeProtocol` with the required
    method `beAwesome()`. Next, we declare `ExtendableObject`. It’s possible to directly
    implement the protocol by declaring it as part of the definition of `ExtendableObject`
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: However, because of the protocol-oriented nature of Swift, this can become unwieldy
    and not easy to maintain as the number of protocols an object must implement grows
    as the complexity of the application grows. Our previous example, with the extension
    split off separately, allows us to lump the protocol conformance together and
    make it easier to find and maintain in the future.
  prefs: []
  type: TYPE_NORMAL
- en: This is entirely a subjective way to organize code, but it’s something of a
    de facto standard in the Swift community. Feel free to use or not use!
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of protocols in Swift—it’s possible to extend those too! Let’s take
    a look.
  prefs: []
  type: TYPE_NORMAL
- en: Extending protocols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Extending classes and structures in Swift is slightly different than extending
    protocols. The syntax is similar, but the mechanism behind it is different. Here’s
    how to extend a protocol in Swift:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The protocol we’re extending is not an Objective-C protocol written in Swift—it’s
    a pure Swift object. That’s important because only pure Swift protocols can be
    extended. It’s also not possible to extend methods prefixed with `@objc`.
  prefs: []
  type: TYPE_NORMAL
- en: This example creates a protocol, named `ExtendableProtocol`, with a `doSomething()`
    method declared as part of the protocol. Next, the extension added to the protocol
    adds a new `printSomething` method that is declared and defined as part of the
    extension. Finally, the class `SomeObject` is defined to implement the `ExtendableProtocol`
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling an instance of `SomeObject` might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Pretty simple and not too far removed from class and structure extensions, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Where the power of protocol extensions becomes apparent is when you need common
    functionality across objects that do not inherit from the same base class. Take
    a look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we declare a protocol, `Typeable`, and an extension on that protocol,
    which outputs an object’s type. Next, declare three base classes that are totally
    different objects and not related in any way. Then, we declare three more child
    objects that each inherit from a different parent class, but that all implement
    our protocol from before: `Typeable`. After that, we instantiate each class. Finally,
    we call the same method, `printType`, that was declared in one place, but that
    functions exactly the same for each discrete and separate object.'
  prefs: []
  type: TYPE_NORMAL
- en: Protocol extensions are a powerful addition to Swift that has enabled cleaner
    code, with a better, more maintainable, architecture.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ve Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding functionality isn’t easily possible with Java, but Kotlin and Swift both
    provide built-in mechanisms for extending existing objects. There are limitations
    in both approaches, but there is a definite use case for the capability enabled
    by both languages and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In our final chapter on tasks, we turn our attention not toward building, but
    toward maintaining what we’ve already built through testing. Both platforms have
    excellent tooling around testing. Let’s dive in to see what’s available!
  prefs: []
  type: TYPE_NORMAL
