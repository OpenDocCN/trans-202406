- en: Appendix B. Chart Repository API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.xhtml#chart_repositories), we covered chart repositories.
    This appendix briefly covers the chart repository API, the underlying specification
    that enables Helm to work with chart repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart repository API is lightweight because there is only one required
    HTTP endpoint that must be implemented: `GET /index.yaml`.'
  prefs: []
  type: TYPE_NORMAL
- en: In 99% of cases, chart repositories also serve chart package tarballs (*.tgz*)
    and any associated provenance files (*.prov*). However, it is also possible to
    host these files on a separate domain.
  prefs: []
  type: TYPE_NORMAL
- en: As described in detail in [Chapter 7](ch07.xhtml#chart_repositories), *index.yaml*
    represents the repository index, containing a complete list of all the available
    chart versions in the repository. The format of this file is specific to Helm,
    and it currently has only one API version (`1`).
  prefs: []
  type: TYPE_NORMAL
- en: index.yaml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When implementing the chart repository API, your service must provide an HTTP
    `GET /index.yaml` route relative to the repository URL provided. The response
    from this request must return a status code `200 OK`, and the response body must
    be a valid *index.yaml* as described in the following.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `GET /index.yaml` endpoint does not need to be at the root of the URL path.
    For instance, given a provided repository URL such as *[*https://example.com/charts*](https://example.com/charts)*,
    the `GET /index.yaml` route must be accessible at *[*https://example.com/charts/index.yaml*](https://example.com/charts/index.yaml)*.
  prefs: []
  type: TYPE_NORMAL
- en: The index.yaml Format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following is a simple, valid *index.yaml* with a single chart version (`superapp-0.1.0`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_chart_repository_api_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The repository API version (must always be `v1`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_chart_repository_api_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: A map of unique chart names in the repository to a list of all available versions.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_chart_repository_api_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The timestamp of when the tarball was created using `helm package`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_chart_repository_api_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: A SHA-256 digest of the tarball.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_chart_repository_api_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: A list of URLs where the chart can be downloaded. These URLs can be absolute,
    and even hosted on separate domain(s). If a relative path is provided, it is considered
    relative to *index.yaml*. Usually only one URL entry is provided per chart version,
    but multiple can be provided, and Helm will try to download the next item in the
    list if the previous one is inaccessible.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_chart_repository_api_CO1-6)'
  prefs: []
  type: TYPE_NORMAL
- en: The timestamp of when this *index.yaml* file was generated, in RFC 3339 format.
  prefs: []
  type: TYPE_NORMAL
- en: With the exception of the fields `created`, `digest`, and `urls`, all of the
    fields on each individual chart version are defined by the chart API (`name`,
    `version`, etc.). Please see [Appendix A](app01.xhtml#appendix_a_chart_api_versions)
    for more info.
  prefs: []
  type: TYPE_NORMAL
- en: When Is index.yaml Downloaded?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are five noteworthy scenarios when Helm downloads or redownloads the
    repository index:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When initially adding a chart repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When updating all chart repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When updating dependencies (disabled with the `--skip-refresh` flag):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When building dependencies from a lock file (disabled with the `--skip-refresh`
    flag):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When installing a local chart with dependencies using the `--dependency-update`
    flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When Is the Cached Version of index.yaml Used?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once *index.yaml* is downloaded, it is stored in a local cache and used whenever
    you reference the unique name you have associated with the repository (e.g., “myrepo”).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five noteworthy scenarios when Helm makes use of the locally cached
    repository index:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When pulling a chart from a repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When installing a chart from a repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When upgrading a release based on a chart from a repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When searching for charts to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When updating dependencies using the `--skip-refresh` flag (and a dependency
    contains an `alias` subfield such as `"@myrepo"`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: .tgz Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*.tgz* files in a repository represent individual chart versions, packaged
    as compressed tarballs.'
  prefs: []
  type: TYPE_NORMAL
- en: There is no requirement for the URL path for these files as they are hosted
    in the repository; however, they must be able to be downloaded when they are requested
    by Helm. The status code of the response must be a `200 OK`, and the response
    body should be the content of the *.tgz* in binary form.
  prefs: []
  type: TYPE_NORMAL
- en: When Are .tgz Files Downloaded?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three noteworthy scenarios when Helm downloads chart package *.tgz*
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When pulling a chart from a repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When installing a chart from a repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When upgrading a release based on a chart from a repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: .prov Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*.prov* files in a repository represent chart version signature files, signed
    with GNU Privacy Guard. These files are *optional* and are used for verification
    purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike *.tgz* files, *.prov* files have a unique URL path requirement. They
    must be accessible at the path of the associated *.tgz* suffixed with *.prov*.
    For example, if a *.tgz* file is located at *https://charts.example.com/superapp-0.1.0.tgz*,
    then the *.prov* file must be located at *https://charts.example.com/superapp-0.1.0.tgz.prov*.
  prefs: []
  type: TYPE_NORMAL
- en: The status code of the response must be a `200 OK`, and the response body should
    be the content of the *.prov* in binary form.
  prefs: []
  type: TYPE_NORMAL
- en: When Are .prov Files Downloaded?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three noteworthy scenarios when Helm downloads chart signature *.prov*
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When pulling a chart from a repo with the `--verify` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When installing a chart from a repo with the `--verify` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When upgrading a release based on a chart from a repo with the `--verify` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
