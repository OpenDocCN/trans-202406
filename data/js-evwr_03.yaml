- en: Chapter 2\. API Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Picture yourself seated in a booth at a small, local restaurant where you’ve
    decided to order a sandwich. The server writes your order on a slip of paper and
    passes that paper to the cook. The cook reads the order, takes individual ingredients
    to build the sandwich, and passes the sandwich to the server. The server then
    brings the sandwich to you to eat. If you would then like some dessert, the process
    repeats.
  prefs: []
  type: TYPE_NORMAL
- en: An application programming interface (API) is a set of specifications that allows
    one computer program to interact with another. A web API works in much the same
    way as ordering a sandwich. A client requests some data, that data travels to
    a web server application over the HyperText Transfer Protocol (HTTP), the web
    server application takes the requests and processes the data, and the data is
    then sent to the client over HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we’ll explore the broad topic of web APIs and get started with
    our development by cloning the starter API project to our local machine. Before
    we do that, however, let’s explore the requirements of the application that we’ll
    be building.
  prefs: []
  type: TYPE_NORMAL
- en: What We’re Building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the book we’ll be building a social note application called Notedly.
    Users will be able to create an account, write notes in plain text or Markdown,
    edit their notes, view a feed of other users’ notes, and “favorite” the notes
    of other users. In this portion of the book, we’ll be developing the API to support
    this application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our API:'
  prefs: []
  type: TYPE_NORMAL
- en: Users will be able to create notes, as well as read, update, and delete the
    notes they’ve created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to view a feed of notes created by other users, and read
    individual notes created by others, though they will not be able to update or
    delete them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to create an account, log in, and log out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to retrieve their profile information as well as the public
    profile information of other users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to favorite the notes of other users as well as retrieve
    a list of their favorites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Markdown is a popular text markup language that is common in the programming
    community as well as in text applications such as iA Writer, Ulysses, Byword,
    and many more. To learn more about Markdown, take a look at the [Markdown Guide
    website](https://www.markdownguide.org).
  prefs: []
  type: TYPE_NORMAL
- en: Though this sounds like a lot, I’ll be breaking it down into small chunks throughout
    this portion of the book. Once you’ve learned to perform these types of interactions,
    you’ll be able to apply them to building all sorts of APIs.
  prefs: []
  type: TYPE_NORMAL
- en: How We’re Going to Build This
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build our API we’ll be using the [GraphQL API query language](https://graphql.org).
    GraphQL is an open source specification, first developed at Facebook in 2012\.
    The advantage of GraphQL is that it allows the client to request precisely the
    data it needs, dramatically simplifying and limiting the number of requests. This
    also provides a distinct performance advantage when we’re sending data to mobile
    clients, as we only need to send the data that the client needs. We’ll be exploring
    how to write, develop, and consume GraphQL APIs throughout much of the book.
  prefs: []
  type: TYPE_NORMAL
- en: What about REST?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re familiar with Web API terminology, you’ve likely heard of REST (Representational
    State Transfer) APIs. The REST architecture has been (and continues to be) the
    dominant format for APIs. These APIs differ from GraphQL by relying upon the URL
    structure and query parameters to make requests to a server. While REST remains
    relevant, the simplicity of GraphQL, the robustness of tooling around GraphQL,
    and the potential performance gains of sending limited data over the wire make
    GraphQL my preference for modern platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start development, we need to make a copy of the project starter
    files to our machine. The project’s [source code](https://oreil.ly/mYKmE) contains
    all of the scripts and references to third-party libraries that we will need to
    develop our application. To clone the code to your local machine, open the terminal,
    navigate to the directory where you keep your projects, **`git clone`** the project
    repository, and install the dependencies with **`npm install`**. It may also be
    helpful to create a *notedly* directory to keep all of the book’s code organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing Third-Party Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By making a copy of the book’s starter code and running `npm install` in the
    directory, you avoid having to run `npm install` again for any of the individual
    third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: /src
  prefs: []
  type: TYPE_NORMAL
- en: This is the directory where you should perform your development as you follow
    along with the book.
  prefs: []
  type: TYPE_NORMAL
- en: /solutions
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the solutions for each chapter. If you get stuck, these
    are available for you to consult.
  prefs: []
  type: TYPE_NORMAL
- en: /final
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the final working project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the code on your local machine, you’ll need to make a copy
    of the project’s *.env* file. This file is a place to keep environment-specific
    information or project secrets, such as the database URL, client IDs, and passwords.
    Because of this you never want to check it into source control. You’ll need your
    own copy of the *.env* file. To do this, type the following into your terminal,
    from the *api* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should now see an *.env* file in the directory. You don’t yet need to do
    anything with this file, but we’ll be adding information to it as we progress
    through the development of our API backend. The *.gitignore* file included with
    the project will ensure that you do not inadvertently commit your *.env* file.
  prefs: []
  type: TYPE_NORMAL
- en: Help, I Don’t See the .env File!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, operating systems hide files that start with a period, as these
    are typically used by the system, not end users. If you don’t see the *.env* file,
    try opening the directory in your text editor. The file should be visible in the
    file explorer of your editor. Alternately, typing `ls -a` into your terminal window
    will list the files in the current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APIs provide an interface for data to flow from a database to applications.
    In doing so, they are the backbone of modern applications. By using GraphQL we
    can quickly develop modern, scalable API-based applications. In the next chapter
    we’ll begin our API development by building a web server, using Node.js and Express.
  prefs: []
  type: TYPE_NORMAL
