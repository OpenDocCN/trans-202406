- en: Chapter 3\. Customizing the User Experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers customizing the user experience for yourself and your users.
    System administrators are often called upon to make minor changes to a user’s
    environment or to the default environment for all users on the system (the latter
    is known as a global change). As long as any requested alterations and enhancements
    don’t compromise system security or violate corporate policy, there’s no harm
    in making changes that accommodate a user’s needs and workflows. Our duty as sysadmins
    is, after all, to the company first (and then to the user). The user is your customer.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the default user environment globally changes the environment for
    everyone on the system. However, you or the user can override some global parameters.
    You made such an override in [Chapter 2](ch02.xhtml#working_with_permissions_and_privileged)
    when you added the new `umask` to your user account. By setting your personal
    `umask` preference after the global one was set, you superseded the one set by
    the system. It’s a common practice for users to customize the environments they
    have control over.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers customizing your and your users’ environments by editing
    key files in each user’s home directory. As a system administrator, you’ll also
    explore the “global” versions of these environment files that can be changed or
    added to, enabling you to create a specific experience for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Altering Home Directory Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In every user’s home directory, a few hidden files control most of the user’s
    environment. Since many Linux users use bash, it is the focus of the default and
    custom user environment discussions in this chapter. (Other shells such as ash,
    zsh, csh, and ksh are also available to you, and their hidden, user-editable files
    are similar in name, function, and structure.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Because some users don’t have adequate skills to make the necessary changes,
    you might have to make them on the users’ behalf. The relevant files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*.bashrc*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*.bash_logout*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on your Linux distribution and previous configuration changes, you
    might also see files named *.profile*, *.bash_profile*, *.bash_login*, and *.bash_history*
    in your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: You won’t have to make changes to all of them. For example, the *.bash_history*
    file doesn’t require any changes. It’s a log of issued commands, and there are
    no user-configurable items. When you log into a Linux system, the *.bashrc* file
    executes first, and then the *.bash_profile* executes. The *.bash_logout* file
    executes upon logout.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Be careful about which (and how many) programs, scripts, and messages you place
    in your startup files because if they’re corrupt, damaged, or half open, you might
    find that your login either is delayed or that you’re completely unable to log
    in and will have to be rescued by another sysadmin. Pass this warning on to your
    users, too.
  prefs: []
  type: TYPE_NORMAL
- en: When you log into a Linux system interactively, a group of files automatically
    execute to build your user environment, as described in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Login Versus Nonlogin Shells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll read and hear about two types of interactive shells: login and nonlogin.
    An interactive login shell is one you SSH to or directly log into by supplying
    a username and password or SSH key. An interactive nonlogin shell is one for which
    you call a child shell from your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `$SHLVL` is a variable that tracks your shell level. When you first log
    into an interactive shell with a username and password or a key, your `$SHLVL`
    is `1`. Child shells that you call after the first one increment the `SHLVL` variable.
    A child shell called in this way is an interactive, nonlogin shell because it
    is interactive but doesn’t involve a new login.
  prefs: []
  type: TYPE_NORMAL
- en: /etc/bashrc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you interactively log into a Linux system, */etc/bashrc* is the first personalization
    file to execute. The */etc/bashrc* file also executes on interactive nonlogin
    shells. The */etc/bashrc* file is a global personalization file that provides
    your login shell (bash) with functions and aliases. This file should be left as
    is—meaning that even as a system administrator, you shouldn’t edit it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The information and warning shown here are reprinted from the */etc/bashrc*
    file. You’ll see them if you attempt to edit the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The */etc/bashrc* file is analogous to the *.bashrc* file in your home directory.
    If you need to change functions and aliases, change them there.
  prefs: []
  type: TYPE_NORMAL
- en: /etc/profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The */etc/profile* file is a system-wide startup file. It provides generic
    variables, paths, and other settings to all users. A warning in this file, shown
    in the following code listing, states that you shouldn’t edit this file unless
    you know what you’re doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Again, as stated in the warning, it’s better to edit the personalization files
    in the user’s home directory or create other global personalization files under
    */etc/profile.d*.
  prefs: []
  type: TYPE_NORMAL
- en: However, these global settings can be overwritten by the individual personalization
    startup files located in the home directory. It is the second environment personalization
    file that executes when you log in to a Linux system. Strangely, it also calls
    the */etc/bashrc* file so */etc/bashrc* is executed twice.
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/profile* file is analogous to the *.bash_profile* file in your home
    directory. Change any environment settings there.
  prefs: []
  type: TYPE_NORMAL
- en: .bashrc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *.bashrc* file is a hidden file in your home directory. It’s hidden because
    you don’t want direct access to it when renaming or deleting files with a wildcard.
    You have full ownership of the file and can edit it at will. This file is for
    setting and including any functions you might need and setting aliases for commands.
    After the global personalization files execute, the *.bashrc* file executes. The
    *.bashrc* file, like its global analog, executes in interactive nonlogin shells.
    The following is a listing of an unchanged *.bashrc* file. You should augment
    or change your `PATH` in this file so that your shell behaves similarly for login
    and nonlogin instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Aliases are useful shortcuts to commands and their options. For example, if
    you want a “chatty” version of common commands, create the following aliases in
    your `.bashrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-i` option means *interactive* and asks you to verify before the command
    performs its action. You get a verification message when you issue the new aliased
    `rm` command. This option is especially handy for destructive commands such as
    `rm` because Linux isn’t “chatty.” For example, it provides no feedback when you
    remove a file. The `-i` option provides you with a more Windows command–like experience
    by prompting you to confirm your actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Aliases are handy if you run the same commands and options frequently. For
    example, I create a few default aliases on every system I use. My most useful
    one is for long lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can also create aliases on a per-session basis. This means that you can
    simply issue the alias command at the command line without saving it to a file,
    and it remains in effect until you log off or terminate the current shell.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many sources recommend placing all customizations in the *.bashrc* file because
    it’s executed for interactive login and nonlogin shells. Making your shell customizations
    in the *.bashrc* file guarantees shell consistency.
  prefs: []
  type: TYPE_NORMAL
- en: .bash_profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last file to execute on an interactive login is the *.bash_profile* file
    in your home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You may place customizations in this file that will run in interactive login
    shells, but they will not be available for interactive, nonlogin shells.
  prefs: []
  type: TYPE_NORMAL
- en: .bash_logout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *.bash_logout* file executes upon logout. This file is optional. It only
    exists to allow users to clean up temporary files on exit. One could also use
    it to log time using the shell or to send a message upon logout.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you learn the origins of these shell personalization files
    and how you can change the defaults for each user.
  prefs: []
  type: TYPE_NORMAL
- en: The /etc/skel Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The */etc/skel* directory is a special directory for holding files you want
    every user to receive in their home directories as you create their user accounts.
    The files you create in */etc/skel* don’t have to be hidden, although the default
    ones are. These files are copied to the user’s home directory during account creation.
    These are the global copies of the environment personalization files. The list
    of */etc/skel* default files on Red Hat Enterprise Linux–based systems is shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you create a file in the */etc/skel* directory, it’s copied to a new user’s
    home directory during account creation. Existing users won’t receive files placed
    in */etc/skel* after you have created their accounts. You’ll have to manually
    copy those to each user’s home directory and change the permissions so that the
    user has full control of them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Linux has a local help system known as manual pages, or *man pages* for short.
    If you need help for a command, configuration, or system setting, enter `man`
    and the keyword to see if the documentation exists for it. For example, for help
    with the `ls` command, you’d use `$ man ls`. You can move through the man pages
    using vi (Vim) navigation commands.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Shell Prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, users accept the default prompt presented by the system. Generically,
    it looks like `[username@hostname pwd]$` or, specifically in my case, `[khess​@server1 ~]⁠$`.
    The tilde (`~`) represents the user’s home directory. For example, in the previous
    sections discussing personalization scripts, they are often represented as `~/.bashrc`
    and `~/.bash_profile` to illustrate that these files are located in the user’s
    home directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set a custom prompt, the shell provides a list of escape characters representing
    locations, username, time, carriage returns, etc. For example, the default prompt
    is given by the following code for the prompt environment variable (`PS1`): `PS1="[\u@\h
    \W]\\$ "`. The system sets this default prompt in the */etc/bashrc* file. You
    may override it with an entry in your *~/.bashrc* file.'
  prefs: []
  type: TYPE_NORMAL
- en: Bash allows these prompt strings to be customized by inserting a number of backslash-escaped
    special characters that are decoded as shown in [Table 3-1](#backslash_escaped_special_characters).
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-1\. Backslash-escaped special characters
  prefs: []
  type: TYPE_NORMAL
- en: '| Special character | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `\a` | An ASCII bell character (07) |'
  prefs: []
  type: TYPE_TB
- en: '| `\d` | The date in “Weekday Month Date” format (e.g., “Tue May 26”) |'
  prefs: []
  type: TYPE_TB
- en: '| `\D{format}` | The format is passed to `strftime(3)` and the result is inserted
    into the prompt string; an empty format results in a locale-specific time representation.
    The braces are required. |'
  prefs: []
  type: TYPE_TB
- en: '| `\e` | An ASCII escape character (033) |'
  prefs: []
  type: TYPE_TB
- en: '| `\h` | The hostname up to the first `''.''` |'
  prefs: []
  type: TYPE_TB
- en: '| `\H` | The hostname |'
  prefs: []
  type: TYPE_TB
- en: '| `\j` | The number of jobs currently managed by the shell |'
  prefs: []
  type: TYPE_TB
- en: '| `\l` | The basename of the shell’s terminal device name |'
  prefs: []
  type: TYPE_TB
- en: '| `\n` | Newline |'
  prefs: []
  type: TYPE_TB
- en: '| `\r` | Carriage return |'
  prefs: []
  type: TYPE_TB
- en: '| `\s` | The name of the shell, the basename of `$0` (the portion following
    the final slash) |'
  prefs: []
  type: TYPE_TB
- en: '| `\t` | The current time in 24-hour HH:MM:SS format |'
  prefs: []
  type: TYPE_TB
- en: '| `\T` | The current time in 12-hour HH:MM:SS format |'
  prefs: []
  type: TYPE_TB
- en: '| `\@` | The current time in 12-hour am/pm format |'
  prefs: []
  type: TYPE_TB
- en: '| `\A` | The current time in 24-hour HH:MM format |'
  prefs: []
  type: TYPE_TB
- en: '| `\u` | The username of the current user |'
  prefs: []
  type: TYPE_TB
- en: '| `\v` | The version of bash (e.g., 2.00) |'
  prefs: []
  type: TYPE_TB
- en: '| `\V` | The release of bash, version + patch level (e.g., 2.00.0) |'
  prefs: []
  type: TYPE_TB
- en: '| `\w` | The current working directory, with `$HOME` abbreviated with a tilde
    (uses the value of the `PROMPT_DIRTRIM` variable) |'
  prefs: []
  type: TYPE_TB
- en: '| `\W` | The basename of the current working directory, with `$HOME` abbreviated
    with a tilde |'
  prefs: []
  type: TYPE_TB
- en: '| `\!` | The history number of this command |'
  prefs: []
  type: TYPE_TB
- en: '| `\#` | The command number of this command |'
  prefs: []
  type: TYPE_TB
- en: '| `\$` | If the effective UID is `0`, a `#`, otherwise a `$` |'
  prefs: []
  type: TYPE_TB
- en: '| `\nnn` | The character corresponding to the octal number `nnn` |'
  prefs: []
  type: TYPE_TB
- en: '| `\\` | A backslash |'
  prefs: []
  type: TYPE_TB
- en: '| `\[` | Begin a sequence of nonprinting characters which could be used to
    embed a terminal control sequence into the prompt |'
  prefs: []
  type: TYPE_TB
- en: '| `\]` | End a sequence of nonprinting characters |'
  prefs: []
  type: TYPE_TB
- en: 'The default prompt is sufficient for most users, but some users and sysadmins
    prefer something a little different, so they’re free to change it. Some clever
    users have devised codes for colorful and artistic prompts, such as this Christmas-themed
    prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Search online for “fun Linux prompts” and enjoy yourself. After playing with
    that, you can log out and back in to reset your prompt or enter `PS1="[\u@\h \W]\\$
    "` to return to the default.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to edit user environments through personalization
    files and the default location and configuration for adding more files to new
    accounts. You also learned these files’ locations, the order they’re loaded, and
    which ones you should edit for a particular effect. Finally, you had a brief overview
    of the shell prompt and how to alter it.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.xhtml#managing_users), you’ll get an overview of user management
    from user account creation to managing users through groups to how to grant access
    to resources.
  prefs: []
  type: TYPE_NORMAL
