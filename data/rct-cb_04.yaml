- en: Chapter 4\. Interaction Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we look at some recipes that address a bunch of typical interface
    problems. How do you deal with errors? How do you help people use your system?
    How do you create complex input sequences without writing a bunch of spaghetti
    code?
  prefs: []
  type: TYPE_NORMAL
- en: This is a collection of tips that we’ve found useful, time and again. At the
    end of the chapter, we look at various ways of adding animation to your application.
    We take a low-tech approach where possible, and ideally, the recipes we include
    will add meaning to your interface designs with a minimum of fuss.
  prefs: []
  type: TYPE_NORMAL
- en: Build a Centralized Error Handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s hard to define precisely what makes good software good. But one thing
    that most excellent software has in common is how it responds to errors and exceptions.
    There will always be exceptional, unexpected situations when people are running
    your code: the network can disappear, the server can crash, the storage can become
    corrupted. It’s important to consider how you should deal with these situations
    when they occur.'
  prefs: []
  type: TYPE_NORMAL
- en: One approach that is almost certain to fail is to ignore the fact that error
    conditions occur and to hide the gory details of what went wrong. Somewhere, somehow,
    you need to leave a trail of evidence that you can use to prevent that error from
    happening again.
  prefs: []
  type: TYPE_NORMAL
- en: When we’re writing server code, we might log the error details and return an
    appropriate message to a request. But if we’re writing client code, we need a
    plan for how we’ll deal with local errors. We might choose to display the crash’s
    details to the user and ask them to file an error report. We might use a third-party
    service like [Sentry.io](https://sentry.io) to log the details remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever our code does, it should be consistent. But how can we handle exceptions
    consistently in a React application?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we’re going to look at one way of creating a centralized error
    handler. To be clear: this code won’t automatically capture all exceptions. It
    still needs to be added explicitly to JavaScript `catch` blocks. It’s also not
    a replacement for dealing with any error from which we can otherwise recover.
    If an order fails because the server is down for maintenance, it is much better
    to ask the user to try again later.'
  prefs: []
  type: TYPE_NORMAL
- en: But this technique helps catch any errors for which we have not previously planned.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a general principle, when something goes wrong, there are three things that
    you should tell the user:'
  prefs: []
  type: TYPE_NORMAL
- en: What happened
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why it happened
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What they should do about it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the example we show here, we’re going to handle errors by displaying a dialog
    box that shows the details of a JavaScript `Error` object and asks the user to
    email the contents to systems support. We want a simple error-handler function
    that we can call when an error happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we want to make the function readily available across the entire application,
    the usual way is by using a *context*. A context is a kind of scope that we can
    wrap around a set of React components. Anything we put into that context is available
    to all the child components. We will use our context to store the error-handler
    function that we can run when an error occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll call our context `ErrorHandlerContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To allow us to make the context available to a set of components, let’s create
    an `ErrorHandlerProvider` component that will create an instance of the context
    and make it available to any child components we pass to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need some code that says what to do when we call the error-handler function.
    In our case, we need some code that will respond to an error report by displaying
    a dialog box containing all of the error details. If you want to handle errors
    differently, this is the code you need to modify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `ErrorContainer` displays the details using an `ErrorDialog`. We won’t go
    into the details of the code for `ErrorDialog` here as this is the code that you
    are most likely to replace with your implementation.^([1](ch04.xhtml#idm46634420299832))
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wrap the bulk of our application in an `ErrorContainer`. Any components
    inside the `ErrorContainer` will be able to call the error handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'How does a component use the error handler? We’ll create a custom hook called
    `useErrorHandler()`, which will get the error-handler function out of the context
    and return it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s quite a complex set of code, but now we come to use the error handler;
    it’s very simple. This example code makes a network request when a user clicks
    a button. If the network request fails, then the details of the error are passed
    to the error handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see what the app looks like in [Figure 4-1](#ch04_image_1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1\. The time-recording app
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When you click the button, the network request fails because the server code
    doesn’t exist. [Figure 4-2](#ch04_image_2) shows the error dialog that appears.
    Notice that it shows what went wrong, why it went wrong, and what the user should
    do about it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2\. When the network request throws an exception, we pass it to the
    error handler
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of all the recipes that we’ve created over the years, this one has saved the
    most time. During development, code often breaks, and if the only evidence of
    a failure is a stack trace hidden away inside the JavaScript console, you are
    likely to miss it.
  prefs: []
  type: TYPE_NORMAL
- en: Significantly, when some piece of infrastructure (networks, gateways, servers,
    databases) fails, this small amount of code can save you untold hours tracking
    down the cause.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/wUM7Q).
  prefs: []
  type: TYPE_NORMAL
- en: Create an Interactive Help Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tim Berners-Lee deliberately designed the web to have very few features. It
    has a simple protocol (HTTP), and it originally had a straightforward markup language
    (HTML). The lack of complexity meant that new users of websites immediately knew
    how to use them. If you saw something that looked like a hyperlink, you could
    click on it and go to another page.
  prefs: []
  type: TYPE_NORMAL
- en: But rich JavaScript applications have changed all that. No longer are web applications
    a collection of hyperlinked web pages. Instead, they resemble old desktop applications;
    they are more powerful and feature-rich, but the downside is that they are now
    far more complex to use.
  prefs: []
  type: TYPE_NORMAL
- en: How do you build an interactive guide into your application?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re going to build a simple help system that you can overlay onto an existing
    application. When the user opens the help, they will see a series of pop-up notes
    that describe how to use the various features they can see on the page, as shown
    in [Figure 4-3](#ch04_image_3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3\. Show a sequence of help messages when the user asks
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We want something that will be easy to maintain and will provide help only
    for visible components. That sounds like quite a big task, so let’s begin by first
    constructing a component that will display a pop-up help message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We’re using the `Popper` component from the `@material-ui` library. The `Popper`
    component can be anchored on the page, next to some other component. Our `HelpBub⁠ble`
    takes a `forElement` string, which will represent a CSS selector such as `.class-name`
    or `#some-id`. We will use selectors to associate things on the screen with pop-up
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a pop-up message component, we’ll need something that coordinates
    a sequence of `HelpBubbles`. We’ll call this the `HelpSequence`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `HelpSequence` takes an array of JavaScript objects like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: and converts it into a dynamic sequence of `HelpBubbles`. It will show a `HelpBubble`
    only if it can find an element that matches the `forElement` selector. It then
    places the `HelpBubble` next to the element and shows the help text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a `HelpSequence` to the default *App.js* code generated by `create-react-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To begin with, we cannot see anything different other than a help button (see
    [Figure 4-4](#ch04_image_4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0404.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-4\. The application, when it first loads
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When the user clicks the help button, the first help topic appears, as shown
    in [Figure 4-5](#ch04_image_5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-5\. When the user clicks the help button, the help bubble appears for
    the first match
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 4-6](#ch04_image_6) shows the help moving to the next element when
    the user clicks Next. The user can continue to move from item to item until there
    are no more matching elements visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0406.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-6\. The final element has a *Finish* button
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding interactive help to your application makes your user interface *discoverable*.
    Developers spend a lot of their time adding functionality to applications that
    people might never use, simply because they don’t know that it’s there.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation in this recipe displays the help as simple plain text. You
    might consider using Markdown, as that will allow for a richer experience, and
    help topics can then include links to other more expansive help pages.^([2](ch04.xhtml#idm46634418710008))
  prefs: []
  type: TYPE_NORMAL
- en: The help topics are automatically limited to just those elements that are visible
    on the page. You could choose to create either a separate help sequence for each
    page or a single large help sequence that will automatically adapt to the user’s
    current view of the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a help system like this is ideally suited for storage in a headless
    CMS, which will allow you to update help dynamically, without the need to create
    a new deployment each time.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/CsiMN).
  prefs: []
  type: TYPE_NORMAL
- en: Use Reducers for Complex Interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applications frequently need users to follow a sequence of actions. They might
    be completing the steps in a wizard, or they might need to log in and confirm
    some dangerous operation (see [Figure 4-7](#ch04_image_7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0407.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-7\. This deletion process requires logging in and then confirming the
    deletion
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Not only will the user need to perform a sequence of steps, but the steps might
    be conditional. If the user has logged in recently, they perhaps don’t need to
    log in again. They might want to cancel partway through the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: If you model the complex sequences inside your components, you can soon find
    your application is full of spaghetti code.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use a reducer to manage a complex sequence of operations. We
    introduced reducers for managing state in [Chapter 3](ch03.xhtml#chapter03). A
    *reducer* is a function that accepts a state object and an action. The reducer
    uses the action to decide how to change the state, and it must have no side effects.
  prefs: []
  type: TYPE_NORMAL
- en: Because reducers have no user-interface code, they are perfect for managing
    gnarly pieces of interrelated state without worrying about the visual appearance.
    They are particularly amenable to unit testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say we implement the deletion sequence mentioned at the
    start of this recipe. We can begin in classic test-driven style by writing a unit
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here our reducer function is going to be called `deletionReducer`. We pass
    it an empty object (`{}`) and an action that says we want to start the deletion
    process (`{type: ''START_DELETION''}`). We then say that we expect the new version
    of the state to have a `showLogin` value of `true`, a `showConfirmation` value
    of `false`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then implement the code for a reducer to do just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: At first, we are merely setting the state attributes to values that pass the
    test. As we add more and more tests, our reducer improves as it handles more situations.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, we get something that looks like this:^([3](ch04.xhtml#idm46634418414536))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Although this code is complicated, you can write it quickly if you create the
    tests first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the reducer, we can use it in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Most of this code is purely creating the user interface for each of the dialogs
    in the sequence. There is virtually no logic in this component. It just does what
    the reducer tells it. It will take the user through the *happy path* of logging
    in and confirming the deletion (see [Figure 4-8](#ch04_image_8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0407.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-8\. The final result
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But [Figure 4-9](#ch04_image_9) shows it also handles all of the edge cases,
    such as invalid passwords and cancellation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0409.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-9\. The edge cases are all handled by the reducer
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are times when reducers can make your code convoluted; if you have few
    pieces of state with few interactions between them, you probably don’t need a
    reducer. But if you find yourself drawing a flowchart or a state diagram to describe
    a sequence of user interactions, that’s a sign that you might need a reducer.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/hfqLn).
  prefs: []
  type: TYPE_NORMAL
- en: Add Keyboard Interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Power users like to use keyboards for frequently used operations. React components
    can respond to keyboard events, but only when they (or their children) have focus.
    What do you do if you want your component to respond to events at the document
    level?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re going to create a key-listener hook to listen for `keydown` events at
    the `document` level. Still, it could be easily modified to listen for any other
    JavaScript event in the DOM. This is the hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The hook accepts a callback function and registers it for `keydown` events on
    the `document` object. At the end of the `useEffect`, it returns a function that
    will unregister the callback. If the callback function we pass in changes, we
    will first unregister the old function before registering the new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we use the hook? Here is an example. See if you notice the little coding
    wrinkle we have to deal with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This code listens for the user pressing the left/right cursor keys. Our `onKeyDown`
    function says what should happen when those key clicks occur, but notice that
    we’ve wrapped it in a `useCallback`. If we *didn’t* do that, the browser would
    re-create the `onKeyDown` function each time it rendered the `App` component.
    The new function would do the same as the old `onKeyDown` function, but it would
    live in a different place in memory, and the `useKeyListener` would keep unregistering
    and re-registering it.
  prefs: []
  type: TYPE_NORMAL
- en: If you forget to wrap your callback function in a `useCallback`, it may result
    in a blizzard of render calls, which might slow your application down.
  prefs: []
  type: TYPE_NORMAL
- en: By using `useCallback`, we can ensure that we only create the function if `setAngle`
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: If you run the application, you will see an arrow on the screen. If you press
    the left/right cursor keys ([Figure 4-10](#ch04_image_10)), you can rotate the
    image. If you press the Escape key, you can reset it to vertical.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0410.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-10\. Pressing the left/right/Escape keys causes the arrow to rotate
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are careful in the `useKeyListener` function to only listen to events that
    originated at the `body` level. If the user clicks the arrow keys in a text field,
    the browser won’t send those events to your code.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/VIY1O).
  prefs: []
  type: TYPE_NORMAL
- en: Use Markdown for Rich Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your application allows users to provide large blocks of text content, it
    would be helpful if that content could also include formatted text, links, and
    so forth. However, allowing users to pass in such horrors as raw HTML can lead
    to security flaws and untold misery for developers.
  prefs: []
  type: TYPE_NORMAL
- en: How do you allow users to post rich content without undermining the security
    of your application?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Markdown is an excellent way of allowing users to post rich content into your
    application safely. To see how to use Markdown in your application, let’s consider
    this simple application, which allows a user to post a timestamped series of messages
    into a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When you run the application ([Figure 4-11](#ch04_image_11)), you see a large
    text area. When you post a plain-text message, the app preserves white space and
    line breaks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0411.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-11\. A user enters text into a text area, and it gets posted as a plain-text
    message
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your application contains a text area, it’s worth considering allowing the
    user to enter Markdown content.
  prefs: []
  type: TYPE_NORMAL
- en: There are many, many Markdown libraries available, but most of them are wrappers
    for `react-markdown` or a syntax highlighter like [PrismJS](https://prismjs.com)
    or [CodeMirror](https://codemirror.net).
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll look at a library called `react-md-editor` that adds extra features to
    `react-markdown` and allows you to display Markdown and edit it. We will begin
    by installing the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll now convert our plain-text area to a Markdown editor and convert the
    posted messages from Markdown to HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Converting plain text to Markdown is a small change with a significant return.
    As you can see in [Figure 4-12](#ch04_image_12), the user can apply rich formatting
    to a message and choose to edit it full-screen before posting it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0412.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-12\. The Markdown editor shows a preview as you type and also allows
    you to work full-screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding Markdown to an application is quick and improves the user’s experience
    with minimal effort. For more details on Markdown, see [John Gruber’s original
    guide](https://oreil.ly/2EE9x).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/S0n7x).
  prefs: []
  type: TYPE_NORMAL
- en: Animate with CSS Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add a small amount of simple animation to your application, but
    you don’t want to increase your application size by installing a third-party library.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the animation you are ever likely to need in a React application will
    probably not require a third-party animation library. That’s because CSS animation
    now gives browsers the native ability to animate CSS properties with minimal effort.
    It takes very little code, and the animation is smooth because the graphics hardware
    will generate it. GPU animation uses less power, making it more appropriate for
    mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking to add animation to your React application, begin with CSS
    animation before looking elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: How does CSS animation work? It uses a CSS property called `transition`. Let’s
    say we want to create an expandable information panel. When the user clicks the
    button, the panel opens smoothly. When they click it again, it closes smoothly,
    as shown in [Figure 4-13](#ch04_image_13).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0413.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-13\. Simple CSS animation will smoothly expand and contract the panel
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can create this effect using the CSS `transition` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This CSS specifies a `height`, as well as a `transition` property. This combination
    translates to “Whatever your current height, animate to my preferred height during
    the next half-second.”
  prefs: []
  type: TYPE_NORMAL
- en: 'The animation will occur whenever the `height` of the element changes, such
    as when an additional CSS rule becomes valid. For example, if we have an extra
    CSS class-name with a different height, the transition property will animate the
    height change when an element switches to a different class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This class name structure is an example of block element modifier (BEM) naming.
    The *block* is the component (`InfoPanel`), the *element* is a thing inside the
    block (`details`), and the *modifier* says something about the element’s current
    state (`closed`). The BEM convention reduces the chances of name clashes in your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: If an `InfoPanel-details` element suddenly acquires an additional `.InfoPanel-details-closed`
    class, the `height` will change from `350px` to `0`, and the `transition` property
    will smoothly shrink the element. Conversely, if the component *loses* the `.InfoPanel-details-closed`
    class, the element will expand again.
  prefs: []
  type: TYPE_NORMAL
- en: 'That means that we can defer the hard work to CSS, and all we need to do in
    our React code is add or remove the class to an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have frequently seen many projects bundle in third-party component libraries
    to use some small widget that expands or contracts its contents. As you can see,
    such animation is trivial to include.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/FKnIc).
  prefs: []
  type: TYPE_NORMAL
- en: Animate with React Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS animations are very low-tech and will be appropriate for most animations
    that you are likely to need.
  prefs: []
  type: TYPE_NORMAL
- en: However, they require you to understand a lot about the various CSS properties
    and the effects of animating them. If you want to illustrate an item being deleted
    by it rapidly expanding and becoming transparent, how do you do that?
  prefs: []
  type: TYPE_NORMAL
- en: Libraries such as [Animate.css](https://animate.style) contain a whole host
    of pre-canned CSS animations, but they often require more advanced CSS animation
    concepts like keyframes and are not particularly tuned for React. How can we add
    CSS library animations to a React application?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The React Animations library is a React wrapper for the Animate.css library.
    It will efficiently add animated styling to your components without generating
    unnecessary renders or significantly increasing the size of the generated DOM.
  prefs: []
  type: TYPE_NORMAL
- en: It’s able to work so efficiently because React Animations works with a CSS-in-JS
    library. CSS-in-JS is a technique for coding your style information directly in
    your JavaScript code. React will let you add your style attributes as React components,
    but CSS-in-JS does this more efficiently, dynamically creating shared style elements
    in the `head` of the page.
  prefs: []
  type: TYPE_NORMAL
- en: There are several CSS-in-JS libraries to choose from, but in this recipe, we’re
    going to use one called [Radium](https://oreil.ly/oNBEl).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by installing Radium and React Animations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Our example application ([Figure 4-14](#ch04_image_14)) will run an animation
    each time we add an image item to the collection.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0414.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-14\. Clicking the Add button will load a new image from picsum.photos
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Likewise, when a user clicks an image, it shows a fade-out animation before
    removing the images from the list, as shown in [Figure 4-15](#ch04_image_15).^([4](ch04.xhtml#idm46634416427016))
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0415.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-15\. If we click the fifth image, it will fade out from the list and
    disappear
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We’ll begin by importing some animations and helper code from Radium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: From React Animations we get `pulse`, `zoomOut`, and `shake` animations. We
    are going to use the `pulse` animation when we add an image. We’ll use a *combined*
    animation of `zoomOut` and `shake` when we remove an image. We can combine animations
    using React Animations’ `merge` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `styles` generate all of the CSS styles needed to run each of these half-second
    animations. The call to `Radium.keyframes()` handles all of the animation details
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: We must know when an animation has completely ended. If we delete an image before
    the deletion-animation completes, there would be no image to animate.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can keep track of CSS animations by passing an `onAnimationEnd` callback
    to any element we are going to animate. For each item in our image collection,
    we are going to track three things:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL of the image it represents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Boolean value that will be true while the “created” animation is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Boolean value that will be true while the “deleted” animation is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the example code to animate images into and out of the collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When choosing which animation to use, we should first ask: what will this animation
    mean?'
  prefs: []
  type: TYPE_NORMAL
- en: All animation should have meaning. It can show something existential (creation
    or deletion). It might indicate a change of state (becoming enabled or disabled).
    It might zoom in to show detail or zoom out to reveal a broader context. Or it
    might illustrate a limit or boundary (a spring-back animation at the end of a
    long list) or allow a user to express a preference (swiping left or right).
  prefs: []
  type: TYPE_NORMAL
- en: Animation should also be short. Most animations should probably be over in half
    a second so that the user can experience the meaning of the animation without
    being consciously aware of its appearance.
  prefs: []
  type: TYPE_NORMAL
- en: An animation should never be merely *attractive*.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/rRK8F).
  prefs: []
  type: TYPE_NORMAL
- en: Animate Infographics with TweenOne
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS animations are smooth and highly efficient. Browsers might defer CSS animations
    to the graphics hardware at the compositing stage, which means that not only are
    the animations running at machine-code speeds, but the machine-code itself is
    not running on the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: However, the downside to running CSS animations on graphics hardware is that
    your application code won’t know what’s happening *during* an animation. You can
    track when an animation has started, ended, or is repeated (`onAnimationStart`,
    `onAni⁠ma⁠tionEnd`, `onAnimationIteration`), but everything that happens in between
    is a mystery.
  prefs: []
  type: TYPE_NORMAL
- en: If you are animating an infographic, you may want to animate the numbers on
    a bar chart as the bars grow or shrink. Or, if you are writing an application
    to track cyclists, you might want to show the current altitude as the bicycle
    animates its way up and down the terrain.
  prefs: []
  type: TYPE_NORMAL
- en: But how do you create animations that you can *listen* to while they are happening?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The TweenOne library creates animations with JavaScript, which means you can
    track them as they happen, frame by frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by installing the TweenOne library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: TweenOne works with CSS, but it doesn’t use CSS animations. Instead, it generates
    CSS transforms, which it updates many times each second.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to wrap the thing you want to animate in a `<TweenOne/>` element.
    For example, let’s say we want to animate a `rect` inside an SVG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`TweenOne` takes an element name and an object that will describe the animation
    to perform. We’ll come to what that animation object looks like shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: TweenOne will use the element name (`g` in this case) to generate a wrapper
    around the animated thing. This wrapper will have a style attribute that will
    include a set of CSS transforms to move and rotate the contents somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'So in our example, at some point in the animation, the DOM might look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Although you can create similar effects to CSS animations, the TweenOne library
    works differently. Instead of handing the animation to the hardware, the TweenOne
    library uses JavaScript to create each frame, which has two consequences. First,
    it uses more CPU power (bad), and second, we can track the animation while it’s
    happening (good).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we pass `TweenOne` an `onUpdate` callback, we will be sent information about
    the animation on every single frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `info` object passed to `onUpdate` has a `ratio` value between 0 and 1,
    representing the proportion of the way the TweenOne element is through an animation.
    We can use the `ratio` to animate text that is associated with the graphics.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we build an animated dashboard that shows vehicles on a race
    track, we can use `onUpdate` to show each car’s speed and distance as it animates.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create the visuals for this example in SVG. First, let’s create a string
    containing an SVG path, which represents the track:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a greatly truncated version of the actual path that we’ll use. We can
    import the path string from *track.js* like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the track inside a React component, we can render an `svg` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can add a couple of rectangles for the vehicle—a red one for the body and
    a white one for the windshield:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 4-16](#ch04_image_16) shows the track with the vehicle at the top-left
    corner.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0416.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-16\. The static image with a tiny vehicle at the top left
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But how do we animate the vehicle around the track? TweenOne makes this easy
    because it contains a plugin to generate animations that follow SVG path strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve configured TweenOne for use with SVG path animations. That means we can
    look at how to describe an animation for TweenOne. We do it with a simple JavaScript
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We tell TweenOne two things with this object: first, we’re telling it to generate
    translates and rotations that follow the `path` string that we’ve imported from
    *track.js*. Second, we’re saying that we want the animation to loop infinitely
    by setting the `repeat` count to –1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use this as the basis of animation for our vehicle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we’re using the spread operator to provide an additional animation
    parameter: `duration`. A value of 16000 means we want the animation to take 16
    seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add a second vehicle and use the `onUpdate` callback method to create
    a very rudimentary set of faked telemetry statistics for each one as they move
    around the track. Here is the completed code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 4-17](#ch04_image_17) shows the animation. The vehicles follow the
    path of the race track, rotating to face the direction of travel.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/recb_0417.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-17\. Our final animation with telemetry generated from the current
    animation state
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS animations are what you should use for most UI animation. However, in the
    case of infographics, you often need to synchronize the text and the graphics.
    TweenOne makes that possible, at the cost of greater CPU usage.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source for this recipe from the [GitHub site](https://oreil.ly/8l7Vp).
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch04.xhtml#idm46634420299832-marker)) You can download all source code
    for this recipe on the [GitHub repository](https://oreil.ly/wUM7Q).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch04.xhtml#idm46634418710008-marker)) See [“Use Markdown for Rich Content”](#ch04-05)
    for details on how to use Markdown in your application.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch04.xhtml#idm46634418414536-marker)) See the [GitHub repository](https://oreil.ly/DCGIv)
    for the tests we used to drive out this code.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch04.xhtml#idm46634416427016-marker)) Paper books are beautiful things,
    but to fully experience the animation effect, see the complete code on [GitHub](https://oreil.ly/OcAqo).
  prefs: []
  type: TYPE_NORMAL
