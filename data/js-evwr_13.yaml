- en: Chapter 12\. Building a Web Client with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The original idea behind hypertext was to take related documents and link them
    together: if academic paper A references academic paper B let’s make it easy to
    click something and navigate between them. In 1989, a software engineer at CERN
    named Tim Berners-Lee had the idea to combine hypertext with networked computers,
    making it easy for someone to make these connections regardless of the location
    of the documents. Every cat photo, news article, tweet, streaming video, job search
    site, and restaurant review is indebted to the simple idea of globally linking
    documents.'
  prefs: []
  type: TYPE_NORMAL
- en: At its heart, the web remains a medium for linking documents together. Each
    page is HTML, rendered in a web browser, with CSS for styling and JavaScript for
    enhancements. Today, we use these technologies to build everything from personal
    blogs and small brochure sites to complex interactive applications. The underlying
    advantage is that the web provides universal access. All anyone needs is a web
    browser on a web-connected device, creating an inclusive-by-default environment.
  prefs: []
  type: TYPE_NORMAL
- en: What We’re Building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the upcoming chapters we’ll build the web client for our social note application,
    Notedly. Users will be able to create and sign in to an account, write notes in
    Markdown, edit their notes, view a feed of other users’ notes, and “favorite”
    other users’ notes. To accomplish all of this, we’ll be interacting with our GraphQL
    server API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our web application:'
  prefs: []
  type: TYPE_NORMAL
- en: Users will be able to create notes, as well as read, update, and delete the
    notes they’ve created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to view a feed of notes created by other users, and read
    individual notes created by others, though they will not be able to update or
    delete them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to create an account, log in, and log out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to retrieve their profile information as well as the public
    profile information of other users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be able to favorite the notes of other users as well as retrieve
    a list of their favorites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features will cover a lot of ground, but we’ll be breaking them into small
    chunks throughout this portion of the book. Once you’ve learned to build a React
    application with all of these features, you’ll be able to apply the tools and
    techniques toward building all sorts of rich web applications.
  prefs: []
  type: TYPE_NORMAL
- en: How We’re Going to Build This
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you’ve probably guessed, to build this application we’ll be using React as
    a client-side JavaScript library. Additionally, we’ll be querying data from our
    GraphQL API. To aid in the querying, mutating, and caching of data, we’ll make
    use of [Apollo Client](https://oreil.ly/hAG_X). Apollo Client comprises a collection
    of open source tools for working with GraphQL. We’ll be using the React version
    of the library, but the team at Apollo has also developed Angular, Vue, Scala.js,
    Native iOS, and Native Android integrations.
  prefs: []
  type: TYPE_NORMAL
- en: Other GraphQL Client Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we’ll be using Apollo in this book, it is far from the only GraphQL client
    option available. Facebook’s [Relay](https://relay.dev) and Formiddable’s [urql](https://oreil.ly/q_deu)
    are two popular alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we’ll be using [Parcel](https://parceljs.org) as our code bundler.
    A code bundler allows us to write JavaScript using features that may not be available
    in a web browser (e.g., newer language features, code modules, minificiation)
    and packages them for use in the browser environment. Parcel is a configuration-free
    alternative to application build tools like [Webpack](https://webpack.js.org).
    It offers a lot of nice features such as code splitting and automatically updating
    the browser during development (aka *hot module replacement*), but without the
    need to set up a build chain. As you saw in the previous chapter, [`create-react-app`](https://oreil.ly/dMQyk)
    also offers a zero-configuration initial setup, using Webpack behind the scenes,
    but Parcel allows us to build our application from the ground up, in a way that
    I find ideal for learning.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start development, we need to make a copy of the project starter
    files to our machine. The [project’s source code](https://github.com/javascripteverywhere/web)
    contains all of the scripts and references to third-party libraries that we will
    need to develop our application. To clone the code to your local machine, open
    the terminal, navigate to the directory where you keep your projects, and `git
    clone` the project repository. If you’ve worked through the API chapters, you
    may also have already create a *notedly* directory to keep the project code organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing Third-Party Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By making a copy of the book’s starter code and running `npm install` in the
    directory, you avoid having to again run `npm install` for any of the individual
    third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*/src*'
  prefs: []
  type: TYPE_NORMAL
- en: This is the directory where you should perform your development as you follow
    along with the book.
  prefs: []
  type: TYPE_NORMAL
- en: '*/solutions*'
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the solutions for each chapter. If you get stuck, these
    are available for you to consult.
  prefs: []
  type: TYPE_NORMAL
- en: '*/final*'
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the final working project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the code on your local machine, you’ll need to make a copy
    of the project’s *.env* file. This file is a place to keep the variables unique
    to the environment we are working in. For example, when working locally we’ll
    be pointing to a local instance of our API, but when we deploy our app we’ll point
    to our remotely deployed API. To make a copy of the sample *.env* file, type the
    following into your terminal, from the *web* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should now see an *.env* file in the directory. You don’t yet need to do
    anything with this file, but we’ll be adding information to it as we progress
    through the development of our API backend. The *.gitignore* file included with
    the project will ensure that you do not inadvertently commit your *.env* file.
  prefs: []
  type: TYPE_NORMAL
- en: Help, I Don’t See the .env File!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, operating systems hide files that start with a period, as these
    are typically used by the system, not end users. If you don’t see the *.env* file,
    try opening the directory in your text editor. The file should be visible in the
    file explorer of your editor. Alternately, typing `ls -a` into your terminal window
    will list the files in the current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Building Out the Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our starter code cloned locally, we’re ready to build out our React web
    application. Let’s first take a look at our *src/index.html* file. This looks
    like a standard, yet completely empty, HTML file, but note the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These two lines are incredibly important to our React application. The `root
    <div>` will provide the container for our entire application. Meanwhile, the *App.js*
    file will be the entry point to our JavaScript application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can begin to develop our React application in our *src/App.js* file.
    If you followed along with the React introduction in the previous chapter, this
    may all feel familiar. In *src/App.js* we begin by importing the `react` and `react-dom`
    libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create a function, named `App`, that will return the contents of
    our application. For now, this will simply be two lines of HTML contained within
    a `<div>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What’s With All of the divs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re just starting out with React, you may wonder about the tendency to
    surround components with `<div>` tags. React components must be contained with
    a parent element, which often is a `<div>` tag, but could also be any other appropriate
    HTML tag such as `<section>`, `<header>`, or `<nav>`. If a containing HTML tag
    feels extraneous, we can instead use `<React.Fragment>` or empty `<>` tags to
    contain the components in our JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will instruct React to render our application within the element
    with an ID of `root` by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The full content of our *src/App.js* file should now be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With this complete, let’s take a look in our web browser. Start your local development
    server by typing **`npm run dev`** in your terminal application. Once the code
    is bundled, visit *http://localhost:1234* to view the page ([Figure 12-1](#hello_notedly)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of our React application running in the browser](assets/jsev_1201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. Our initial React application running in the browser
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the defining features of the web is being able to link documents together.
    Similarly, for our application we’ll want users to be able to navigate between
    screens or pages. In an HTML rendered application, this would involve creating
    multiple HTML documents. Whenever a user navigates to a new document, the entire
    document will reload, even if there are shared aspects, such as a header or footer,
    on the two pages.
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript applications we can make use of client-side routing. In many ways,
    this will be similar to HTML linking. A user will click a link, the URL will update,
    and they will navigate to a new screen. The difference is that our application
    will only update the page with the content that has changed. The experience will
    be smooth and “app-like,” meaning that there will not be a visible refresh of
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In React, the most commonly used routing library is [React Router](https://oreil.ly/MhQQR).
    This library enables us to add routing capabilities to React web applications.
    To introduce routing to our application, let’s first create a *src/pages* directory
    and add the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '*/src/pages/index.js*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/src/pages/home.js*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/src/pages/mynotes.js*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/src/pages/favorites.js*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our *home.js*, *mynotes.js*, and *favorites.js* files will be our individual
    page components. We can create each of them with some initial content and an `effect`
    hook, which will update the document title when a user navigates to the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/pages/home.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/pages/mynotes.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/pages/favorites.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: useEffect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding examples we’re using React’s `useEffect` hook to set the title
    of the page. Effect hooks allow us to include side effects in our components,
    updating something that is not related to the component itself. If you are interested,
    React’s documentation provides a deep dive into [effect hooks](https://oreil.ly/VkpTZ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in *src/pages/index.js* we’ll import React Router and the methods necessary
    for web browser routing with the `react-router-dom` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll import the page components that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we’ll designate each of the page components that we created as routes
    with a specific URL. Note the use of `exact` for our “Home” route, which will
    ensure the home component is rendered only for the root URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Our complete *src/pages/index.js* file should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can update the *src/App.js* file to use our routes by importing
    the routes and rendering the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now if you manually update the URL in your web browser, you should be able to
    view each component. For example, type **`http://localhost:1234/favorites`** to
    render the “favorites” page.
  prefs: []
  type: TYPE_NORMAL
- en: Linking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve created our pages, but we’re missing the key component of linking them
    together. So let’s add some links to the other pages from our home page. To do
    so, we’ll use React Router’s `Link` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/pages/home.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With this we’re able to navigate our application. Clicking one of the links
    on the home page will navigate to the corresponding page component. Core browser
    navigation functions, such as the back and forward buttons, will continue to work
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: UI Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve successfully created individual page components and can navigate between
    them. As we build out our pages, they will have several shared user interface
    elements, such as a header and sitewide navigation. Rewriting these each time
    they are used wouldn’t be very efficient (and would get quite annoying). Instead,
    we can write reusable interface components and import them into our interface
    wherever we need them. In fact, thinking of our UI as composed of tiny components
    is one of the core tenants of React, and was my breakthrough in grasping the framework.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by creating header and navigation components for our application.
    First, let’s create a new directory within our *src* directory called *components*.
    Within the *src/components* directory, we’ll create two new files called *Header.js*
    and *Navigation.js*. React components must be capitalized, so we’ll follow the
    common convention of capitalizing the filename as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by writing the header component in *src/components/Header.js*.
    To do so, we’ll import our *logo.svg* file and add the corresponding markup for
    our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For our navigation component we’ll import React Router’s `Link` functionality
    and mark up an unordered list of links. In *src/components/Navigation.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In screenshots you’ll see that I’ve also included emoji characters as navigation
    icons. If you’d like to do the same, the accessible markup for including emoji
    characters is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: With our header and navigation components complete, we can now use them within
    our application. Let’s update our *src/pages/home.js* file to include the components.
    We will first import them and then include the component within our JSX markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our *src/pages/home.js* will now look as follows ([Figure 12-2](#web_components)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of our web application, featuring the imported components](assets/jsev_1202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. With React components we’re able to easily compose shareable UI
    features
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is everything we need in order to be able to create shareable components
    across our application. For more on using components within a UI, I highly recommend
    reading the React documentation page [“Thinking in React”](https://oreil.ly/n6o1Z).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web remains an unparalleled medium for distributing applications. It couples
    universal access with a developer’s ability to deploy real-time updates. In this
    chapter we built out the foundation of our JavaScript web application in React.
    In the next chapter we will add layout and style to the app, using React components
    and CSS-in-JS.
  prefs: []
  type: TYPE_NORMAL
