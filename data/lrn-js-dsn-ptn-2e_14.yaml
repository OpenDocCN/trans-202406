- en: Chapter 14\. Application Structure for React.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building small hobby projects or trying a new concept or library, developers
    can start adding files to a folder without a plan or organizing structure. These
    could include CSS, helper components, images, and pages. A single folder for all
    resources becomes unmanageable as the project grows. Any respectably sized codebase
    should be organized into an application folder structure based on logical criteria.
    The decision on how to structure your files and application components could be
    a personal/team choice. It would also generally depend on the application domain
    and technology used.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter mainly focuses on folder structures for React.js applications that
    could help in better management of our projects as they grow.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React.js itself does not provide a guideline on structuring projects but does
    suggest a few commonly used approaches. Let’s look at these and understand their
    pros and cons before discussing folder structures for projects with added complexities
    and Next.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the high level, you can group files in a React application in [two ways](https://oreil.ly/Tkwai):'
  prefs: []
  type: TYPE_NORMAL
- en: Group by feature
  prefs: []
  type: TYPE_NORMAL
- en: Create folders for every application module, feature, or route.
  prefs: []
  type: TYPE_NORMAL
- en: Group by file type
  prefs: []
  type: TYPE_NORMAL
- en: Create folders for different types of files.
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at this classification in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Group by Module, Feature, or Route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this case, the file structure would mirror the business model or the application
    flow. For example, if you have an ecommerce application, you will have folders
    for product, productlist, checkout, etc. The CSS, JSX components, tests, subcomponents,
    or helper libraries explicitly required for the product module reside in the product
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of grouping files by feature is that if there is a change to the
    module, all the affected files are colocated in the same folder, and the change
    gets localized to a specific part of the code.
  prefs: []
  type: TYPE_NORMAL
- en: The disadvantage is common components, logic, or styles used across modules
    should be identified periodically to avoid repetition and promote consistency
    and reuse.
  prefs: []
  type: TYPE_NORMAL
- en: Group by File Type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this type of grouping, you would create different folders for CSS, components,
    test files, images, libraries, etc. Thus, logically related files would reside
    in different folders based on the file type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The advantages of this approach are:'
  prefs: []
  type: TYPE_NORMAL
- en: You have a standard structure that you can reuse across projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newer team members with little knowledge of the application-specific logic can
    still find files for something like styles or tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common components (such as date pickers) and styles imported in different routes
    or modules can be changed once to ensure that the effect is seen across the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: A change in logic for a specific module would likely require changes in files
    across different folders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the number of features in the application grows, the number of files in different
    folders would increase, making it difficult to find a specific file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either of these approaches could be easy to set up for small- to mid-sized applications
    with a small number of files (50 to 100) per folder. For larger projects, however,
    you may want to go for a hybrid approach based on the logical structure of your
    application. Let us look at some of the possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid Grouping Based on Domain and Common Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here you would group all common components required across the application
    in a Components folder and all application flow-specific routes or features in
    a [domain folder](https://oreil.ly/rJQaz) (the name could be *domain*, *pages*,
    or *routes*). Every folder can have subfolders for specific components and related
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Thus, you can combine the advantages of both “Group by file type” and “Group
    by feature” by colocating related files, which change together frequently and
    common reusable components and styles used across the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the complexity of the application, you can modify this to a flatter
    structure without subfolders or a more nested structure:'
  prefs: []
  type: TYPE_NORMAL
- en: Flatter structure
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates a flatter structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Nested structure
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows a more nested structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It’s best to avoid deep nesting with more than three to four levels because
    it becomes harder to write relative imports between folders or update those imports
    when the files are moved.
  prefs: []
  type: TYPE_NORMAL
- en: A variation to this approach is to create folders based on views or routes,
    in addition to those based on domain, as discussed [here](https://oreil.ly/WiRca).
    A routing component can then coordinate the view to be displayed based on the
    current route. [Next.js](https://oreil.ly/6PwMu) uses a similar structure.
  prefs: []
  type: TYPE_NORMAL
- en: Application Structure for Modern React Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern React apps use different features such as Redux, stateful containers,
    Hooks, and Styled Components. Let’s see where the code related to these would
    fit in the application structure proposed in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Redux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Redux documentation [strongly recommends](https://oreil.ly/iH1aX) colocating
    logic for a given feature in one place. Within a given feature folder, the Redux
    logic for that feature should be written as a single “slice” file, preferably
    using the Redux Toolkit `createSlice` API. The file bundles {`actionTypes, actions,
    reducer`} to a self-contained, isolated module. This is also known as the [“ducks”
    pattern](https://oreil.ly/UOqb5) (from Redux). For example, as given [here](https://oreil.ly/0gpXl):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Another comprehensive example that uses Redux without creating containers or
    Hooks is available [here](https://oreil.ly/xMZiu).
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have structured your code to categorize components into [presentational
    components and stateful container components](https://oreil.ly/JeYgI), you can
    create a separate folder for the container components. Containers let you separate
    complex stateful logic from other aspects of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can find a complete structure for an app with containers in [the same article](https://oreil.ly/JeYgI).
  prefs: []
  type: TYPE_NORMAL
- en: Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hooks can fit into the hybrid structure just like any other type of code. You
    can have a folder at the app level for common Hooks that can be consumed by all
    React components. React Hooks used by only one component should remain in the
    component’s file or a separate *hooks.js* file in the component’s folder. You
    can find a sample structure [here](https://oreil.ly/rtT1n):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Styled Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using Styled Components instead of CSS, you can have *style.js*
    files instead of the component-level CSS files mentioned earlier. For example,
    if you have a `titlebar` component, the structure would be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: An application-level [*theme.js* file](https://oreil.ly/OARQ8) would contain
    the values for colors to be used for background and text. A [globals component](https://oreil.ly/LzmtQ)
    could include definitions for common style elements that other components can
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Other Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to folder structure, some other best practices that you can consider
    when structuring your React applications are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Use [import aliasing](https://oreil.ly/trM4V) to help with long relative paths
    for common imports. This can be done using both Babel and [webpack](https://oreil.ly/cSkCS)
    configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wrap third-party libraries](https://oreil.ly/Za7Yt) with your API so that
    they can be swapped if required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use [PropTypes](https://oreil.ly/8kL84) with components to ensure type checking
    for property values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build performance depends on the number of files and dependencies. If you’re
    using a bundler such as webpack, a few suggestions for improving build times may
    be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using a [loader](https://oreil.ly/zXFkv), apply it to only those modules
    that need to be transformed by it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using hybrid/nested folder structures, the following [example from
    webpack](https://oreil.ly/slT4K) shows how to include and load files from different
    paths in the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Files that do not have an `import`, `require`, `define`, etc. to reference other
    modules need not be parsed for dependencies. You can avoid parsing them using
    the [`noParse` option](https://oreil.ly/UjYPF).
  prefs: []
  type: TYPE_NORMAL
- en: Application Structure for Next.js Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Next.js](https://oreil.ly/ZeU0P) is a production-ready framework for scalable
    React apps. While you can use the hybrid structures, all the routes in the app
    must be grouped under the pages folder. (URL of the page = the root URL + relative
    path in the pages folder).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extending the structures discussed previously, you can have folders for common
    components, styles, Hooks, and utility functions. Code related on account of the
    domain can be structured into functional components that different routes can
    use. Finally, you will have the pages folder for all routes. Here’s an example
    for this based on [this guide](https://oreil.ly/AAv12):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next.js also provides [examples](https://oreil.ly/Kim4W) for many different
    types of apps. You can bootstrap these using `create-next-app` to create the template
    folder structure provided by Next.js. For example, to create the template for
    a basic [blog app](https://oreil.ly/ym0kh), use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed multiple different options for structuring React projects.
    Depending on the size, type, and components used in the project, you can choose
    the one most relevant to yours. Sticking to a defined pattern for structuring
    a project would help you explain it to other team members and prevent projects
    from getting disorganized and unnecessarily complicated.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is the concluding chapter of this book and provides additional
    links that might be helpful when learning about JavaScript design patterns.
  prefs: []
  type: TYPE_NORMAL
