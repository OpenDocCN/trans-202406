- en: Chapter 24\. Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 24.0 Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers security-related topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql.user` table that contains MySQL account information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statements for managing MySQL user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password strength checking and policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password expiration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding and removing anonymous accounts and accounts that permit connections
    from many hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you like, you can skip over the initial section that describes the `mysql.user`
    table, but I think you’ll find that reading it will help you better understand
    later sections, which often discuss how SQL operations map onto underlying changes
    in that table.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts shown in this chapter are located in the *routines* directory of the
    `recipes` distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Whether you use the MySQL 5.7 or 8.0 release series, it is best to use a recent
    version within the series. Changes to the authentication system occur in early
    development versions that may produce results that differ from the descriptions
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many of the techniques shown here require administrative access, such as the
    ability to modify tables in the `mysql` system database or use statements that
    require the privileges that allow to administer MySQL server. For this reason,
    to carry out the operations described here, connect to the server as `root` rather
    than as `cbuser`.
  prefs: []
  type: TYPE_NORMAL
- en: 24.1 Understanding the mysql.user Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL stores user account information in tables in the `mysql` system database.
    The `user` table is the most important because it contains account names and credentials.
    To see its structure, use this statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `user` table columns that concern us here specify account names and authentication
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: The `User` and `Host` columns identify the account. MySQL account names comprise
    a combination of username and hostname values. For example, in the `user` table
    row for a `'cbuser'@'localhost'` account, the `User` and `Host` column values
    are `cbuser` and `localhost`, respectively. For a `'myuser'@'myhost.example.com'`
    account, those columns are `myuser` and `myhost.example.com`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `plugin`, and `authentication_string` columns store authentication credentials.
    MySQL does not store literal passwords in the `user` sytem table because that
    is insecure. Instead, the server computes a hash value from the password and stores
    the hash string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `plugin` column indicates which authentication plugin the server uses to
    check credentials for clients that attempt to use the account. Different plug-ins
    implement password hashing methods of varying encryption strength. The [Table 24-1](#nch-security-user-table-auth-methods)
    shows the plug-ins this chapter discusses.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Table 24-1\. Authentication Plugins
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Plug-in | Authentication method |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `mysql_native_password` | Native password hashing |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `sha256_password` | SHA-256 password hashing (from MySQL 5.6.6 to MySQL 8.0)
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `caching_sha2_password` | SHA-256 password hashing with server-side caching
    (MySQL 5.7 or later) |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: MySQL Enterprise, the commercial version of MySQL, includes additional plug-ins
    for authenticating using PAM or Windows credentials. These enable use of passwords
    external to MySQL, such as Unix login passwords or native Windows services.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The `authentication_string` column represents a hashed password in the format
    required by the respective plug-in. For example, `sha256_password` uses `authentication_string`
    to store SHA-256 password hash values, which are cryptographically superior to
    native hashing, used by the `mysql_native_password` plugin. An empty `authentication_string`
    value means “no password”, which is insecure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Before MySQL 5.7.2, the server permits the `plugin` value to be empty. As of
    MySQL 5.7.2, the `plugin` column *must* be nonempty and the server disables any
    empty-plug-in account until a nonempty plug-in is assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 24.2 Managing User Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are responsible for setting up accounts on your MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn to use the account-management SQL statements.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s possible to modify the grant tables in the `mysql` database directly with
    SQL statements such as `INSERT` or `UPDATE`, but the MySQL account-management
    statements are more convenient. This section describes their use and covers these
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating accounts (`CREATE` `USER`, `SET` `PASSWORD` `ALTER USER`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning and checking privileges (`GRANT`, `REVOKE`, `SHOW` `GRANTS`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing and renaming accounts (`DROP` `USER`, `RENAME` `USER`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create an account, use the `CREATE` `USER` statement, which creates a row
    in the `mysql.user` table. But before you do so, decide these three things:'
  prefs: []
  type: TYPE_NORMAL
- en: The account name, expressed in `'`*`user_name`*`'@'`*`host_name`*`'` format
    naming the user and the host from which the user will connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The account password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The authentication plug-in the server should execute when clients attempt to
    use the account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication plug-ins use hashing to encrypt passwords for storage and transmission.
    MySQL has several built-in plug-ins from which to choose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql_native_password` implements the default password hashing method before
    version 8.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sha256_password` authenticates using SHA-256 password hash values, which are
    cryptographically more secure than hashes generated by `mysql_native_password`.
    This plug-in is available as of MySQL 5.6.6 and deprecated in version 8.0 in favor
    to its improved version `caching_sha2_password`. It provides security beyond that
    afforded by `mysql_native_password`, but additional setup is required to use it.
    (Clients must connect using SSL or provide an RSA certificate.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`caching_sha2_password` is similar to `sha256_password` but uses caching on
    the server side for better performance. This is default authentication plugin
    since MySQL 8.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `CREATE` `USER` statement is commonly used in one of these forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first syntax creates the account and sets its password with a single statement.
    It also assigns an authentication plug-in implicitly to the plug-in named by the
    `--default-authentication-plugin` setting (which is `caching_sha2_password`, unless
    you change it at server startup).
  prefs: []
  type: TYPE_NORMAL
- en: To assign privileges to the new account, which has none initially, use the `GRANT`
    statement described later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE` `USER` fails if the account already exists.'
  prefs: []
  type: TYPE_NORMAL
- en: Assigning and checking privileges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose that you have just created an account named `'user1'@'localhost'`. You
    can assign privileges to it with `GRANT`, remove privileges from it with `REVOKE`,
    and check its privileges with `SHOW` `GRANTS`.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRANT` has this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, *`account`* names the account to be granted the privileges, *`privileges`*
    indicates what they are, and *`scope`* indicates the privilege scope, or level
    at which they apply. The *`privileges`* value can be `ALL` (or `ALL` `PRIVILEGES`)
    to specify all privileges available at the given level, or a comma-separated list
    of one or more privilege names such as `SELECT` or `CREATE`. (For a full discussion
    of available privileges and `GRANT` syntax not shown here, see the *MySQL Reference
    Manual.*)
  prefs: []
  type: TYPE_NORMAL
- en: The following examples illustrate the syntax for granting privileges at each
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Granting privileges globally enables the account to perform administrative
    operations or operations on any database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Granting privileges at the database level enables the account to perform operations
    on objects within the named database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Granting privileges at the table level enables the account to perform operations
    on the named table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Granting privileges at the column level enables the account to perform operations
    on the named table column:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Granting privileges at the procedure level enables the account to perform operations
    on the named stored procedure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use `FUNCTION` rather than `PROCEDURE` if the routine is a stored function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To verify the privilege assignments, use `SHOW` `GRANTS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To see your own privileges, omit the `FOR` clause.
  prefs: []
  type: TYPE_NORMAL
- en: '`REVOKE` syntax is generally similar to `GRANT` but uses `FROM` rather than
    `TO`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, to remove the privileges just granted to `''user1''@''localhost''`, use
    these `REVOKE` statements (and `SHOW` `GRANTS` to verify that they were removed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Removing accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get rid of an account, use the `DROP` `USER` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The statement removes all rows associated with the account in all grant tables;
    you need not use `REVOKE` to remove its privileges first. An error occurs if the
    account does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change an account name, use `RENAME` `USER`, specifying the current and
    new names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: An error occurs if the current account does not exist or the new account already
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: 24.3 Implementing a Password Policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to ensure that MySQL accounts do not use weak passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `validate_password` plug-in to implement a password policy. New passwords
    must satisfy the policy, whether those chosen by the DBA for new accounts or by
    existing users changing their password.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This technique requires the `validate_password` plug-in to be enabled. For plug-in
    installation instructions, see [Recipe 22.2](ch22.xhtml#nch-admin-plugin-interface).
  prefs: []
  type: TYPE_NORMAL
- en: 'When `validate_password` is enabled, it exposes a set of system variables that
    enable you to configure it. These are the default values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose that you want to implement a policy that enforces these requirements
    for passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: At least 10 characters long
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains uppercase and lowercase characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains at least two digits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains at least one special (nonalphanumeric) character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To put that policy in place, start the server with options that enable the
    plug-in and set the values of the system variables that configure the policy requirements.
    For example, put these lines in your server option file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After starting the server, verify the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the `validate_password` plug-in prevents assigning passwords too weak for
    the policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions leave the `validate_password_policy` system variable
    set to its default value (`MEDIUM`), but you can change it to control how the
    server tests passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MEDIUM` enables tests for password length and the number of numeric, uppercase/lowercase,
    and special characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be less rigorous, set the policy to `LOW`, which enables only the length
    test. To also permit shorter passwords, decrease the required length (`validate_password_length`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be more rigorous, set the policy to `STRONG`, which is like `MEDIUM` but
    also enables you to have passwords checked against a dictionary file, to prevent
    use of passwords that match any word in the file. Comparisons are not case sensitive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use a dictionary file, set the value of `validate_password_dictionary_file`
    to the filename at server startup. The file should contain lowercase words, one
    per line. MySQL distributions include a *dictionary.txt* file in the *share* directory
    that you can use, and Unix systems often have a */usr/share/dict/words* file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Putting a password policy in place has no effect on existing passwords. To require
    users to choose a new password that satisfies the policy, expire their current
    password (see [Recipe 24.5](#nch-security-password-expiration)).
  prefs: []
  type: TYPE_NORMAL
- en: 24.4 Checking Password Strength
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to assign or change a password but verify first that it’s not weak.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `VALIDATE_PASSWORD_STRENGTH()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `validate_password` plug-in not only implements policy for new passwords,
    it also provides a SQL function, `VALIDATE_PASSWORD_STRENGTH()`, that enables
    strength testing of prospective passwords. Uses for this function include:'
  prefs: []
  type: TYPE_NORMAL
- en: An administrator wants to check passwords to be assigned to new accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An individual user wants to choose a new password but seeks assurance in advance
    how strong it is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use `VALIDATE_PASSWORD_STRENGTH()`, the `validate_password` plug-in must
    be enabled. For plug-in installation instructions, see [Recipe 22.2](ch22.xhtml#nch-admin-plugin-interface).
  prefs: []
  type: TYPE_NORMAL
- en: '`VALIDATE_PASSWORD_STRENGTH()` returns a value from 0 (weak) to 100 (strong):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 24.5 Expiring Passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want users to pick a new MySQL password.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ALTER` `USER` statement expires passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MySQL 5.6.7 and up provides an `ALTER` `USER` statement that enables an administrator
    to expire an account’s password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some uses for password expiration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can implement a policy that new users must select a new password when first
    connecting: immediately expire the password for each new account you create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you impose a stricter policy on acceptable passwords (see [Recipe 24.3](#nch-security-password-policy)),
    you can expire all existing passwords to require each user to choose a new one
    that meets the more stringent requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALTER` `USER` affects a single account. It works by setting the `password_expired`
    column to `Y` for the appropriate `mysql.user` row. To <q>cheat</q> and expire
    passwords for all nonanonymous accounts at once, do this (anonymous users cannot
    reset their password, so expiring those would have the same effect as removing
    these accounts from):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, to affect all accounts but avoid modifying the grant tables
    directly, use a stored procedure that loops through all accounts and executes
    `ALTER` `USER` for each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The procedure requires the `exec_stmt()` helper routine (see [Recipe 11.6](ch11.xhtml#nch-routines-dynamic-sql-helpers)).
    Scripts to create these routines are located in the *routines* directory of the
    `recipes` distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 24.6 Assigning Yourself a New Password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to change your password.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `ALTER USER` or `SET PASSWORD` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To assign yourself a new password, use the `SET PASSWORD` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`SET` `PASSWORD` permits a `FOR` clause that enables you to specify which account
    gets the new password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This latter syntax is primarily for DBAs because it requires the `UPDATE` privilege
    for the `mysql` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, use `ALTER USER` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use `ALTER USER` statement to assign yourself a password you
    can check your account name first by running function *CURRENT_USER*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To check the strength of a password you’re considering, use the `VALIDATE_PASSWORD_STRENGTH()`
    function (see [Recipe 24.4](#nch-security-password-strength)).
  prefs: []
  type: TYPE_NORMAL
- en: 24.7 Resetting an Expired Password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You cannot use MySQL because your DBA expired your password.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assign yourself a new password.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the MySQL administrator has expired your password, MySQL will let you connect,
    but not do much of anything else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see that message, reset your password so that you can work normally
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Technically, MySQL does not require a *new* password to replace an expired password,
    so you can assign yourself your current password to unexpire it. The exception
    is that if the password policy has become more restrictive and your current password
    no longer satisfies it, a stronger password must be chosen.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about changing your password, see [Recipe 24.6](#nch-security-assigning-password).
  prefs: []
  type: TYPE_NORMAL
- en: 24.8 Finding and Removing Anonymous Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to ensure that your MySQL server can be used only by accounts associated
    with specific usernames.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identify and remove anonymous accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An <q>anonymous</q> account is one that has an empty user part in the account
    name, such as `''''@''localhost''`. An empty user matches any name because the
    purpose of an anonymous account is to permit anyone who knows its password to
    connect from the named host (`localhost` in this case). This is a convenience
    because the DBA need not set up individual accounts for separate users. But there
    are security implications as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Such accounts often are given no password, enabling their use with no authentication
    at all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot associate database activity with specific users (for example, by
    checking the server query log or examining `SHOW` `PROCESSLIST` output), making
    it more difficult to tell who is doing what.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the preceding points persuade you that anonymous accounts are not a good
    thing, use the following instructions to identify and remove them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `User` column is empty in the `mysql.user` rows for anonymous accounts,
    so you can identify them like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `SELECT` output shows two anonymous accounts. Remove each using a `DROP`
    `USER` statement with the corresponding account name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 24.9 Modifying <q>Any Host</q> and <q>Many Host</q> Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to ensure that MySQL accounts cannot be used from an overly broad set
    of hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find and fix accounts containing `%` or `_` in the host part.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The host part of MySQL account names can contain the SQL pattern characters
    `%` and `_` (see [Recipe 7.10](ch07.xhtml#nch-strings-strings-pat-sql)). These
    names match client connection attempts from any host that matches the pattern.
    For example, the account `'user1'@'%'` permits `user1` to connect from any host
    whatsoever, and `'user2'@'%.example.com'` permits `user2` to connect from any
    host in the `example.com` domain.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns in the host part of account names provide a convenience that enables
    a DBA to create an account that permits connections from multiple hosts. They
    correspondingly increase security risks by increasing the number of hosts from
    which intruders can attempt to connect. If you consider this a concern, identify
    the accounts and either remove them or change the host part to be more specific.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to find accounts with `%` or `_` in the host part. Here
    are two:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `LIKE` expression is more complex because we must look for each pattern
    character separately and escape it to search for literal instances. The `REGEXP`
    expression requires no escaping because those characters are not special in regular
    expressions, and a character class permits both to be found with a single pattern.
    So let’s use that expression:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify pattern-host accounts in the `mysql.user` table like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To remove an identified account, use `DROP` `USER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, rename an account to make the host part more specific:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 24.10 Using TLS (SSL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to encrypt traffic between MySQL client and the server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use TLS (Transport Layer Security) protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL does not use anything additional to the standard TCP protocol to encrypt
    traffic between the client and the server. Therefore, if someone wants to read
    data, sent in either direction, they can easily do it with help of *tcpdump* and
    similar tools. Any sensitive information, such as user passwords, or stored credit
    card numbers, could be exposed. To prevent this, MySQL supports TLS protocol to
    secure communications.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Modern versions of MySQL use TLS protocol to encrypt traffic between the client
    and the server. However, due to historical reasons, configuration options and
    User Reference Manual often refer to TLS as SSL (Secure Socket Layer) even having
    that the latter is not used anymore, because its encryption is weak. In this book
    we will use the term TLS in the text whenever is possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To secure traffic between the MySQL client and the server you need:'
  prefs: []
  type: TYPE_NORMAL
- en: On the server
  prefs: []
  type: TYPE_NORMAL
- en: Enable `ssl` option. This is the default value and you only need to ensure that
    it is not disabled in the configuraiton file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Certificate Authority (CA) file that could be used to verify certificates.
    It could be a single file, specified by the option `ssl_ca` or a path to a directory,
    containing multiple such files, specified by the option `ssl_capath`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public key certificate file, specified by the option `ssl_cert`. This certificate
    will be sent to the client to authenticate against the client’s Certificate Authority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The private key, specified by the option `ssl_key`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the client
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify for the option `ssl-mode` one of the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PREFERRED`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To establish an encrypted connection if the server supports TLS and fail back
    to the unencrypted if it does not. This is the default value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`REQUIRED`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To establish an encrypted connection if the server supports TLS and fail connection
    attempt if it does not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`VERIFY_CA`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Performs the same check as `REQUIRED` and additionally verifies the server CA
    file against the configured CA certificates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`VERIFY_IDENTITY`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Performs the same check as `VERIFY_CA` and additionally performs host name verification.
    That’s said the server certificate should have client’s host name either in the
    `"Subject Alternative Name"` or the `"Common Name"` fields.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Value `DISABLED` disables TLS connections and should not be used if you want
    to encrypt client-server traffic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Certificate Authority (CA) file that could be used to verify certificates.
    It could be a single file, specified by the option `ssl_ca` or a path to a directory,
    containing multiple such files, specified by the option `ssl_capath`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public key certificate file, specified by the option `ssl_cert`. This certificate
    will be sent to the server to authenticate against the server’s Certificate Authority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The private key, specified by the option `ssl_key`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: All the Certificate Authority, certificate and key files should be in `PEM`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: If MySQL Server started with the option `ssl` enabled, but with empty values
    for other encryption-related options, if will search for the TLS keys and certificates
    in the data directory. If found, they will be used. Otherwise TLS support will
    be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have all these pre-requisites you may test the TLS connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: MySQL supports options to further restrict TLS connections, such as `ssl-cipher`,
    requiring to use only specified ciphers. Consult [“Configuring MySQL to Use Encrypted
    Connections”](https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html)
    in the MySQL User Reference Manual for further details.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Self-Signed Certificates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MySQL distribution includes *mysql_ssl_rsa_setup* command that can create self-signed
    keys and certificates. It invokes *openssl* command and can be used as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Upon completetion it creates in the data directory files as listed in the [Table 24-2](#nch-security-security-ssl-files)
  prefs: []
  type: TYPE_NORMAL
- en: Table 24-2\. Files, created by *mysql_ssl_rsa_setup*
  prefs: []
  type: TYPE_NORMAL
- en: '| File | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ca.pem` | Self-signed Certificate Authority (CA) |'
  prefs: []
  type: TYPE_TB
- en: '| `ca-key.pem` | CA private key |'
  prefs: []
  type: TYPE_TB
- en: '| `server-cert.pem` | Server certificate |'
  prefs: []
  type: TYPE_TB
- en: '| `server-key.pem` | Server key |'
  prefs: []
  type: TYPE_TB
- en: '| `client-cert.pem` | Client certificate |'
  prefs: []
  type: TYPE_TB
- en: '| `client-key.pem` | Client key |'
  prefs: []
  type: TYPE_TB
- en: '| `private_key.pem` | RSA private key to use over unencrypted connection for
    accounts, authenticated by either `sha256_password` or `caching_sha2_password`
    plugins |'
  prefs: []
  type: TYPE_TB
- en: '| `public_key.pem` | RSA public key to use over unencrypted connection for
    accounts, authenticated by either `sha256_password` or `caching_sha2_password`
    plugins |'
  prefs: []
  type: TYPE_TB
- en: Keys and certificates, created by the *mysql_ssl_rsa_setup*, are very basic
    and do not contain such fields as `"Common Name"`. If you want to add these custom
    values to your TLS files you need to create them manually. We will not include
    instructions on how to do so in the book, because there are plenty of documentation,
    available online, including [Creating SSL and RSA Certificates and Keys](https://dev.mysql.com/doc/refman/8.0/en/creating-ssl-rsa-files.html)
    in the MySQL User Reference Manual. Alternatively you may perform a test run of
    the *mysql_ssl_rsa_setup* command with option `--verbose` that will print *openssl*
    commands it executes. You will only need to repeat them with custom options.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you simply want to test how MySQL TLS connections work and do not want to
    create any new keys and certificates, you may use standard keys and certificates
    from the [MySQL Test Suite](https://dev.mysql.com/doc/extending-mysql/8.0/en/mysql-test-suite.html),
    located inside the `mysql-test/std_data` directory of your MySQL installation.
  prefs: []
  type: TYPE_NORMAL
- en: 24.11 Using Roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to grant the same set of privileges to different users, but do not
    want them to share the same user account.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use roles.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When MySQL installation is used by multiple people you may need to give similar
    privileges to some of them. For example, application users may need access to
    tables in their application database while administrators may need to execute
    administrative commands. While you have a single application user or single database
    administrator you can simply create two user accounts. But when your organization
    and MySQL usage grows you may need to allow different people to perform the same
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: You may resolve such a problem by sharing single user account between different
    people. But this is insecure for various reasons, including situation when a user
    leaves the company, and should lose access to the database. Or, if someone from
    the group leaks their access credentials all the database users are compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Another solution is to duplicate privilege lists for individual user accounts.
    While it is more secure it becomes error-prone when you need to add or remove
    a privilege. Doing it manually for dozens of users may easily lead to mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: To resolve these drawbacks, MySQL 8.0 introduced roles that are, practically,
    are the named collections of privileges.
  prefs: []
  type: TYPE_NORMAL
- en: You can create a role like any other user account. You just do not need to specify
    access credentials for it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the listing above we created a role `cookbook` that will have access to the
    cookbook database and a role `admin` that will be used for the database administration.
  prefs: []
  type: TYPE_NORMAL
- en: Next step is to assign privileges to our new roles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Once roles are set up, we can assign them to different users. For example,
    to give access to the `cookbook` database to users `cbuser`, `sveta` and `alkin`
    use these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To grant administrator access to users `paul` and `amelia` use commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Revoking role access is as easy as granting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL supports other operations with roles, such as setting default role for
    the newly added users or activating and de-activating roles. For additional information
    about roles in MySQL, see [Using Roles in the MySQL User Reference Manual](https://dev.mysql.com/doc/refman/8.0/en/roles.html).
  prefs: []
  type: TYPE_NORMAL
- en: 24.12 Using Views to Secure Data Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to give users access only to certain query results, but do not want
    them to see the actual data, stored in the tables.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use views.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may want certain users to be able to get access to the query results, but
    want to cover real data, stored in the tables. For example, the statistical department
    may want to know the number of patients in the hospital, their gender and age
    distribution, and how this data correlates to the recovery rate, but should not
    have access to actual data of the patients, such as their names, ID numbers or
    be able to correlate their identity and diagnosis.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this goal you may create a view, querying for certain data and grant
    specific users access only to this view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a `patients` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If you want to give access for this data to statistical department you may want
    to expose access to the `gender`, `age`, `diagnosis`, `result` columns, but want
    to restrict access to `national_id`, `name`, `surname` and `additional_data`.
    You also may want to let them know how many days a patient spent in the hospital
    and in which month and year they arrived, but do not want let them explore actual
    arriving and departing dates. In other words, restrict access to `date_arrived`
    and `date_departed` still providing data that could be calculated based on values,
    stored in these columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this by creating a view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Then create a user for the statistics department that has read-only access to
    this view and does not have access to the underlying table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now statistics department can login and run analytical queries, such as finding
    a most frequent diagnosis, or how many patients with such a diagnosis arrived
    per month.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'But they would not be able to access the table data directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Views support `SQL SECURITY` clause, allowing to specify security context when
    executing a view. This clause discussed in detail in [Recipe 24.13](#nch-security-security-routines).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For additional information about using views, see [Recipe 5.7](ch05.xhtml#nch-select-select-view).
  prefs: []
  type: TYPE_NORMAL
- en: 24.13 Using Stored Routines to Secure Data Modifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to let users to modify their personal data, but want to prevent them
    from accessing similar data for others.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use stored routines.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may want to let users to view and change their own personal information.
    For example, patients can marry and change surname or decide to add new additional
    information about themselves, such as address, weight and so on. But you do not
    want them to see similar information for other patients. In this case restricting
    access only on the column level would not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stored routines support `SQL SECURITY` clause that allows you to specify if
    you want to execute the routine with access privileges of the `DEFINER`: user
    that created the procedure or `INVOKER`: user that is currently executing the
    procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: In our case we do not want to grant `INVOKER` any privilege that allows them
    to access data, stored in the sensitive columns. Therefore we need to grant such
    privileges to the `DEFINER` of the procedure and specify argument `SQL SECURITY
    DEFINER`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The default value for `SQL SECURITY` is `DEFINER`, therefore this clause could
    be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate this let’s take `patients` table from the previous recipe. But
    now we will access only columns, containing sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: First, let’s prepare a user that will be a `DEFINER` for our procedure. We do
    not want this account to be used by anyone, except the stored routine, so first
    let’s install `mysql_no_login` authentication plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Then let’s create the user account and grant it access on the table `patients`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s create a procedure that will return sensitive data for a patient,
    identified by `national_id`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: And a procedure that will update the record.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Then, add privileges to execute these procedures to our `DEFINER`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let’s create a user that will use these procedures without any additional
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s login as this user and check how our procedures work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As you see we can change details for the specific patient, identifying them
    by a national ID while having no access to the data of other patients.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For additional information about stored routines, see [Chapter 11](ch11.xhtml#nch-routines).
  prefs: []
  type: TYPE_NORMAL
