- en: Chapter 7\. Advanced Rendering, Dynamic Components, and Plugin Composition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, you learned how Vue works, how to compose components
    with Options API and Composition API, and how to incorporate data from an external
    resource into your Vue application using Axios.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce a more advanced aspect of rendering in Vue. We will
    explore how to compute functional components using the rendering function and
    JSX and how to dynamically and conditionally render elements using Vue’s component
    tag. We will also learn how to register a custom plugin for use within the application.
  prefs: []
  type: TYPE_NORMAL
- en: The Render Function and JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Vue compiler API, Vue processes and compiles all the HTML templates
    used for a Vue component into the Virtual DOM upon rendering. When data of a Vue
    component are updated, Vue triggers the internal render function to send the latest
    value to the Virtual DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Using `template` is the most common approach to creating a component. However,
    we need to bypass the HTML template parser process in specific scenarios, such
    as optimizing performance, working on a server-side rendering application, or
    working on a dynamic component library. By returning the rendered virtual node
    from the Virtual DOM directly and skipping the template compiling process, `render()`
    is the solution for such cases.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Render Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Vue 2, the `render()` function property receives a `createElement` callback
    parameter. It returns a valid VNode^([1](ch07.html#id1152)) by triggering `createElement`
    with the appropriate arguments. We usually denote `createElement` as an `h` function.^([2](ch07.html#id1153))
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 7-1](#example_render_2) illustrates creating a component in Vue 2
    syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 7-1\. Use the render function in Vue 2
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code equals writing the following template code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In Vue 3, the syntax of `render` changes significantly. It no longer accepts
    an `h` function as a parameter. Instead, the `vue` package exposes a global function,
    `h`, for creating VNodes. Hence, we can rewrite the code in [Example 7-1](#example_render_2)
    to that shown in [Example 7-2](#example_render_3).
  prefs: []
  type: TYPE_NORMAL
- en: Example 7-2\. Use the render function in Vue 3
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting Multi-Root Nodes with the Render Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Vue 3 supports multiple root nodes for a component template, `render()`
    can return an array of VNodes, each of which will be injected into the DOM at
    the same level as the others.
  prefs: []
  type: TYPE_NORMAL
- en: Using the h Function to Create a VNode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue designs the `h` function to be very flexible with three input parameters
    in different types, as shown in [Table 7-1](#table_param_render).
  prefs: []
  type: TYPE_NORMAL
- en: Table 7-1\. Different parameters for the h function
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Required? | Acceptable data type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Component | Yes | String, object, or function | It accepts a string as a
    text or HTML tag element, a component function, or an options object. |'
  prefs: []
  type: TYPE_TB
- en: '| props | No | Object | This object contains all components’ `props`, attributes,
    and events received from its parent, similar to how we write in the `template`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Nested children | No | String, array, or object | This parameter includes
    a list of VNodes, or a string for a text-only component, or an object with different
    `slots` (see [Chapter 3](ch03.html#unique_chapter_id_03)) as children for the
    component. |'
  prefs: []
  type: TYPE_TB
- en: 'The syntax of the `h` function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we want to create a component that uses a `div` tag as a root
    element and has a `id`, an inline border style, and one input child element. We
    can call `h` as in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the actual DOM, the output of the component will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can play with the following complete working code and experiment with different
    configurations for the `h` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Writing JavaScript XML in the Render Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript XML (JSX) is a JavaScript extension introduced by the React framework
    to allow developers to write HTML code within JavaScript. HTML and JavaScript
    code in a JSX format looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code outputs a component that renders a `div` tag with the text
    “This is a JSX component.” All that’s left to do is to return this component in
    the render function directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Vue 3.0 supports writing with JSX out of the box. The syntax for JSX is different
    from the Vue template. To bind a dynamic data, we use single curly braces `{}`,
    as in [Example 7-3](#jsx_ex).
  prefs: []
  type: TYPE_NORMAL
- en: Example 7-3\. Writing a simple Vue component using JSX
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We bind dynamic data with the same approach. There is no need to wrap the expression
    with `''''`. The following example shows how we attach a value to the `id` attribute
    of the `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: However, unlike JSX in React, we don’t transform attributes such as `class`
    to `className` with Vue. Instead, we keep these attributes’ original syntax. The
    same goes for elements’ event listeners (`onclick` instead of `onClick` in React,
    etc.).
  prefs: []
  type: TYPE_NORMAL
- en: You can also register a JSX component as part of `components` like other Vue
    components written in Options API. It can be handy in combining with the `render`
    function in writing dynamic components and offers better readability in many cases.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss how we can write a functional component.
  prefs: []
  type: TYPE_NORMAL
- en: Functional Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A functional component is a stateless component and bypasses the typical component
    lifecycle. Unlike a standard component, which works with Options API, a functional
    component is a function, denoting the render function for that component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it is a stateless component, there is no access to the `this` instance.
    Instead, Vue exposes the component’s external `props` and `context` as function
    arguments. The functional component must return a virtual node instance created
    using the global function `h()` from the `vue` package. Hence, the syntax will
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`context` exposes the component’s context properties, including `emits` for
    the component’s event emitters, `attrs` for passed attributes to the component
    from the parent, and `slots` containing the component’s nested elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the functional component `myHeading` displays any text passed
    to it within a heading element. We give the heading’s level as `level` props.
    If we want to display the text “Hello World” as heading level 2 (`<h2>`), we use
    `myHeading` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To do this, we use the render function `h` from the `vue` package and perform
    the code shown in [Example 7-4](#heading_two).
  prefs: []
  type: TYPE_NORMAL
- en: Example 7-4\. Using the `h` function to create a custom heading component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Vue will skip the template render process for the functional component and add
    the virtual node declaration directly to its renderer pipeline. This mechanism
    results in no nested slots or attributes available for functional components.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Props and Emits for Functional Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can explicitly define the functional component’s acceptable `props` and
    `emits` by following the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Without defining, `context.props` will have the same value as `context.attrs`,
    containing all the attributes passed to the component.
  prefs: []
  type: TYPE_NORMAL
- en: A functional component is powerful when you want to control how to render your
    component programmatically, especially for component library authors who need
    to provide low-level flexibility for their components for users’ requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Vue 3 offers an additional way to write components using `<script setup>`. This
    is relevant only if you write components in *SFC* format, discussed in [“setup”](ch03.html#setup_hook_03).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will explore how to add external functionality to a Vue application
    using plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Custom Functionality Globally with Vue Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use plugins to add third-party libraries or extra custom functionality for
    global usage in our Vue application. A Vue plugin is an object that exposes a
    single method, `install()`, containing the logic code, and it is responsible for
    installing the plugin itself. Here is an example plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we define our sample plugin code within the `samplePlugin` file,
    located in the `plugins` directory. `install()` receives two argument: an `app`
    instance, and some `options` as the plugin’s configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s compose a `truncate` plugin that will add a new global function
    property, `$truncate`. `$truncate` will return a truncated string if its length
    is over `options.limit` characters, as shown in [Example 7-5](#truncate_code).
  prefs: []
  type: TYPE_NORMAL
- en: Example 7-5\. Compose a truncate plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this plugin in our application, we call the `app.use()` method on the
    created `app` instance in the `main.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The Vue engine will install the `truncate` plugin and initialize it with a
    `limit` of 10 characters. The plugin will be available in every Vue component
    within the `app` instance. You can call this plugin using `this.$truncate` in
    the `script` section or just `$truncate` in the `template` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The output should look like [Figure 7-1](#figure_15_1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Display of two heading texts, both as truncated texts result from the call
    of the truncate plugin.](assets/lvue_0701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1\. Component output texts are truncated
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'However, `$truncate` is available only if you use it in the `<template>` section
    or as `this.$truncate` with Options API in the `script` section. Accessing `$truncate`
    inside `<script setup>` or `setup()` is *not* possible. To do so, we need the
    provide/inject pattern (see [“Communicate Between Components with provide/inject
    Pattern”](ch04.html#provide_inject_pattern)), starting with adding the following
    code to the plugin’s `install` function, located in the `plugins/truncate.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue will pass `truncate` as part of the `plugins` object to all the application’s
    components. With that, we can use `inject` to receive our desired plugin `truncate`
    and move on to computing the `truncatedText`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Plugins are very helpful in organizing global methods and making them available
    for reuse in other applications. It is also beneficial in writing your logic during
    an installation of an external library, such as *axios* for fetching external
    data, *i18n* for localization, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Registering Pinia and Vue Router in Our Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the scaffolding of our application, Vite adds Pinia and Vue Router as
    application plugins using the same approach reflected in the original generated
    code in `main.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will look at rendering the dynamic component in run-time using
    the Vue `<component>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Rendering with the <component> Tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<component>` tag acts as the placeholder for rendering a Vue component,
    according to the component reference name passed to its `is` props, following
    this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Suppose your target component is accessible from the Vue instance (registered
    as a component of the app or the parent component when `<component>` is nested);
    the Vue engine will know how to look up the target component based on the name
    string and replace the tag with the target component. The target component will
    also inherit all the extra props passed to `<component>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we have a `HelloWorld` component that renders the text “Hello World”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We register this component to the `App`, then render it dynamically using the
    `<component>` tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also bind the component as a reference to the `is` props using the
    `v-bind` directive (denoted by `:` short syntax). We can shorten the two previous
    code blocks into a single `App` component by rewriting the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note here the component reference `myComp` follows Options API syntax. You can
    also pass an imported SFC component instead. The output of both cases should be
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: The `<component>` tag is powerful. For example, if you have a gallery component,
    you can choose to render each gallery item as a `Card` component or a `Row` component,
    using `<component>` to switch parts conditionally.
  prefs: []
  type: TYPE_NORMAL
- en: However, switching components means Vue unmounts the current element completely
    and erases all the component’s current data states. Switching back to that component
    equals creating a new instance with a new data state. To prevent that behavior
    and maintain the states of a passive element for a future switch, we use the `<keep-alive>`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Component Instance Alive with <keep-alive>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`<keep-alive>` is a built-in Vue component for wrapping around a dynamic element
    and preserving the component’s states in inactive mode.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume we have two components, `StepOne` and `StepTwo`. In the `StepOne` component,
    there is a string `input` field that has two-way binding to a local data property
    `name` using `v-model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'While the `StepTwo` component renders a static string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the main `App` template, we will use `component` tag to render a local data
    property: `activeComp` as a component reference. The initial value of `activeComp`
    is `StepOne`, and we have a button to move between `StepOne` to `StepTwo`, and
    vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you switch between `StepOne` and `StepTwo`, Vue preserves any value
    of the `name` property received from the input field. When switching back to `StepOne`,
    you can continue with the previous value rather than starting from the initial
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also define the maximum instances for `keep-alive` to the cache using
    its `max` props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This code defines the maximum number of instances `keep-alive` should hold as
    two by setting `max="2"`. Once the number of cached instances exceeds the limit,
    Vue removes the least recently used (LRU) instance from the cached list, allowing
    for caching new instances.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explored how to control the component rendering with JSX and functional
    components, register Vue custom plugins globally, and dynamically and conditionally
    render a component using the `<component>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce Vue Router, the official routing management
    library for Vue, and discuss how to handle the navigation between different routes
    in our application using Vue Router.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch07.html#id1152-marker)) Virtual node
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch07.html#id1153-marker)) Stands for hypescript, meaning using JavaScript
    code to create HTML
  prefs: []
  type: TYPE_NORMAL
