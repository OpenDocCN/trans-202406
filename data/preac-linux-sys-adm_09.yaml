- en: Chapter 9\. Monitoring Your System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring is not optional. It’s essential. Every system administrator must
    monitor their system’s performance, health, and security with a vigilant eye.
    It’s impossible to manually monitor your systems and also perform your other administrative
    tasks, so you must rely on automated software, specific system configurations,
    and a reporting system to update you on each system’s status.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explores native monitoring tools and guides you in gathering performance
    and health statistics for your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining Vigilance on CPU, Memory, and Disk Performance and Capacity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The three primary monitoring focal points in Linux systems are CPU, memory,
    and disk performance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Network capacity on local area networks (LANs) isn’t usually much of an issue,
    especially with gigabit network speeds. Many data centers/server rooms use 10-gigabit
    connections so that system-to-system communications are practically instantaneous
    and backups, even huge ones, are of no consequence. That said, checking network
    performance will only require a few minutes of your day, so why not include it?
    The data exists and is freely available to you, so display it, study it, and act
    on it if you see a negative trend.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on CPU, memory, and disk performance and capacity.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking CPU Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CPU is often at the top of the list of system components to monitor. It’s
    at the top of the list because it’s the system’s powerhouse. Suppose your system’s
    CPU continuously operates above 80% utilization. In that case, it’s possible that
    your system doesn’t have enough CPU to power the operating system and all of a
    host’s running applications. It’s also conceivable that an application coding
    problem or security breach issue sends your CPU’s utilization into the “red” zone.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous tools available to help you monitor and assess CPU utilization.
    The simplest and most readily available are `top` and `ps`. These commands are
    part of the standard build on every Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The top commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a system administrator, you’ve possibly encountered `top` or one of its related
    commands, such as `atop` or `htop`. The `top` utility is standard on most Linux
    distributions, but you’ll have to install `atop` and `htop` packages from your
    distribution’s repositories. The `top` commands give you a real-time view of your
    system’s “top” processes. By default, `top` lists those that consume the most
    CPU at the top of the view.
  prefs: []
  type: TYPE_NORMAL
- en: top
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All users may issue the `top` command and change sorting options from CPU (default)
    to memory, time, and PID, as shown in [Figure 9-1](#the_top_command_sorted_by_percent_cpu).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/plsa_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. The top command sorted by % CPU
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Use Shift + M to switch to memory usage mode, as shown in [Figure 9-2](#the_top_command_is_sorted_by_memory_con).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/plsa_0902.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. The top command is sorted by Memory consumption usage
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To see how long your processes have run, use Shift + S to sort by time, as shown
    in [Figure 9-3](#top_processes_sorted_by_time).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/plsa_0903.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3\. Top processes sorted by time
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Table 9-1](#keyboard_shortcuts_for_some_sorting_opt) provides you with a few
    keyboard shortcuts to `top`’s sorting options.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 9-1\. Keyboard shortcuts for some sorting options
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Sorting |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Shift + M | `%MEM` (memory usage) |'
  prefs: []
  type: TYPE_TB
- en: '| Shift + P | `%CPU` (CPU usage—the default) |'
  prefs: []
  type: TYPE_TB
- en: '| Shift + S | `TIME` (running time) |'
  prefs: []
  type: TYPE_TB
- en: From a cursory glance at `top`’s output, you might find it difficult to know
    which value is in focus. So it’s often necessary to use one of the keyboard shortcuts
    to apply a known sorting scheme to reset your view. If I forget which sorting
    scheme I’m running, I cycle through CPU, memory, and time to check.
  prefs: []
  type: TYPE_NORMAL
- en: The standard `top` command is useful, but for many sysadmins, the displayed
    information isn’t sufficient for informed decision-making. The `atop` and `htop`
    commands, not installed by default on most distributions, provide you with a broader
    view of what’s happening.
  prefs: []
  type: TYPE_NORMAL
- en: atop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `atop` utility is an advanced system and process monitor. `atop` displays
    standard top processes in the lower pane but provides insight into CPU, memory,
    disk, and network performance in the upper pane, as shown in [Figure 9-4](#the_atop_command).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/plsa_0904.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-4\. The atop command
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The [`atop` man page](https://oreil.ly/Fu2Sw) describes `atop` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The program `atop` is an interactive monitor to view the load on a Linux system.
    It shows the occupation of the most critical hardware resources (from a performance
    point of view) on the system level, i.e., CPU, memory, disk, LVM, swap usage,
    and network. It also shows which processes are responsible for the indicated load
    concerning CPU and memory load on the process level.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You may run `atop` as a regular user or as the root user. Depending on which
    user (regular or root) executes the command, the command displays a message that
    informs you of which mode you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: 'When run as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When run as a regular user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The views are the same for both modes. Still, in restricted view, there are
    actions that you can’t take, such as using `kill` on processes that you don’t
    own. As mentioned earlier, the `atop` utility appeals to sysadmins because it
    displays focused performance values for critical system parameters. These statistics
    are handy because you don’t have to search for performance-specific data or use
    a potentially expensive third-party tool to extract the information. The `atop`
    utility is an essential part of a system administrator’s toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: htop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `htop` utility is another system performance viewer that displays the same
    information as the standard `top` utility but is color-coded and has a convenient
    command menu. As you can see in [Figure 9-5](#the_htop_utility_running_in_cpu_usage_m),
    the `htop` utility’s current usage mode is highlighted (`CPU%`). The current mode
    is CPU usage. The menu helps execute specific commands without the administrator
    having to memorize keystrokes for each action.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/plsa_0905.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-5\. The `htop` utility running in CPU usage mode
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ps` command displays information about running processes. You can view
    your own processes, all processes, and the process table in different formats
    using command options or switches. The `ps` command is common to all Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view all processes your user account owns, use the `ps` command with the
    `-ux` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also view all processes by owner using the `-aux` switch combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The full process table is too long to show here, but you can see from the listing
    that the displayed results show processes in ascending order of process ID (PID).
    The `top` command in the previous section is a dynamic process table that you
    can order by CPU, memory, and other performance measurements.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining utilities in this section are not as well-known as the `top` or
    `ps` commands but are important enough for you to learn about and explore the
    features and functions of each.
  prefs: []
  type: TYPE_NORMAL
- en: glances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`glances`, shown in [Figure 9-6](#glancesapostrophe_dynamic_display_with),
    is another `top` program. It is a cross-platform monitoring tool. The developer(s)
    rearranged and colorized the display, but the information is similar to what you
    see in the `htop` utility.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/plsa_0906.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-6\. `glances`’ dynamic display with `CPU%` focus
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Press the M key (Shift is not required for shortcuts in `glances`) to change
    the focus from `CPU%` to `MEM%`, and press T to switch to `TIME`. Press C to return
    to `CPU%` on the display.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your system is CPU-constrained or you suspect it to be CPU-constrained, don’t
    use `glances` as your primary CPU performance check because it consumes about
    15% of your CPU as opposed to `top`’s 3%–5%.
  prefs: []
  type: TYPE_NORMAL
- en: You may also run `glances` in a client/server configuration, export data to
    multiple formats, and change its display settings. Consult the man page for a
    list of `glances`’ features and options.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring sysstat Monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sysstat` (System Status) package is a native tool. In other words, it’s
    a prepackaged, standard monitoring tool that’s free and freely available on any
    Linux distribution. You can compile it from source code if you prefer, but it’s
    generally available in package form for all major distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is excerpted from the `sysstat` man page:'
  prefs: []
  type: TYPE_NORMAL
- en: The sysstat package contains the sar, sadf, mpstat, iostat, tapestat, pidstat,
    cifsiostat tools for Linux.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sar is the system activity reporter utility.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: sadf is the system activity data formatter that displays data collected by sar
    in multiple formats (CSV, XML, etc.).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: iostat is the input/output statistics utility that displays CPU utilization
    and disk I/O statistics.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: tapestat displays tape and tape drive statistics.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: mpstat is the multi-processor statistics utility that displays global and per-processor
    statistics.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: pidstat reports statistics for Linux processes by process ID.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: cifsiostat is the CIFS (Samba/SMB) I/O statistics utility.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting System Activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sar` utility is the most used of the `sysstat` suite of commands. The system
    activity reporting tool displays performance statistics from midnight to the current
    time. By default, `sar` only displays the current day’s metrics.
  prefs: []
  type: TYPE_NORMAL
- en: You can save the information collected by `sar` in a file in a binary format.
    The statistics reported by `sar` include I/O transfer rates, paging, process-related
    performance, interrupts, network activity, memory utilization, swap space utilization,
    CPU utilization, kernel activities, TTY statistics, and more. The `sysstat` package
    fully supports both single and multiprocessor systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `sar` command with no options displays CPU statistics (default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can filter `sar` results using command options. For example, to display
    CPU statistics, use the `-u` option. The `-u` option displays the same results
    as the `sar` command with no options. Add the `ALL` keyword to include all CPU-related
    statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-B` option displays paging statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-b` option reports I/O and transfer rate statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As demonstrated, the `sar` command is versatile and has many options for displaying
    system performance data. Refer to the `sar` man page for an extensive list of
    options. The next section covers displaying `sar` data in multiple formats using
    the `sadf` command.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying System Activity Data in Multiple Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `sadf` command sends `sar` data to different output types to make ingesting
    its data into a database or displaying it on a web page easier. For example, the
    following command displays `sar` data from the 21st of the month in a format that’s
    easy to import into a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to using `sadf` with historical data, you can also use it with
    current data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'There are too many possible options for generating different data outputs using
    `sadf` to list here. Search online for more examples or experiment with options
    from the `sadf` man page. The next sections deal with specific statistics output
    from other `sysstat` utilities: `iostat`, `tapestat`, `mpstat`, `pidstat`, and
    `cifsiostat`. Their relevance depends on your hardware configuration. For example,
    very few, if any, businesses still use tape drives for backups.'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring System I/O Device Loading with iostat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like other “stat” commands, the first metric you see is a statistics summary
    or summary metric from the time since the system was last booted. Generally, you
    run the stat commands in multiples to see current statistics or use the `-y` option
    to ignore the summary metric. In this first example, the summary information is
    included; in the second, the summary is omitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here it is with the summary information included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is with the summary information omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The statistics on a quiet virtual machine aren’t very interesting, but at least
    you see which metrics the utility yields in its reports. Like the other `sysstat`
    utilities, `iostat` has several options you can glean from the man pages.
  prefs: []
  type: TYPE_NORMAL
- en: Kicking It Old-School with the tapestat Utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I haven’t used a tape drive in more than 15 years as of this writing. Virtual
    tape drives (hard disks masquerading as tape drives) have replaced the old streaming
    tape systems. I’m covering `tapestat` here for legacy purposes because there’s
    always an old “unsupported” system lying about somewhere with a tape drive installed.
    The information on it is always more valuable than gold, and you might have to
    retrieve it. This section won’t help you retrieve the information, but you can
    see some tape drive–related statistics from its operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the response I receive when I run `tapestat` on my Linux VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: That’s the message you’re likely to receive when you type the `tapestat` command.
    Tape drives are part of history and were not part of anyone’s good old days. If
    you’re still using one, your output will provide you with interesting and useful
    statistics.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting Processor Statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the `mpstat` (multiprocessor statistics) utility, you can display multiprocessor
    and uniprocessor statistics for your systems. Issuing the `mpstat` command with
    no options displays a summary for all processors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You see that the system contains two processors, so you know that you can view
    individual processor performance. View individual processors by specifying option
    `-P` and the processor number. Remember that processor numbering begins with `0`.
    For a two-processor system, you have processor `0` and processor `1`. The following
    command displays statistics for processor `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also view all processors by specifying the `ALL` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to other “stat” commands, you can request a display at an interval
    in seconds and a specified number of iterations. For example, the following executes
    `mpstat` every five seconds and three iterations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: On a busier system, the numbers are far more informative. You can determine
    if a particular processor is at or above capacity and then selectively bind processes
    (changing the processor affinity of a process) to other processors to relieve
    the stress on `CPU0`. The next utility, `pidstat`, displays which processor a
    particular process is bound to.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Linux Tasks with pidstat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pidstat` command is used to monitor individual tasks currently managed
    by the Linux kernel. The default command, with no options passed to it, displays
    only active tasks (tasks with nonzero statistics values) in the report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A handy use of the `pidstat` utility is to check system usage by an individual
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `pidstat` utility has significant value if you’re tracking down a rogue
    user or process consuming too many system resources.
  prefs: []
  type: TYPE_NORMAL
- en: Watching Windows-Compatible Filesystem Statistics with cifsiostat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cifsiostat` command displays statistics about read and write operations
    on Common Internet File System (CIFS) or Samba filesystems. Many system administrators
    will maintain CIFS to be compatible with their Windows users. Windows users may
    map drive letters to CIFS shares, similar to mapping to a shared folder on a Windows
    system. Using CIFS makes it easier to maintain some compatibility between Windows
    desktop systems and Linux servers. CIFS may also make using Windows Server systems
    unnecessary because many Windows services may be duplicated using the protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `cifsiostat` command to display statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If `cifsiostat` doesn’t work on your systems, ensure that you have CIFS/Samba
    installed and operating correctly. Add Samba users to your system. Set up writeable/browseable
    shares. Start/restart and enable Samba using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, be sure that the `cifs` kernel module is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about monitoring your system’s performance as well
    as the tools with which you can track those statistics. Unfortunately, there isn’t
    a single tool that does everything. Many system administrators install commercial
    monitoring tools to remedy the lack of a global, free monitoring tool. There have
    been a few attempts in the past to create such free tools, but they were either
    abandoned by their developers or sold to commercial companies.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring your systems is a required task, and it’s more than a simple up/down
    status check. You must maintain constant vigilance over your systems’ performance
    and capacity to minimize outages and provide business continuity to your applications
    and resources.
  prefs: []
  type: TYPE_NORMAL
