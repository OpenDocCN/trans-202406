- en: Chapter 10\. Configuring and Running Falco
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to install Falco in production environments.
    However, you still need to know how its configuration system works. Learning to
    change its settings is fundamental to managing them over time and accommodating
    your needs. You can configure Falco during or immediately after installation,
    when updating to a newer version, or any time your needs change.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will help you understand and use the available settings. First,
    we’ll explain the main areas of intervention: command-line options, environment
    variables, the configuration file, and rules files. Then we will go deeper into
    each of them. You will also find valuable suggestions for production use cases,
    along with some tips to fine-tune your Falco configuration. At the end of the
    chapter you’ll find a dedicated section on configuring plugins, and we’ll show
    you how to update the configuration of a running Falco instance.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Falco
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can configure Falco through its settings, which we have grouped into three
    categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Command-line options and environment variables
  prefs: []
  type: TYPE_NORMAL
- en: Command-line options and environment variables are the first settings you need
    to run Falco. Most of these settings allow Falco to talk with your system, which
    is particularly important for system instrumentation and data enrichment. Other
    settings here let you adapt Falco to specific needs or help with troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration file
  prefs: []
  type: TYPE_NORMAL
- en: You can configure almost any Falco behavior from within the main configuration
    file, which you can customize according to your needs. For instance, you can load
    rules files, activate the output channels you want, and use plugins if you need
    to. By default Falco looks for this file at */etc/falco/falco.yaml*, but you can
    specify a different path using a command-line option.
  prefs: []
  type: TYPE_NORMAL
- en: Ruleset
  prefs: []
  type: TYPE_NORMAL
- en: Falco comes with a rich default ruleset so that you can start to use it immediately.
    However, the ruleset is perhaps the most critical aspect to customize. It represents
    the configuration of the Falco engine and sets what Falco will detect. By convention,
    rules files live in */etc/falco*.
  prefs: []
  type: TYPE_NORMAL
- en: Before we address each category in detail, we want to show you how Falco changes
    depending on how you install it.
  prefs: []
  type: TYPE_NORMAL
- en: Differences Among Installation Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of the installation method you choose, Falco’s configuration areas
    will always be the same. However, the ways you can change the settings may be
    slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: Host Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you installed Falco using a package manager, you can specify the command-line
    options and environment variables directly in the systemd unit file, which you
    can find at */usr/lib/systemd/user/falco.service*. Using `systemctl edit falco`
    is a convenient way to do that. When you’re finished, remember to restart the
    service with `systemctl restart falco`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not using a package manager, running Falco is entirely up to you,
    including passing command-line options and setting the environment variables.
    In such a case, you can manually create a systemd unit. You can use the [*falco-service*
    file’s source code](https://oreil.ly/0LcF3) as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the package you use, you’ll find Falco’s configuration and rules
    files under */etc/falco.* You can edit those files directly and then restart Falco.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Falco’s container images allow you to specify the command to run, which by
    default is `/usr/bin/falco`. If you need to pass command-line options, do so through
    the CLI of your container runtime. For example, with Docker, to pass `--version`,
    you would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the *falcosecurity/falco* container image’s entry point is a script
    that tries to install the driver automatically. If you want to skip the installation,
    you need to set the `SKIP_DRIVER_LOADER` environment variable to any nonempty
    value. In Docker, you can use the `-e` option to set an environment variable.^([1](ch10.xhtml#ch01fn11))
    So, for example, to get the version and skip the driver installation at the same
    time, you would run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Falco container images also bundle both the default configuration file and the
    default rules files. If you need to modify any of these, the usual approach is
    to make an external copy of the file (for example, */etc/falco/falco.yaml*) and
    then mount it into the container. You can grab the configuration and rules files
    from the binary package (make sure it matches the version of Falco running in
    the container) and modify them according to your needs. Then, in Docker, use the
    `-v` option to mount the modified files into the container.^([2](ch10.xhtml#ch01fn12))
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes Deployments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you deploy Falco in Kubernetes, you’ll also specify command-line options
    and environment variables in the DaemonSet or the Deployment manifest. If you
    use Helm or the example manifests from [Chapter 9](ch09.xhtml#installing_falco),
    the deployment will already be configured with all the options to connect to your
    container runtime and the Kubernetes API server. If you need to modify an option,
    find the corresponding [Falco chart configuration](https://oreil.ly/9CsSk) or
    modify the [manifest](https://oreil.ly/L6rs9) directly.
  prefs: []
  type: TYPE_NORMAL
- en: Another important difference is that configuration and rules files live inside
    a ConfigMap whose contents shadow those shipped within the container image. For
    Helm users, the maintainers update Falco’s chart and configuration and rules files
    in sync with the Falco distribution. On the other hand, if you are using manifest
    files, it’s completely up to you to ensure the ConfigMap embeds the right files.
  prefs: []
  type: TYPE_NORMAL
- en: Command-Line Options and Environment Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running Falco, specifying a command-line option or setting an environment
    variable is sometimes the only way to change some of the settings. Settings you
    configure via the command line always take precedence over settings loaded from
    the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: You can get the full list of Falco’s command-line options by running `falco
    --help`. Falco will print each option (along with a brief description) in alphabetical
    order. The available options may change depending on the Falco version. Always
    refer to `falco --help` when in doubt.
  prefs: []
  type: TYPE_NORMAL
- en: In the rest of this section, to help familiarize you with the most important
    settings, we group them by function. We also provide detailed information about
    using environment variables, which you will not find in `falco --help`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The two command-line options shown in [Table 10-1](#configuration_command_line_options)
    pertain to Falco’s configuration file (located by default at */etc/falco/falco.yaml*).
    The first one allows you to load a configuration file from a different location;
    the second allows you to override some configuration values on the fly. You won’t
    usually need to use them, but they can be handy when troubleshooting. Also, when
    running Falco in production, ensure nobody sets them by mistake so that Falco
    uses the correct configuration file and the intended settings.
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-1\. Configuration command-line options
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-c` | Sets the path to the configuration file Falco will load. If this is
    not set, Falco uses the default path: */etc/falco/falco.yaml*. |'
  prefs: []
  type: TYPE_TB
- en: '| `-o`, `--option *<key>*=*<val>*` | Overrides a value in the configuration
    file by setting the value `*<val>*` to the configuration option specified by `*<key>*`.
    You can use dot notation (`.`) to specify nested options or square brackets notation
    (`[]`) to access lists: for example, `-o key.subkey.list[0]=myValue`. |'
  prefs: []
  type: TYPE_TB
- en: Instrumentation Settings (Syscalls Only)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you learned in Chapters [4](ch04.xhtml#data_source) and [9](ch09.xhtml#installing_falco),
    Falco uses the kernel module driver by default. You can switch to the eBPF probe
    by setting the `FALCO_BPF_PROBE` environment variable. You can set it to the path
    of the probe you want to use: for example, `FALCO_BPF_PROBE="/path/to/falco-bpf.o"`.
    Otherwise, you can set it to an empty string (`FALCO_BPF_PROBE=""`) and Falco
    will use *~/.falco/falco-bpf.o* by default.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run Falco in a container or Kubernetes, the container image supports
    `FALCO_BPF_PROBE` to control the on-the-fly driver installation, along with other
    environment variables. (The *falco-driver-loader* script exposes most of them,
    so you can also use `falco-driver-loader --help` to get more information.) Let’s
    look at those environment variables now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DRIVERS_REPO`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you create a repository of prebuilt drivers (either kernel modules or eBPF
    probes), you can use this option to instruct the script to download a driver from
    your repository. A driver repository hosts files with the following URL structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '*<DRIVERS_REPO>/<DRIVER_VERSION>/falco_<OS_ID>​_<KER⁠NEL_RELEASE>_<KERNEL_VERSION>.[ko|o]*'
  prefs: []
  type: TYPE_NORMAL
- en: This variable allows you to set the base URL of your repository (with no trailing
    slash). You may want to use this setting if you are running Falco in an air-gapped
    environment or if you don’t want to download prebuilt drivers from the internet.
    If not set, this variable defaults to The Falco Project’s [public driver repository](https://oreil.ly/vsE8X).
  prefs: []
  type: TYPE_NORMAL
- en: '`DRIVER_INSECURE_DOWNLOAD`'
  prefs: []
  type: TYPE_NORMAL
- en: If your driver repository does not support HTTPS, set it to any value (for example,
    `yes`) to allow the script to download files from insecure URLs.
  prefs: []
  type: TYPE_NORMAL
- en: '`SKIP_DRIVER_LOADER`'
  prefs: []
  type: TYPE_NORMAL
- en: If you installed the driver on the host by other means, you’ll likely want to
    disable the *falco-driver-loader* script when the container starts. In that case,
    set this environment variable to any value (for example, `yes`). This setting
    only affects Falco container images that use *falco-driver-loader* in the entry
    point, like the *falcosecurity/falco* container image.
  prefs: []
  type: TYPE_NORMAL
- en: '`HOST_ROOT`'
  prefs: []
  type: TYPE_NORMAL
- en: This environment variable differs from the others listed here in that it’s not
    related to the driver installation and directly affects Falco. `HOST_ROOT` expects
    a base path and affects the instrumentation setup and enrichment system. If the
    value is not empty, Falco uses it as a path prefix when it accesses the host’s
    filesystem to use the kernel module devices (under */dev*) or to fetch information
    for data enrichment (in particular from */proc* and the container runtime Unix
    socket path). The *falco-driver-loader* script uses this variable for similar
    purposes (for example, to access */boot*, */lib*, */usr*, and */etc*).
  prefs: []
  type: TYPE_NORMAL
- en: Use `HOST_ROOT` when running Falco in a container. The usual convention is to
    set `HOST_ROOT=/host` and mount all the relevant paths into the container under
    the */host* directory. Kubernetes deployment uses this approach; see Chapters
    [5](ch05.xhtml#data_enrichment) and [9](ch09.xhtml#installing_falco) for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: For completeness, other settings related to syscall instrumentation are listed
    in [Table 10-2](#syscall_instrumentation_command_line_op). These settings have
    a significant performance impact, so don’t use them unless you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-2\. Syscall instrumentation command-line options
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-A` | Falco does not monitor all syscalls by default, so you usually cannot
    use all event types in rule conditions (the driver skips most syscalls that are
    noisy or expensive to process, such as `read`, `write`, `send`, and `recv`). If
    you enable this setting, the driver will send all supported syscall events to
    Falco, which may be helpful in edge use cases. However, enabling this setting
    has a severe performance penalty. Falco may not be able to catch up with the event
    stream. The full list of supported syscalls is available in [*syscall_info_table.c*](https://oreil.ly/WVDRm).
    By default, the driver skips those marked with `EF_DROP_SIMPLE_CONS`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-u`, `--userspace` | Use this option only when you can’t use the kernel
    space instrumentation. This option must be used with a user-space driver like
    pdig (discussed in [Chapter 4](ch04.xhtml#data_source)). |'
  prefs: []
  type: TYPE_TB
- en: Data Enrichment Settings (Syscalls Only)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using syscalls as a data source, Falco needs to connect to a driver. It
    also needs to fetch information from the host, the container runtime, and Kubernetes.
    In [Chapter 5](ch05.xhtml#data_enrichment), we talked briefly about the settings
    described in this section; [Table 10-3](#data_enrichment_command_line_options)
    provides detailed usage descriptions of command-line options and environment variables
    that affect the data enrichment mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-3\. Data enrichment command-line options
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `--cri *<path>*` | Use this option to specify the path to the Unix socket
    of a CRI-compatible container runtime. If the Unix socket is valid, Falco will
    connect to the runtime to fetch the container metadata. In recent versions of
    Falco, you can specify this option multiple times. Falco will try each given path
    in order and use the first one that connects. When this option is not set, Falco
    will only try to use */run/containerd/containerd.sock*. |'
  prefs: []
  type: TYPE_TB
- en: '| `--disable-cri-async` | This option disables asynchronous CRI metadata fetching.
    You won’t usually need to set it. However, if Falco shows container metadata intermittently,
    this option can help you fix the issue. |'
  prefs: []
  type: TYPE_TB
- en: '| `-k *<url>*`, `--k8s-api *<url>*` | This enables Kubernetes metadata enrichment
    by connecting to the Kubernetes API server specified by `*<url>*`. Alternatively,
    you can use the `FALCO_K8S_API` environment variable, which accepts the same values
    allowed by this option. |'
  prefs: []
  type: TYPE_TB
- en: '| `-K *<bt_file>* &#124; *<cert_file>*:*<key_file[#pwd]>* [:*<ca_cert_file>*]`,
    `--k8s-api-cert *<bt_file>* &#124; *<cert_file>*`:`*<key_file[#pwd]>* [:*<ca_cert_file>*]`
    | Use this option to authenticate with the Kubernetes API server. You can provide
    either a bearer token file^([a](ch10.xhtml#ch01fn13)) (`*<bt_file>*`) or a certificate
    and a private key (`*<cert_file>*`:`*<key_file>*`). If you use the latter, you
    can optionally use a passphrase (`*#pwd*`) to access the private key, if encrypted,
    and a CA certificate (`:*<ca_cert_file>*`) to verify the API server’s identity.
    Certificates and private keys must be provided in the PEM file format. As an alternative,
    you can use the `FALCO_K8S_API_CERT` environment variable, which accepts the same
    values allowed by this option. |'
  prefs: []
  type: TYPE_TB
- en: '| `--k8s-node *<node_name>*` | This option enables an important performance
    optimization for Kubernetes metadata enrichment: Falco will use the node name
    as a filter when requesting metadata of Pods from the API server, discarding unnecessary
    metadata coming from other nodes. You should always set this option. If you don’t,
    Falco will work, but may have performance issues on large clusters. |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch10.xhtml#ch01fn13-marker)) A bearer token file contains a string
    that authenticates the API request, one of the available [authentication strategies](https://oreil.ly/nh9Qk)
    for Kubernetes. |'
  prefs: []
  type: TYPE_TB
- en: Ruleset Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Table 10-4](#ruleset_command_line_options) shows the command-line options
    that can affect the ruleset. Falco will only use the configuration file to load
    rules if you don’t use any of these options.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-4\. Ruleset command-line options
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-D *<substring>*` | This option allows you to disable one or more rules
    that match `*<substring>*` in their names. You can specify it multiple times,
    but it is incompatible with the `-t` option (see below). |'
  prefs: []
  type: TYPE_TB
- en: '| `-r *<rules_file>*` | This option allows you to specify a file or a directory
    that Falco will use to load rules. In the case of a directory, Falco loads all
    the files it contains. You can specify `-r` multiple times to load multiple files
    or directories. If you use this option, Falco will ignore any rules files and
    directories specified in the configuration file (*/etc/falco/falco.yaml*). Thus,
    we do not recommend using it in production, except for debugging or in special
    cases. |'
  prefs: []
  type: TYPE_TB
- en: '| `-T *<tag>*` | This option disables any rules with the given `*<tag>*`.You
    can specify it multiple times, but it is incompatible with the `-t` option (see
    below). |'
  prefs: []
  type: TYPE_TB
- en: '| `-t *<tag>*` | This option enables only rules with the given `*<tag>*` and
    disables all others. You can specify it multiple times, but it is incompatible
    with the `-T` and `-D` options. |'
  prefs: []
  type: TYPE_TB
- en: Output Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We described most of the output formatting options (along with Falco output
    channel configuration) in [Chapter 8](ch08.xhtml#the_output_framework). However,
    two other command-line options (listed in [Table 10-5](#output_command_line_options))
    allow you to further customize Falco’s output behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-5\. Output command-line options
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-p*<output_format>*`, `--print*<output_format>*` | When enabled, this option
    appends additional information to the Falco notification’s output. A few flavors
    are available; for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-pc` or `-pcontainer` will add container information, such as the name and
    ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-pk` or `-pkubernetes` will add Kubernetes information, such as the namespace
    and Pod name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We recommend using `-pk` when using Falco in a Kubernetes context. |
  prefs: []
  type: TYPE_NORMAL
- en: '| `-U`, `--unbuffered` | This option disables full output buffering in the
    output channels (see [Chapter 8](ch08.xhtml#the_output_framework)). Use it only
    if you encounter issues when piping the Falco output into another process or script.
    Turning off output buffering may increase CPU usage. |'
  prefs: []
  type: TYPE_TB
- en: Other Settings for Debugging and Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The command-line options we have described so far are the ones you’re likely
    to use routinely while operating Falco. However, there’s another group of options
    (listed in [Table 10-6](#command_line_options_for_debugging_and)) for more occasional
    use, such as when you need information about your Falco installation or are trying
    to solve a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-6\. Command-line options for debugging and troubleshooting
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-e *<events_file>*` | Tells Falco to use the trace file (see [Chapter 3](ch03.xhtml#understanding_falcoapostr))
    specified by `*<events_file>*` as a data source instead of using a live event
    source. Once Falco consumes all the events in the file, it exits. Useful for testing
    and rule authoring. |'
  prefs: []
  type: TYPE_TB
- en: '| `-L` | Prints information about all loaded rules. |'
  prefs: []
  type: TYPE_TB
- en: '| `-l *<rule>*` | Prints the name and description of the rule with name `*<rule>*`,
    if loaded. |'
  prefs: []
  type: TYPE_TB
- en: '| `--list[=*<source>*]` | Lists all available condition fields, grouped by
    class (see [Chapter 6](ch06.xhtml#fields_and_filters)). If you also provide `*<source>*`,
    Falco will only list fields for that data source. The value of `*<source>*` can
    be `syscall` or any other data source provided by configured plugins. |'
  prefs: []
  type: TYPE_TB
- en: '| `--list-plugins` | Prints information about configured plugins. |'
  prefs: []
  type: TYPE_TB
- en: '| `-s *<stats_file>*` | Tells Falco to create the file `*<stats_file>*` and
    populate it with statistics while running. |'
  prefs: []
  type: TYPE_TB
- en: '| `--stats-interval *<msec>*` | Sets the refresh interval (in milliseconds)
    for updating the file created by `-s *<stats_file>*`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--support` | Prints details about the loaded Falco configuration and ruleset,
    and other useful information for troubleshooting that you can provide when asking
    for help (for example, when [opening an issue](https://oreil.ly/vkk2h) in the
    Falco GitHub repository). |'
  prefs: []
  type: TYPE_TB
- en: '| `-V`, `--validate *<rules_file>*` | Validates the content of the given `*<rules_file>*`.
    Useful for testing and rule authoring. |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | Enables verbose logging while Falco is running. This option does not
    affect the usual Falco notifications, but log messages may interleave. Useful
    for debugging. |'
  prefs: []
  type: TYPE_TB
- en: '| `--version` | Prints the version of Falco you are using. |'
  prefs: []
  type: TYPE_TB
- en: Configuration File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talk about Falco’s configuration file all throughout this book, and we’ve
    already covered its most important aspects. This section provides an overview
    and pointers to everything you may need.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration file is a YAML file, located at */etc/falco/falco.yaml* by
    default. In this file, you can configure:'
  prefs: []
  type: TYPE_NORMAL
- en: Rules files
  prefs: []
  type: TYPE_NORMAL
- en: The `rules_file` configuration node is the first one you’ll find in the configuration
    file. It allows you to choose which rules files Falco will load (more on these
    in the next section).
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs: []
  type: TYPE_NORMAL
- en: You can enable plugins and pass settings through the `load_plugins` and `plugins`
    configuration nodes (see [“Using Plugins”](#using_plugins)).
  prefs: []
  type: TYPE_NORMAL
- en: Output channels
  prefs: []
  type: TYPE_NORMAL
- en: Various configuration nodes allow you to configure formatting, logging, and
    output channel options. Refer to [Chapter 8](ch08.xhtml#the_output_framework)
    for more information on the output framework.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded servers
  prefs: []
  type: TYPE_NORMAL
- en: Falco provides an embedded web server that exposes a healthy endpoint.^([3](ch10.xhtml#ch01fn14))
    Container orchestrators and other applications can use this endpoint to check
    if Falco is up and running. The `webserver` configuration node allows you to enable
    and configure the server.
  prefs: []
  type: TYPE_NORMAL
- en: Falco also provides a gRPC server that you can enable and configure using the
    `grpc` configuration node (see Chapters [8](ch08.xhtml#the_output_framework) and
    [12](ch12.xhtml#consuming_falco_events)).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced fine-tuning settings (syscalls only)
  prefs: []
  type: TYPE_NORMAL
- en: Syscall instrumentation is likely the most complex feature Falco supports, so
    the configuration file also provides advanced settings for it. Those settings
    vary between versions of Falco, so we suggest you always refer to the online documentation
    and the inline comments included in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Notable options here include `syscall_event_drops`, which controls the detection
    of dropped events; `syscall_event_timeouts`, which helps detect the absence of
    events (an uncommon situation for syscalls); and `metadata_download`, which provides
    several options to fine-tune information downloads from the container orchestrator
    API server.
  prefs: []
  type: TYPE_NORMAL
- en: Ruleset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Falco comes with a set of predefined rules that you can use right out of the
    box. However, there are good reasons to customize your ruleset as much as possible.
    The default ruleset is designed to cover major attack vectors, but these rules
    cannot cover all possible cases. Attack mechanisms are always evolving, so your
    ruleset needs to keep up. If you want the highest level of security, you need
    a ruleset that’s tailored to your specific environment.
  prefs: []
  type: TYPE_NORMAL
- en: Additional benefits of customizing your rules include avoiding noisy false positives
    and optimizing Falco’s performance. You need to learn how to configure the ruleset
    correctly for all of these reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Loading Rules Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to tell Falco which rules files to load: through the command
    line or the configuration file. On the command line, you specify rules files using
    the `-r` flag. In the configuration file, you put rules files under the `rules_file`
    section. Recall that anything you set via the command line will take precedence
    over the configuration file. In production, we recommend loading rules files through
    the configuration file *only,* for this reason.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whichever method you choose, you can specify more than one rules file or directory.
    So, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It’s important to be aware that rules files are loaded and parsed in the order
    you specify. (When the entry is a directory, Falco will load every file in that
    directory in alphabetical order.) This makes it possible to customize rules, macros,
    and lists (see [Chapter 7](ch07.xhtml#falco_rules)) that are defined in one file
    in a subsequent file. The default Falco configuration is crafted to take advantage
    of this mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the `rules_file` section in the default configuration
    file that is shipped with Falco:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The main rules file, *falco_rules.yaml*, which contains rules for syscalls,
    is followed by a file named *falco_rules.local.yaml*. This file is where you should
    make changes to *falco_rules.yaml*. It is empty by default, and you can work in
    it without having to worry about polluting the main rules file. You can create
    other local files as you need.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, Falco provides one rules file per data source. You can use this approach
    or use multiple files, depending on your needs. Just keep in mind that the loading
    order matters. Also note that Falco will only load rules that match the configured
    data source; all others will be ignored. This means you don’t have to worry about
    manually removing or disabling rules files intended for other data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Tuning the Ruleset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most important aspect of tuning the ruleset is understanding what your use
    case needs to detect. That will allow you to decide which rules work for you and
    which do not. Avoiding unnecessary rules has the double benefit of increasing
    performance (Falco will use less CPU resources) and reducing false positives.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have done an initial skim, disable the rules you are not interested
    in (as described in [Chapter 7](ch07.xhtml#falco_rules)). We do not suggest removing
    them from the rules files unless you have created your own rules files from scratch.
    We also recommend periodically evaluating your ruleset, because the rules you
    need will change over time.
  prefs: []
  type: TYPE_NORMAL
- en: Next, look at the rules’ conditions. We’ll get into the details of writing Falco
    rules in [Chapter 13](ch13.xhtml#writing_falco_rules), but for now we’ll offer
    two general guidelines for evaluating Falco rules.
  prefs: []
  type: TYPE_NORMAL
- en: First, *avoid using too many exceptions in conditions:* for example, long chains
    of `and not (...) and not (...)`. Falco has no alternative but to sequentially
    check any exception present in the condition, which is an expensive task. Shorter
    conditions, whenever possible, can improve rule evaluation performance significantly.
  prefs: []
  type: TYPE_NORMAL
- en: The second guideline applies only to syscalls and holds that *a rule condition
    should always match just one event type or a small set of event types*. For example,
    `evt.type=connect` and `evt.type in (open,openat,openat2)` are both fine, but
    `evt.type!=execve` is not, because that filter would match all event types except
    one, which is too many. Falco indexes rules by event type as a way of optimizing
    its internal evaluation process; a rule matching too many event types would make
    this indexing inefficient. To help rule authors spot this issue, Falco emits warnings
    for rules that match all event types.
  prefs: []
  type: TYPE_NORMAL
- en: Using Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Falco comes configured to use syscalls. If you want to use a plugin
    as your data source instead, make sure that:'
  prefs: []
  type: TYPE_NORMAL
- en: The plugin file is already available in */usr/share/falco/plugins* (some plugins
    are shipped with Falco); if not, you’ll need to install it in that folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rules file for the plugin is available (we recommend placing it under */etc/falco*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have read the plugin’s documentation and understand which configuration
    parameters it needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, preparing Falco’s configuration file to use a plugin is a three-step
    process: select the correct rules file, configure the plugin, and enable it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this process, we will use the [CloudTrail plugin](https://oreil.ly/kgImn),
    which fetches log files containing [CloudTrail](https://oreil.ly/DUEDJ) events
    (details on using this plugin are provided in the next chapter). The CloudTrail
    plugin has a ruleset that requires another plugin with field extraction capability:
    the [JSON plugin](https://oreil.ly/Viiaj). Both plugins and the ruleset come bundled
    with Falco out of the box, so you should already have them if you’ve installed
    Falco. You’ll find the plugin files *libcloudtrail.so* and *libjson.so* under
    */usr/share/falco/plugins* and the rules file at */etc/falco/aws_cloudtrail_rules.yaml*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules files for plugins are not usually configured by default in the Falco
    configuration, so you’ll have to add an entry to `rules_file` to load the correct
    rules file (you can also remove unnecessary ones if you want to):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, under `plugins`, add the relevant entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `name` field must match the plugin name, and `library_path` must match the
    plugin file under */usr/share/falco/plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: In `init_config`, add the initialization parameters that Falco will pass to
    the plugin (refer to your plugin’s documentation for details). Most plugins accept
    either a plain-text or a JSON-formatted string. If the plugin supports a JSON
    string, you can still use the YAML syntax for `init_config` (as in the preceding
    example); Falco will automatically convert it for you.
  prefs: []
  type: TYPE_NORMAL
- en: The `open_params` setting is needed only for plugins with event sourcing capability
    (such as the CloudTrail plugin) and accepts only a plain-text string. It provides
    the parameters to open the stream of events (again, refer to your plugin’s documentation).
    Some plugins might not need this setting; in that case, you can just set it to
    an empty string (`""`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to enable your plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `load_plugins` setting accepts an array of plugin names. You can enable
    multiple plugins at the same time.^([4](ch10.xhtml#ch01fn15))
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Your plugins are now configured and ready to run in Falco.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve installed and configured Falco, you may need to change its configuration
    from time to time. There are two ways to tell Falco to load an updated configuration
    (that is, any modification to the configuration file or rules files).
  prefs: []
  type: TYPE_NORMAL
- en: The simplest method is just to modify the configuration and then restart Falco.
    If you installed Falco on the host using a package manager, you can do this with
    `systemctl restart falco`. If you are running Falco in a container, restart the
    container. If you’re running it in a Kubernetes cluster, you’ll need to redeploy
    Falco. Restarting Falco is the only way to upgrade to a newer version or change
    its command-line settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way to load an updated configuration is to *hot-reload*, or tell
    Falco to reload the configuration and rules files without stopping its running
    process. You can tell Falco to reload itself by sending a [SIGHUP signal](https://oreil.ly/6unav):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once Falco receives the signal, it will reload the configuration file and the
    configured rules files.
  prefs: []
  type: TYPE_NORMAL
- en: Since version 0.32.0, Falco can automatically hot-reload when the configuration
    file or a rules file is modified. In the configuration file, the `watch_config_files`
    setting controls this feature (enabled by default). So, in recent versions of
    Falco, you can just change the configuration file or rules files without the need
    to send a SIGHUP signal manually.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when Falco is restarting or hot reloading, it does not detect events.
    However, the amount of time required to hot-reload Falco is significantly shorter
    than the time it takes to restart the process, and is usually negligible.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter and the previous one provided in-depth coverage of installing,
    configuring, and running Falco in a production environment, for both the syscall
    instrumentation scenario and the scenario where you’re using a plugin as a data
    source. Now, it’s time to dig deeper into a concrete plugin case: using Falco
    for cloud security. In the next chapter, you will discover how to secure your
    cloud by taking advantage of the CloudTrail plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch10.xhtml#ch01fn11-marker)) There are several other ways to set environment
    variables when running a container in Docker; for more information, refer to Docker’s
    [online documentation](https://oreil.ly/91H3j).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch10.xhtml#ch01fn12-marker)) There are several alternatives for mounting
    files into a container. For details, see Docker’s [documentation](https://oreil.ly/4cdap).
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch10.xhtml#ch01fn14-marker)) Falco’s developers initially introduced the
    web server to support the Kubernetes audit log as a data source. Recently, they
    factored out this functionality into a plugin. Thus, the actual settings you can
    find under the `webserver` configuration node may vary significantly from one
    Falco version to another.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch10.xhtml#ch01fn15-marker)) The first versions of Falco with the plugin
    system do not allow you to enable multiple plugins with the event sourcing capability
    at the same time. However, you can enable multiple plugins with only the field
    extraction capability (see [Chapter 4](ch04.xhtml#data_source)).
  prefs: []
  type: TYPE_NORMAL
