- en: Chapter 19\. Working with JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 19.0 Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relational databases have proven to be effective for decades. They prevent duplicates
    and misses of data, and enable fast access to stored values. However, business
    continually invents new scenarios in which data needs to be more flexible than
    the relational model allows.
  prefs: []
  type: TYPE_NORMAL
- en: For example let’s consider a record for a user who can access subscription-only
    digital content and leave comments. For such a user, having only basic information
    - their name, email address, and password - is enough to get started. However,
    once the users start exploring more options (for example, requiring delivery),
    they may need their mailing address to be stored. Mailing address could be different
    from the billing address. The user may want to add a social network account or
    few of them.
  prefs: []
  type: TYPE_NORMAL
- en: One way of storing flexible data in the relational database would be to store
    additional pieces of data in the referenced table that shares details for each
    user. We discuss this technique in [Recipe 16.5](ch16.xhtml#nch-multi-multi-one-to-many)
    and [Recipe 16.6](ch16.xhtml#nch-multi-multi-many-to-many).
  prefs: []
  type: TYPE_NORMAL
- en: However, this technique may be not the best in the following situations.
  prefs: []
  type: TYPE_NORMAL
- en: When only few items in the main table have details in the referenced table
  prefs: []
  type: TYPE_NORMAL
- en: If you still need to know about these details, when you query required fields
    in the main table you will need to join it with the referencing table every time.
    This will complicate queries and affect performance.
  prefs: []
  type: TYPE_NORMAL
- en: When most of the specific details could be missed
  prefs: []
  type: TYPE_NORMAL
- en: Details such as a user’s district, or building number are only necessary for
    users who requested physical delivery of items. For everyone else, these fields
    could be empty, still you need to reserve space in the database for those empty
    fields. This adds significant cost once the database grows.
  prefs: []
  type: TYPE_NORMAL
- en: When you may not know which additional data you need in future
  prefs: []
  type: TYPE_NORMAL
- en: Business may require adding additional details to the data collections. Appending
    such details in the relational model means creating new tables and columns to
    the existent table. This requires schema re-design and maintenance windows to
    implement the changes. This is not always possible and space/cost effective.
  prefs: []
  type: TYPE_NORMAL
- en: To resolve these issues flexible data structures, such as JSON, are the best
    fit. MySQL always allowed to store JSON values in text fields using string data
    types. Since version 5.7 MySQL also supports JSON data type and functions that
    allow to manipulate JSON values in effective manner. MySQL combines advantages
    of both SQL and NoSQL worlds.
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 Choosing the Right Data Type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to store JSON values and do not know which data type to choose.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the data type JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JSON data can be stored in any text or binary column. JSON functions will work
    without issues but the special data type JSON has numerous advantages, particularly:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimized performance
  prefs: []
  type: TYPE_NORMAL
- en: JSON data is converted into a format that allows quick lookup for values in
    the document.
  prefs: []
  type: TYPE_NORMAL
- en: Partial updates
  prefs: []
  type: TYPE_NORMAL
- en: Updates to JSON elements happen in place, without need to rewrite full document.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic data validation
  prefs: []
  type: TYPE_NORMAL
- en: When a value is inserted into column of JSON data type, MySQL automatically
    validates it and produces an error if the document is invalid JSON.
  prefs: []
  type: TYPE_NORMAL
- en: The following will create a table with JSON column `author`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For additional information about data type JSON, see [The JSON Data Type](https://dev.mysql.com/doc/refman/8.0/en/json.html)
    in the MySQL User Reference Manual.
  prefs: []
  type: TYPE_NORMAL
- en: 19.2 Inserting JSON values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to store JSON documents in MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User regular `INSERT` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSON is not different from other data types. Use regular `INSERT` statements
    to add your documents into the tables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]book_authors[PRE2]'
  prefs: []
  type: TYPE_NORMAL
- en: 19.3 Validating JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to ensure that a given string is a valid JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the JSON datatype to perform automatic validation. Use the function `JSON_VALID`
    to validate strings. Use the JSON Schema to define schema for the JSON documents.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Function `JSON_VALID` checks if given document is valid JSON.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If a column defined as JSON MySQL will not allow you to insert invalid values.
    Additionally, error message will locate the first error, so you can fix it faster.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you want to not only validate a JSON document, but also want it to satisfy
    a schema, use the function `JSON_SCHEMA_VALID`. This function supports JSON schema
    as described in [Draft 4 of the JSON Schema specification](https://json-schema.org/specification-links.html#draft-4).
    To use it you need to define a schema first and compare the JSON value with it.
  prefs: []
  type: TYPE_NORMAL
- en: The function `JSON_SCHEMA_VALIDATION_REPORT` not only checks a given document
    against the schema but also reports which particular part of the schema is violated.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the table `book_authors` we may define a schema that require having `name`
    and `lastname` as required fields and array of book titles as optional element
    `books`. We can use following code for the schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_nch-json-json-validation-id_co)'
  prefs: []
  type: TYPE_NORMAL
- en: Unique identifier of the schema
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_nch-json-json-validation-schema_co)'
  prefs: []
  type: TYPE_NORMAL
- en: JSON schema specification. Should always be `http://json-schema.org/draft-04/schema#`
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_nch-json-json-validation-desc_co)'
  prefs: []
  type: TYPE_NORMAL
- en: Description of the schema
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_nch-json-json-validation-type_co)'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the root element
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_nch-json-json-validation-props_co)'
  prefs: []
  type: TYPE_NORMAL
- en: List of properies. Each of properties should be described. They shoud have a
    defined type and can specify other validations, such as minimum and maximum.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_nch-json-json-validation-req_co)'
  prefs: []
  type: TYPE_NORMAL
- en: List of required fields
  prefs: []
  type: TYPE_NORMAL
- en: If we assign just defined schema to a variable, say, `@schema`, we can check
    JSON data against this schema.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this case validation is failed, because the document contains only `name`
    field and does not contain another required field `lastname`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this case document is valid, because it contains all required fields. Field
    `books` is optional and not required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case document is not valid, because member `books` has type `string`
    and not `array` as defined in the schema.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This document fixes type error for the element `books`, thus valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'These documents are also valid, because there is no requirement for the property
    `vehicles`: it may exist, may not exist and can be of any type.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to automatically validate JSON field in a table against a defined
    schema use `CHECK` constraints.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 19.4 Formatting JSON Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to print JSON nicely formatted.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use fuction `JSON_PRETTY`.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default JSON is printed as a long string that could be hard to read. If you
    want MySQL to print it in human-readable format use function `JSON_PRETTY`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 19.5 Extracting Values from JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to extract values from the JSON document.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the function `JSON_EXTRACT`, or the operators `->` and `->>`.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSON by itself is no use if you cannot extract values from the documents. JSON
    in MySQL supports the JSON path that could be used to point to the specific element
    in JSON. The root element of the JSON document is represented by a `$` sign. Object
    members are accessed by the operator `.` and array members are accessed by an
    index, enclosed in the square brackets. Indexes start from zero. You can refer
    multiple array elements with keyword `to` (e.g. `$.[3 to 5]`. The `last` keyword
    is a synonym of the last element in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The wildcard `*` represents either all values of all object members if used
    after a dot: `.*` or all array elements if enclosed in the square brackets: `[*]`.'
  prefs: []
  type: TYPE_NORMAL
- en: Expression `[prefix]**suffix` represents all paths, beginning with the `prefix`
    and ending with the `suffix`. Note that while the `suffix` part is required, `prefix`
    is optional. In other words, JSON Path expression should not end with double asterisk
    sign.
  prefs: []
  type: TYPE_NORMAL
- en: To access JSON elements use function `JSON_EXTRACT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to select names of the authors, use following SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To remove quotes from the values use function `JSON_UNQUOTE`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Operator `->` is an alias of the function `JSON_EXTRACT`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Operator `->>` is an alias of `JSON_UNQUOTE(JSON_EXTRACT(...))`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To extract the first and the last books by the authors use array indexes `0`
    and `last` correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]First` `Book[PRE18],`'
  prefs: []
  type: TYPE_NORMAL
- en: -> `author``-``>``>``'$.books[last]'` `AS` `` ` [PRE19] ` `` `FROM` `book_authors``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: Paul DuBois'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First Book: Software Portability with imake: Practical Software Engineering'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last Book: MySQL (Developer''s Library)'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 2. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: Alkin Tezuysal'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First Book: MySQL Cookbook'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last Book: MySQL Cookbook'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 3. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: Sveta Smirnova'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First Book: MySQL Troubleshooting'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last Book: MySQL Cookbook'
  prefs: []
  type: TYPE_NORMAL
- en: 3 rows in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `author``-``>``'$.*'` `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'`
    `=` `'Sveta'``;`
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------------------------------------------------------------+ |
    author->'$.*'                                                         |
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------------------------------------------------------------+ |
    [3, "Sveta", ["MySQL Troubleshooting", "MySQL Cookbook"], "Smirnova"] |
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------------------------------------------------------------+ 1
    row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `author``-``>``>``'$.name'` `AS` `author` `FROM` `book_authors`
  prefs: []
  type: TYPE_NORMAL
- en: -> `WHERE` `JSON_SEARCH``(``author``,` `'one'``,` `'MySQL Cookbook'``)``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: +--------+ | author |
  prefs: []
  type: TYPE_NORMAL
- en: +--------+ | Paul   |
  prefs: []
  type: TYPE_NORMAL
- en: '| Alkin  |'
  prefs: []
  type: TYPE_TB
- en: '| Sveta  |'
  prefs: []
  type: TYPE_TB
- en: +--------+ 3 rows in set, 1 warning (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `author``-``>``>``'$.name'` `AS` `author``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `JSON_SEARCH``(``author``,` `'all'``,` `'MySQL%'``)` `AS` `books`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `FROM` `book_authors``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: Paul'
  prefs: []
  type: TYPE_NORMAL
- en: 'books: ["$.books[2]", "$.books[3]", "$.books[4]", "$.books[5]", "$.books[7]"]'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 2. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: Alkin'
  prefs: []
  type: TYPE_NORMAL
- en: 'books: "$.books[0]"'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 3. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: Sveta'
  prefs: []
  type: TYPE_NORMAL
- en: 'books: ["$.books[0]", "$.books[1]"]'
  prefs: []
  type: TYPE_NORMAL
- en: 3 rows in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `author``-``>``>``'$.name'` `AS` `author``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `JSON_EXTRACT``(``author``,`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `JSON_UNQUOTE``(``JSON_SEARCH``(``author``,` `'one'``,` `'MySQL%'``)``)``)`
    `AS` `book`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `FROM` `book_authors``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: +--------+-----------------------------------+ | author | book                              |
  prefs: []
  type: TYPE_NORMAL
- en: +--------+-----------------------------------+ | Paul   | "MySQL Certification
    Study Guide" |
  prefs: []
  type: TYPE_NORMAL
- en: '| Alkin  | "MySQL Cookbook"                  |'
  prefs: []
  type: TYPE_TB
- en: '| Sveta  | "MySQL Troubleshooting"           |'
  prefs: []
  type: TYPE_TB
- en: +--------+-----------------------------------+ 3 rows in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: UPDATE book_authors SET author = JSON_INSERT(author, '$.work', 'Percona')
  prefs: []
  type: TYPE_NORMAL
- en: WHERE author->>'$.name' IN ('Sveta', 'Alkin');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: UPDATE book_authors SET author = JSON_ARRAY_APPEND(author, '$.books',
  prefs: []
  type: TYPE_NORMAL
- en: '''MySQL Performance Schema in Action'') WHERE author->>''$.name'' = ''Sveta'';'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``author``)` `FROM` `book_authors`
  prefs: []
  type: TYPE_NORMAL
- en: -> `WHERE` `author``-``>``>``'$.name'` `=` `'Sveta'``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_PRETTY(author): {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Sveta",'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": "Percona",'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Performance Schema in Action"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Smirnova"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: UPDATE book_authors SET author = JSON_ARRAY_INSERT(author, '$.books[0]',
  prefs: []
  type: TYPE_NORMAL
- en: '''MySQL for Absolute Beginners'') WHERE author->>''$.name'' = ''Alkin'';'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``author``)`
  prefs: []
  type: TYPE_NORMAL
- en: -> `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'` `=` `'Alkin'``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_PRETTY(author): {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 2,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Alkin",'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": "Percona",'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL for Absolute Beginners",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Tezuysal"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: UPDATE book_authors SET author = JSON_REPLACE(author, '$.work', 'PlanetScale')
  prefs: []
  type: TYPE_NORMAL
- en: WHERE author->>'$.name' = 'Alkin';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `UPDATE` `book_authors` `SET` `author` `=` `JSON_REPLACE``(``author``,`
    `'$.work'``,` `'Oracle'``)`
  prefs: []
  type: TYPE_NORMAL
- en: -> `WHERE` `author``-``>``>``'$.name'` `=` `'Paul'``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 0 rows affected (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 0  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: mysql> `SELECT` `author``-``>``>``'$.work'` `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'`
    `=` `'Paul'``;`
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ | author->>'$.work' |
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ | NULL              |
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `UPDATE` `book_authors` `SET` `author` `=` `JSON_SET``(``author``,` `'$.work'``,`
    `'MySQL'``)`
  prefs: []
  type: TYPE_NORMAL
- en: -> `WHERE` `author``-``>``>``'$.name'` `=` `'Paul'``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 1 row affected (0,01 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: mysql> `SELECT` `author``-``>``>``'$.work'` `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'`
    `=` `'Paul'``;`
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ | author->>'$.work' |
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ | MySQL             |
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: mysql> `UPDATE` `book_authors` `SET` `author` `=` `JSON_SET``(``author``,` `'$.work'``,`
    `'Oracle'``)`
  prefs: []
  type: TYPE_NORMAL
- en: -> `WHERE` `author``-``>``>``'$.name'` `=` `'Paul'``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 1 row affected (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: mysql> `SELECT` `author``-``>``>``'$.work'` `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'`
    `=` `'Paul'``;`
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ | author->>'$.work' |
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ | Oracle            |
  prefs: []
  type: TYPE_NORMAL
- en: +-------------------+ 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: UPDATE book_authors SET author = JSON_REMOVE(author, '$.books[0]')
  prefs: []
  type: TYPE_NORMAL
- en: WHERE author->>'$.name' = 'Alkin';
  prefs: []
  type: TYPE_NORMAL
- en: UPDATE book_authors SET author = JSON_REMOVE(author, '$.books[last]')
  prefs: []
  type: TYPE_NORMAL
- en: WHERE author->>'$.name' = 'Sveta';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: SELECT author INTO @paul FROM book_authors WHERE author->>'$.name'='Paul';
  prefs: []
  type: TYPE_NORMAL
- en: SELECT author INTO @sveta FROM book_authors WHERE author->>'$.name'='Sveta';
  prefs: []
  type: TYPE_NORMAL
- en: SELECT author INTO @alkin FROM book_authors WHERE author->>'$.name'='Alkin';
  prefs: []
  type: TYPE_NORMAL
- en: SELECT author->>'$.books' INTO @sveta_books FROM book_authors
  prefs: []
  type: TYPE_NORMAL
- en: WHERE author->>'$.name'='Sveta';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PRESERVE``(``@``sveta``,`
  prefs: []
  type: TYPE_NORMAL
- en: '-> `''{"places lived": ["Russia", "Turkey"]}''``)``)``\``G`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_PRETTY(JSON_MERGE_PRESERVE(@sveta, ''{"places lived": ["Russia", "Turkey"]}'')):
    {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Sveta",'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": "Percona",'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Smirnova",'
  prefs: []
  type: TYPE_NORMAL
- en: '"places lived": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Russia",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Turkey"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PRESERVE``(``@``sveta``,`
  prefs: []
  type: TYPE_NORMAL
- en: '-> `''{"books": ["MySQL Performance Schema in Action"]}''``)``)``\``G`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: JSON_PRETTY(JSON_MERGE_PRESERVE(@sveta, ↩
  prefs: []
  type: TYPE_NORMAL
- en: '''{"books": ["MySQL Performance Schema in Action"]}'')): {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Sveta",'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": "Percona",'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Performance Schema in Action"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Smirnova"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PRESERVE``(``@``paul``,` `@``sveta``,`
    `@``alkin``)``)` `AS` `authors``\``G`
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'authors: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": ['
  prefs: []
  type: TYPE_NORMAL
- en: 1,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Paul",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Sveta",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Alkin"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Oracle",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Percona",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"PlanetScale"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Software Portability with imake: Practical Software Engineering",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Mysql: The Definitive Guide to Using, Programming, ↩'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and Administering Mysql 4 (Developer's Library)",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Certification Study Guide",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL (OTHER NEW RIDERS)",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL 5.0 Certification Study Guide",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Using csh & tcsh: Type Less, Accomplish More (Nutshell Handbooks)",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL (Developer''s Library)",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"DuBois",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Smirnova",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Tezuysal"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PATCH``(``@``paul``,` `@``sveta``,`
    `@``alkin``)``)` `AS` `authors``\``G`
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'authors: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 2,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Alkin",'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": "PlanetScale",'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Cookbook"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Tezuysal"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PATCH``(``@``sveta``,` `''{"work":
    null}''``)``)``\``G`'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_PRETTY(JSON_MERGE_PATCH(@sveta, ''{"work": null}'')): {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Sveta",'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Smirnova"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PRESERVE``(``@``sveta_books``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `'"MySQL Performance Schema in Action"'``)``)` `AS` `'Books by Sveta'``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'Books by Sveta: ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting",'
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Cookbook",'
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Performance Schema in Action"'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_MERGE_PATCH``(``@``sveta_books``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `'"MySQL Performance Schema in Action"'``)``)` `AS` `'Books by Sveta'``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: +--------------------------------------+ | Books by Sveta                       |
  prefs: []
  type: TYPE_NORMAL
- en: +--------------------------------------+ | "MySQL Performance Schema in Action"
    |
  prefs: []
  type: TYPE_NORMAL
- en: +--------------------------------------+ 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(`
  prefs: []
  type: TYPE_NORMAL
- en: -> `JSON_OBJECT``(``"string"``,` `"Some String"``,` `"number"``,` `42``,` `"null"``,`
    `NULL``)``)` `AS` `my_object``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'my_object: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"null": null,'
  prefs: []
  type: TYPE_NORMAL
- en: '"number": 42,'
  prefs: []
  type: TYPE_NORMAL
- en: '"string": "Some String"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_ARRAY``(``"one"``,` `"two"``,` `"three"``,`
    `4``,` `5``)``)` `AS` `my_array``\``G`
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'my_array: ['
  prefs: []
  type: TYPE_NORMAL
- en: '"one",'
  prefs: []
  type: TYPE_NORMAL
- en: '"two",'
  prefs: []
  type: TYPE_NORMAL
- en: '"three",'
  prefs: []
  type: TYPE_NORMAL
- en: 4,
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_OBJECT``(``"Example"``,` `"Nesting object
    and array"``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `"Human"``,` `JSON_OBJECT``(``"name"``,` `"Sveta"``,` `"lastname"``,` `"Smirnova"``)``,`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `"Numbers"``,` `JSON_ARRAY``(``"one"``,` `"two"``,` `"three"``)``)``)` `AS`
    `my_object``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'my_object: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Human": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Sveta",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"lastname": "Smirnova"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Example": "Nesting object and array",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Numbers": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"one",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"two",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"three"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_OBJECT``(``'Movie'``,` `movie``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `'Starred'``,` `JSON_ARRAYAGG``(``actor``)``)``)` `AS` `starred`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `FROM` `movies_actors` `GROUP` `BY` `movie``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'starred: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Movie": "Kingdom of Heaven",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Starred": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Liam Neeson",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Orlando Bloom"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 2. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'starred: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Movie": "Red",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Starred": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Helen Mirren",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Bruce Willis"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 3. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'starred: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Movie": "The Fellowship of the Ring",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Starred": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Ian McKellen",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Ian Holm",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Orlando Bloom",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Elijah Wood"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 4. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'starred: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Movie": "The Fifth Element",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Starred": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Bruce Willis",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Gary Oldman",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Ian Holm"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 5. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'starred: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Movie": "The Phantom Menace",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Starred": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Ewan McGregor",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Liam Neeson"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '*************************** 6. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'starred: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Movie": "Unknown",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Starred": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"Diane Kruger",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Liam Neeson"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 6 rows in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_PRETTY``(``JSON_OBJECTAGG``(``name``,` `website``)``)`
    `AS` `websites`
  prefs: []
  type: TYPE_NORMAL
- en: -> `FROM` `book_vendor``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'websites: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Amazon.com": "www.amazon.com",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Barnes & Noble": "www.barnesandnoble.com",'
  prefs: []
  type: TYPE_NORMAL
- en: '"O''Reilly Media": "www.oreilly.com"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"null": null,'
  prefs: []
  type: TYPE_NORMAL
- en: '"number": 42,'
  prefs: []
  type: TYPE_NORMAL
- en: '"string": "Some String"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `*`  ![1](Images/1.png)
  prefs: []
  type: TYPE_NORMAL
- en: -> `FROM` `JSON_TABLE``(` ![2](Images/2.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '-> `''{"null": null, "number": 42, "string": "Some String"}''``,`  ![3](Images/3.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `'$'`  ![4](Images/4.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `COLUMNS``(`  ![5](Images/5.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `number` `INT` `PATH` `'$.number'``,`  ![6](Images/6.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `string` `VARCHAR``(``255``)` `PATH` `'$.string'` `ERROR` `ON` `ERROR` ![7](Images/7.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `)``)` `AS` `jt``;` ![8](Images/8.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: +--------+-------------+ | number | string      |
  prefs: []
  type: TYPE_NORMAL
- en: +--------+-------------+ |     42 | Some String |
  prefs: []
  type: TYPE_NORMAL
- en: +--------+-------------+ 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: SELECT * FROM mytable, JSON_TABLE(mytable.mycolumn ...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `jt``.``*` `FROM` `book_authors` `ba``,`  ![1](Images/1.png)
  prefs: []
  type: TYPE_NORMAL
- en: -> `JSON_TABLE``(``ba``.``author``,`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `'$'` `COLUMNS` `(`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `name` `VARCHAR``(``255``)` `PATH` `'$.name'``,`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `lastname` `VARCHAR``(``255``)` `PATH` `'$.lastname'``,`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `NESTED` `PATH` `'$.books[*]'` `COLUMNS` `(` ![2](Images/2.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `book` `VARCHAR``(``255``)` `PATH` `'$'` `)` ![3](Images/3.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `)``)` `AS` `jt``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: +-------+----------+-----------------------------------------------------------------+
    | name  | lastname | book                                                            |
  prefs: []
  type: TYPE_NORMAL
- en: '+-------+----------+-----------------------------------------------------------------+
    | Paul  | DuBois   | Software Portability with imake: Practical Software Engineering
    |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Paul  | DuBois   | Mysql: The Definitive Guide to Using, Programming, ↩'
  prefs: []
  type: TYPE_NORMAL
- en: and Administering Mysql 4 (Developer's Library)                 |
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Paul  | DuBois   | MySQL Certification Study Guide                                 |'
  prefs: []
  type: TYPE_TB
- en: '| Paul  | DuBois   | MySQL (OTHER NEW RIDERS)                                        |'
  prefs: []
  type: TYPE_TB
- en: '| Paul  | DuBois   | MySQL Cookbook                                                  |'
  prefs: []
  type: TYPE_TB
- en: '| Paul  | DuBois   | MySQL 5.0 Certification Study Guide                             |'
  prefs: []
  type: TYPE_TB
- en: '| Paul  | DuBois   | Using csh & tcsh: Type Less, Accomplish More ↩'
  prefs: []
  type: TYPE_NORMAL
- en: (Nutshell Handbooks)                                            |
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Paul  | DuBois   | MySQL (Developer''s Library)                                     |'
  prefs: []
  type: TYPE_TB
- en: '| Alkin | Tezuysal | MySQL Cookbook                                                  |'
  prefs: []
  type: TYPE_TB
- en: '| Sveta | Smirnova | MySQL Troubleshooting                                           |'
  prefs: []
  type: TYPE_TB
- en: '| Sveta | Smirnova | MySQL Cookbook                                                  |'
  prefs: []
  type: TYPE_TB
- en: +-------+----------+-----------------------------------------------------------------+
    11 rows in set (0,01 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `CONCAT``(``author``-``>``>``'$.name'``,` `' '``,` `author``-``>``>``'$.lastname'``)`
    `AS` `'author'``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `JSON_LENGTH``(``author``-``>``>``'$.books'``)` `AS` `'Number of Books'`
    `FROM` `book_authors``;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: +----------------+-----------------+ | author         | Number of Books |
  prefs: []
  type: TYPE_NORMAL
- en: +----------------+-----------------+ | Paul DuBois    |               8 |
  prefs: []
  type: TYPE_NORMAL
- en: '| Alkin Tezuysal |               1 |'
  prefs: []
  type: TYPE_TB
- en: '| Sveta Smirnova |               2 |'
  prefs: []
  type: TYPE_TB
- en: +----------------+-----------------+ 3 rows in set (0,01 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_DEPTH``(``author``)` `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'`
    `=` `'Sveta'``;`
  prefs: []
  type: TYPE_NORMAL
- en: +--------------------+ | JSON_DEPTH(author) |
  prefs: []
  type: TYPE_NORMAL
- en: +--------------------+ |                  3 |
  prefs: []
  type: TYPE_NORMAL
- en: +--------------------+ 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '{ ![1](Images/1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Sveta",'
  prefs: []
  type: TYPE_NORMAL
- en: '"work": "Percona", ![2](Images/2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '"books": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"MySQL Troubleshooting", ![3](Images/3.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"MySQL Cookbook"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"lastname": "Smirnova"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_STORAGE_SIZE``(``author``)` `FROM` `book_authors``;`
  prefs: []
  type: TYPE_NORMAL
- en: +---------------------------+ | JSON_STORAGE_SIZE(author) |
  prefs: []
  type: TYPE_NORMAL
- en: +---------------------------+ |                       475 |
  prefs: []
  type: TYPE_NORMAL
- en: '|                       144 |'
  prefs: []
  type: TYPE_TB
- en: '|                       171 |'
  prefs: []
  type: TYPE_TB
- en: +---------------------------+ 3 rows in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: mysql> `SELECT` `JSON_TYPE``(``author``)``,` `JSON_TYPE``(``author``-``>``'$.id'``)``,`
  prefs: []
  type: TYPE_NORMAL
- en: -> `JSON_TYPE``(``author``-``>``'$.name'``)``,` `JSON_TYPE``(``author``-``>``'$.books'``)`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `FROM` `book_authors` `WHERE` `author``-``>``>``'$.name'` `=` `'Sveta'``\``G`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*************************** 1. row ***************************'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_TYPE(author): OBJECT'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'JSON_TYPE(author->''$.id''): INTEGER'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_TYPE(author->''$.name''): STRING'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON_TYPE(author->''$.books''): ARRAY'
  prefs: []
  type: TYPE_NORMAL
- en: 1 row in set (0,00 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: CREATE TABLE `MyCollection` (
  prefs: []
  type: TYPE_NORMAL
- en: '`doc` json DEFAULT NULL,'
  prefs: []
  type: TYPE_NORMAL
- en: '`_id` varbinary(32) GENERATED ALWAYS AS (json_unquote('
  prefs: []
  type: TYPE_NORMAL
- en: json_extract(`doc`,_utf8mb4'$._id'))) STORED NOT NULL,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`_json_schema` json GENERATED ALWAYS AS (_utf8mb4''{"type":"object"}'') VIRTUAL,'
  prefs: []
  type: TYPE_NORMAL
- en: PRIMARY KEY (`_id`),
  prefs: []
  type: TYPE_NORMAL
- en: CONSTRAINT `$val_strict_2190F99D7C6BE98E2C1EFE4E110B46A3D43C9751`
  prefs: []
  type: TYPE_NORMAL
- en: CHECK (json_schema_valid(`_json_schema`,`doc`)) /*!80016 NOT ENFORCED */
  prefs: []
  type: TYPE_NORMAL
- en: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `session.getDefaultSchema().createCollection('MyCollection')`
  prefs: []
  type: TYPE_NORMAL
- en: <Collection:MyCollection>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `MyCollection = session.getDefaultSchema().`
  prefs: []
  type: TYPE_NORMAL
- en: -> `getCollection('MyCollection')`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <Collection:MyCollection>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL  cookbook  JS > `MyCollection.add({"document": "one"}).`'
  prefs: []
  type: TYPE_NORMAL
- en: '-> `add([{"document": "two"}, {"document": "three"}]).`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '-> `add(mysqlx.expr(''{"document": "four"}''))`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ->
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 4 items affected (0.0083 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Records: 4  Duplicates: 0  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `MyCollection.find()`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000013",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "two"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000014",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "three"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000015",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "four"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 4 documents in set (0.0007 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `MyCollection.find("document LIKE 't%'")`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000013",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "two"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000014",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "three"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 2 documents in set (0.0009 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `MyCollection.find("document LIKE 't%'").`
  prefs: []
  type: TYPE_NORMAL
- en: '-> `fields(mysqlx.expr(''{"Document": upper(document)}''))`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ->
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Document": "TWO"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Document": "THREE"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 2 documents in set (0.0009 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `limbs = session.getDefaultSchema().getCollection('CollectionLimbs')`
  prefs: []
  type: TYPE_NORMAL
- en: <Collection:CollectionLimbs>
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `limbs.find().fields('arms', 'COUNT(thing)').groupBy('arms')`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"arms": 2,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"COUNT(thing)": 3'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"arms": 0,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"COUNT(thing)": 5'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"arms": 10,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"COUNT(thing)": 1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"arms": 1,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"COUNT(thing)": 1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"arms": null,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"COUNT(thing)": 1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 5 documents in set (0.0010 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `limbs.find().fields('arms', 'COUNT(thing)').`
  prefs: []
  type: TYPE_NORMAL
- en: -> `groupBy('arms').having('MIN(legs) > 0')`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"arms": 2,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"COUNT(thing)": 3'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0006 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `limbs.find().sort('legs DESC').limit(3)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab75000000000000001a",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"arms": 0,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"legs": 99,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"thing": "centipede"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000017",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"arms": 0,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"legs": 6,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"thing": "insect"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab75000000000000001b",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"arms": 0,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"legs": 4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"thing": "table"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 3 documents in set (0.0006 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `limbs.find('legs = :legs').bind('legs', 4)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab75000000000000001b",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"arms": 0,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"legs": 4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"thing": "table"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab75000000000000001c",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"arms": 2,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"legs": 4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"thing": "armchair"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 2 documents in set (0.0008 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `limbs.find('legs = :legs and arms = :arms').`
  prefs: []
  type: TYPE_NORMAL
- en: -> `bind('legs', 4).bind('arms', 2)`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab75000000000000001c",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"arms": 2,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"legs": 4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"thing": "armchair"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0005 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)` ![1](Images/1.png)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0005 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``modify``(``'document = "one"'``)``.`
  prefs: []
  type: TYPE_NORMAL
- en: -> `set``(``'array'``,` `[``2``,` `3``,` `4``]``)`![2](Images/2.png)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 1 item affected (0.0054 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"array": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 3,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '4'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0005 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``modify``(``'document = "one"'``)``.``arrayAppend``(``'array'``,`
    `5``)`![3](Images/3.png)
  prefs: []
  type: TYPE_NORMAL
- en: Query OK, 1 item affected (0.0073 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"array": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 3,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 4,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0007 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``modify``(``'document = "one"'``)``.`
  prefs: []
  type: TYPE_NORMAL
- en: -> `arrayInsert``(``'array[0]'``,` `1``)`![4](Images/4.png)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 1 item affected (0.0072 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"array": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 2,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 3,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 4,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0008 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``modify``(``'document = "one"'``)``.``arrayDelete``(``'array[2]'``)`![5](Images/5.png)
  prefs: []
  type: TYPE_NORMAL
- en: Query OK, 1 item affected (0.0059 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"array": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 2,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 4,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0009 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``modify``(``'document = "one"'``)``.``unset``(``'array'``)`![6](Images/6.png)
  prefs: []
  type: TYPE_NORMAL
- en: Query OK, 1 item affected (0.0080 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0007 sec)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``modify``(``'document = "one"'``)``.`
  prefs: []
  type: TYPE_NORMAL
- en: -> `patch``(``{``'number'``:` `42``,` `'array'``:` `[``1``,``2``,``3``]``}``)``.`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: -> `patch``(``{``'array'``:` `[``4``,``5``]``}``)`![7](Images/7.png)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Query OK, 1 item affected (0.0063 sec)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rows matched: 1  Changed: 1  Warnings: 0'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL  cookbook  JS > `MyCollection``.``find``(``'document = "one"'``)`
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"_id": "000060d5ab750000000000000012",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"array": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 4,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"number": 42,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"document": "one"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 document in set (0.0007 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: MyCollection.remove('document = :number').bind('number', 'one')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: session.getSchema('cookbook').dropCollection('MyCollection')
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For additional information about X DevAPI, see [X DevAPI Reference Manual](https://dev.mysql.com/doc/dev/mysqlsh-api-javascript/8.0/group___x_dev_a_p_i.html).
  prefs: []
  type: TYPE_NORMAL
