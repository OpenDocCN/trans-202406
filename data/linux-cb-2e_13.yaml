- en: Chapter 13\. Secure Remote Access with OpenVPN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Virtual Private Network (OpenVPN) creates a TLS/SSL encrypted connection
    between two different networks at separate physical locations, like a branch office
    linked to a main office, or a remote worker logging in to the company network
    from home. This connection is called an encrypted *tunnel*, a secure transport
    protecting your connection from the big bad internet. OpenVPN is dependent on
    OpenSSL, so having OpenSSL knowledge is helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are already familiar with OpenVPN, you can probably skip ahead to Recipes
    [13.5](#rec-create-pki), [13.6](#rec-customize-rsa), and [13.7](#rec-vpn-configs)
    to review creating your encryption certificates and client and server configuration.
    If you are new to VPNs, try each recipe in sequence. Take your time; VPNs are
    complicated and finicky. Do a lot of testing before deploying to production systems.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A VPN is a secure extension of your network that makes all the same services
    available to remote workers that local users have, so the remote users’ experience
    is the same as for users physically present at your location. They can access
    your local web servers, email, file shares, chat servers, video conferencing apps,
    internal wikis, everything that you have walled off from the outside world and
    is available only to users inside your network. A VPN is not like SSH, which connects
    individual computers. A VPN links etworks and individual hosts to networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn how to set up an OpenVPN server, configure clients,
    and create and manage a proper public key infrastructure (PKI) for authentication
    and encryption. Your server will authenticate and protect all manner of clients:
    Linux, macOS, Windows PCs, Android, and iOS devices.'
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN is an open source project, with both free downloads and commercial options.
    The free-of-cost server and client is the *openvpn* package, which is available
    on all Linux distros and downloads at [OpenVPN Community Downloads](https://oreil.ly/vwEAs).
    Commercial options include OpenVPN Access Server, which is a premises server with
    additional management tools and cloud options. Hosted personal plans require installing
    only the client and provide access to a global network of OpenVPN servers.
  prefs: []
  type: TYPE_NORMAL
- en: A true VPN is strong because it trusts no one and requires authenticated endpoints,
    where server and client authenticate to each other. Most commercial TLS/SSL VPNs
    do not do this, but instead trust all clients, like shopping sites do. This is
    more flexible and allows users to log in from anywhere, using any device. It is
    convenient not to have to install and configure client software and copy encryption
    keys. But for your internal network that is shortsighted—the last thing you need
    is users logging in from random PCs or smartphones infected with keyloggers and
    spyware, and then given a warm welcome into your LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate Authority
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A certificate authority (CA) is the most important part of running an OpenVPN
    server. A CA issues digital certificates and certifies ownership of public keys.
    Click the little padlock in a web browser to see the public certificate for a
    website, and which CA signed it. A CA is a trusted authority, and that is why
    so many sites use commercial CAs. Self-signed certificates, like the ones we are
    creating in this chapter, are fine to use inside your organization. Customer-facing
    sites should use commercial CAs. Using a CA saves you from the hassle of keeping
    copies of client certificates on your OpenVPN server; all the server needs to
    know is that the client certificate is authenticated by your CA.
  prefs: []
  type: TYPE_NORMAL
- en: SSL Versus TLS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic
    protocols. TLS evolved from SSL. All versions of SSL are deprecated, as are TLS
    1.0 and TLS 1.1\. Use TLS 1.2 or 1.3, and disable all the others ([Recipe 13.10](#rec-harden-vpn)).
    Older versions are deprecated because of security flaws, so don’t let anyone talk
    you into supporting deprecated versions.
  prefs: []
  type: TYPE_NORMAL
- en: TUN/TAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *TUN* and *TAP* devices are virtual network interfaces. These are built
    into the Linux kernel, and you should not have to do anything to make them available.
    The *TUN* device is for routed networks, and the *TAP* device is for bridged networks.
    Your server and client configuration files specify which one to use.
  prefs: []
  type: TYPE_NORMAL
- en: Good Security Takes Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good security requires ongoing study and maintenance. This chapter aims to show
    you how to set up a strong VPN that is reasonably user-friendly. There are many
    additional methods for making your VPN even stronger, such as client certificates
    with short lifetimes, additional authentications, hardware devices, SELinux, chroot
    jails, short password timeouts, and many more. If you require super-high security,
    please consult expert professionals.
  prefs: []
  type: TYPE_NORMAL
- en: 13.1 Installing OpenVPN, Server and Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to know how to install openVPN.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [OpenVPN website](https://openvpn.net) supplies both the community open
    source OpenVPN and the commercial OpenVPN Access Server. The community OpenVPN
    is free of cost and open source. This chapter covers the community OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux, install the *openvpn* package. (As always, verify the package name
    on your particular Linux.) Get the most current version you can, from 2.4.5 and
    up. This provides both server and client. Source tarballs and Windows installers
    are available from [OpenVPN Community Downloads](https://oreil.ly/vwEAs).
  prefs: []
  type: TYPE_NORMAL
- en: For your clients, you could try the free [OpenVPN Access Clients](https://oreil.ly/vQugl),
    which are available for Linux, macOS, Android, iOS, and Windows. These are designed
    for the commercial OpenVPN Access Server and also work with the community OpenVPN
    server.
  prefs: []
  type: TYPE_NORMAL
- en: You can also find the community OpenVPN client for Android in the Google Play
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: See [Recipe 13.9](#rec.ovpn) to learn how to use the *.ovpn* inline file format
    for easier client configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On Linux, OpenVPN must be installed on your OpenVPN server and on all clients.
    The OpenVPN package provides both client and server functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu, Fedora, and openSUSE include additional packages that provide integration
    with NetworkManager, which makes managing, connecting, and disconnecting to VPNs
    nice and easy.
  prefs: []
  type: TYPE_NORMAL
- en: '*NetworkManager-openvpn* (Fedora, openSUSE) and *network-manager-openvpn* (Ubuntu)
    integrate OpenVPN with Network Manager. If you are using the GNOME environment
    (such as GNOME, Xfce, Cinnamon, or Mate), you also need *NetworkManager-openvpn-gnome*
    (openSUSE, Fedora), or *network-manager-openvpn* (Ubuntu).'
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN Access Server is a free download, and you may connect up to two clients
    at the same time without purchasing a license. It comes with additional features,
    such as a web administration interface and automatic configurations with the free
    OpenVPN Access Client. If you start with the community OpenVPN and then decide
    to migrate to OpenVPN Access Server, everything you learned for the community
    OpenVPN server applies to Access Server as well.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.2 Setting Up a Simple Connection Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to run the simplest OpenVPN connection test to get an idea of how it
    works and to verify connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following simple test creates an unencrypted tunnel between two Linux computers
    that are on the same network. OpenVPN must be installed on both of them. First
    verify that the OpenVPN daemon is not running on either host, and if it is, stop
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use a Different Subnet for Your VPN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use a different subnet for your OpenVPN tunnel; for example, *host1* and *host2*
    are on 192.168.43.0/24, so the example uses the 10.0.0.0/24 private address space
    for the VPN tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the two computers are named *host1* and *host2*.
    The first example creates a VPN tunnel from *host1* to *host2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This example creates a link from *host2* to *host1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You have a successful connection when both hosts show the “Initialization Sequence
    Completed” message. Test your connections by pinging through the *tun0* interface
    on both hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Press Ctrl-C on each host to stop ping, and again to close the tunnels.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This simple test illustrates how OpenVPN works. It creates a virtual network
    interface, *tun0* on both hosts, then routes network traffic through this interface.
    This simple test does not create an encrypted connection, as you can see from
    the “******* WARNING *******: All encryption and authentication features disabled”
    message in your command output.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[systemd.unit](https://oreil.ly/2AAEe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.3 Setting Up Easy Encryption with Static Keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want an easy way to create and manage encryption for OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest method is to use shared static keys. Shared static keys are useful
    for testing, but they are not adequate for production systems. (See the Discussion
    to learn about their shortcomings.) In this recipe you will learn how to create
    and share static keys, and how to create simple server and client configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and distribute a shared static key between two hosts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create server and client configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start OpenVPN on both hosts, referencing their configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following examples, the OpenVPN server is on *server1*, the client is
    *client1*, and the new key is *myvpn.key*. You may name your keys whatever you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new directory on the OpenVPN server to store keys, then create a new
    static key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the key to the client machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the server configuration file. The example is */etc/openvpn/server1.conf*,
    and you can call yours anything you like. Use a different subnet for your OpenVPN
    tunnel; for example, *server1* and *client1* are on 192.168.43.0/24, so the example
    uses the 10.0.0.0/24 private address space for the VPN tunnel. The server’s *tun*
    address is 10.0.0.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*local* is the LAN IP address of the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the client configuration file on the client machine. The client’s *tun*
    address is 10.0.0.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure the OpenVPN daemon is not running on the server or client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Start OpenVPN on the server and client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you see “Initialization Sequence Completed” on both hosts, you have established
    a connection. Ping each host over the *tun* virtual network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Press Ctrl-C on both hosts to close the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you see “WARNING: INSECURE cipher with block size less than 128 bit (64
    bit). This allows attacks like SWEET32\. Mitigate by using a cipher with a larger
    block size (e.g. AES-256-CBC)” in your command output, correct it with the following
    entry in both the server and client configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The biggest problem with using static keys is that you lose perfect forward
    secrecy because your static key never changes. If an attacker found a way to sniff
    and capture your network traffic, and then captured and cracked your encryption
    key, the attacker could then decrypt everything they capture, past and future.
    OpenVPN’s PKI uses a complex process that generates session keys, which are not
    persistent but change regularly. So, at best, a successful attacker can decrypt
    one session’s worth of traffic at a time, and then has to start over.
  prefs: []
  type: TYPE_NORMAL
- en: Another drawback is you need a different key for each client, and a copy of
    each client key on the server. Managing multiple clients is less work and more
    secure with a proper PKI.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[systemd.unit](https://oreil.ly/2AAEe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.4 Installing EasyRSA to Manage Your PKI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are going to use EasyRSA to create and manage your public key infrastructure
    (PKI), and you want to install and set it up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your PKI can be anywhere, it does not have to be on the OpenVPN server. You
    will create server and client certificates on the PKI, then copy them to their
    respective hosts.
  prefs: []
  type: TYPE_NORMAL
- en: You can install the *easy-rsa* package or fetch the freshest release from [EasyRSA
    Releases](https://oreil.ly/LtAKu) on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fedora and Ubuntu stuff all the EasyRSA files into */usr/share/*. This is not
    a good working directory, and it is overwritten by system updates. Create a new
    directory that you control and does not need root permissions, like our fine example
    user Duchess who creates */home/duchess/mypki*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'On Fedora and Ubuntu Linux, copy the */usr/share/easy-rsa* directory to your
    new directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This creates *mypki/easyrsa*. Check your permissions; you should be the owner
    and group owner of everything in your directory.
  prefs: []
  type: TYPE_NORMAL
- en: openSUSE does a proper installation with configuration files in */etc/easy-rsa*,
    the *easyrsa* command in */usr/bin*, and the documentation and license files in
    */usr/share/*. You don’t have to move anything or worry about permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should not need root permissions to create and manage your PKI. You may
    put it wherever you want, and it should be separate from your OpenVPN configuration,
    either in a separate directory or on a separate machine. The good OpenVPN people
    recommend putting it on a well-protected machine that is not exposed to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[systemd.unit](https://oreil.ly/2AAEe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.5 Creating a PKI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You installed EasyRSA ([Recipe 13.4](#rec-install-easyrsa)), and now you want
    to know how to set up a proper public key infrastructure (PKI).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A proper PKI is essential to running an OpenVPN server safely. In this recipe
    we will use EasyRSA to create a PKI, which simplifies the process considerably
    over using the *openssl* command. Creating a PKI involves these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your own Certificate Authority (CA) certificate to sign server and client
    certificates. This should be in a separate directory from your OpenVPN server
    configuration, or on a separate machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and sign an OpenVPN server certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and sign client certificates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the server certificates and the client certificates to */etc/openvpn/keys*
    on their respective machines. (You may create a different directory than *keys*.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following examples, all the commands are run from the */home/duchess/mypki/*
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to your PKI directory and run the command to initiate a new PKI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates an empty structure for your new PKI. Next, build your new CA.
    The CA creates and signs server and client certificates. Protect it with a strong
    passphrase, and create the Common Name you want for your new CA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you see a “RAND_load_file:Cannot open file:crypto/rand/randfile.c:98:Filename=/mypki/pki/.rnd”
    message, ignore it, as it is meaningless. You can make it go away by finding *openssl-easyrsa.cnf*
    and commenting out the *RANDFILE* line at the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a keypair and certificate signing request for your OpenVPN server.
    It is customary to not put a passphrase on the server’s private key. You may protect
    yours with a passphrase if you wish by omitting the *nopass* option. A passphrase
    provides strong protection, but it means entering the passphrase every time you
    restart your server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a keypair and certificate signing request for a client. Client private
    keys should have passwords, especially on mobile clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Sign the requests, using their Common Names. Use only their names; if you enter
    their paths it will cause an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate the Diffie-Hellman parameters for the server; this takes a minute
    or two. This command must be run on your OpenVPN server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Hash-based Message Authentication Code (HMAC) key, also on your server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Copy *vpnclient1.key*, *vpnclient1.crt*, *ca.crt*, and *ta.key* to */etc/openvpn/keys*
    on *client1*.
  prefs: []
  type: TYPE_NORMAL
- en: Copy *vpnserver1.key*, *vpnserver1.crt*, *ca.crt*, *dh.pem*, and *ta.key* to
    */etc/openvpn/keys* on *server1*.
  prefs: []
  type: TYPE_NORMAL
- en: You may delete all of the **.req* files after you have signed the certificate
    signing requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 13-1](#table13-xx) should help you remember which files go where.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 13-1\. Server and client key location
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Location | Public | Private |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ca.crt | server & clients | X |  |'
  prefs: []
  type: TYPE_TB
- en: '| ca.key | PKI machine |  | X |'
  prefs: []
  type: TYPE_TB
- en: '| ta.key | server & clients |  | X |'
  prefs: []
  type: TYPE_TB
- en: '| dh.pem | server | X |  |'
  prefs: []
  type: TYPE_TB
- en: '| server.crt | server | X |  |'
  prefs: []
  type: TYPE_TB
- en: '| server.key | server |  | X |'
  prefs: []
  type: TYPE_TB
- en: '| client1.crt | client1 | X |  |'
  prefs: []
  type: TYPE_TB
- en: '| client1.key | client1 |  | X |'
  prefs: []
  type: TYPE_TB
- en: '| client2.crt | client2 | X |  |'
  prefs: []
  type: TYPE_TB
- en: '| client2.key | client2 |  | X |'
  prefs: []
  type: TYPE_TB
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What’s this Diffie-Hellman stuff? It is the encryption mechanism that allows
    two hosts to create and share a secret key. Once the OpenVPN client and server
    authenticate to each other, additional send and receive keys are generated to
    encrypt the session.
  prefs: []
  type: TYPE_NORMAL
- en: HMAC calculates a message authentication code. HMAC verifies the integrity and
    authenticity of a message.
  prefs: []
  type: TYPE_NORMAL
- en: '*easyrsa init-pki* creates a new PKI, and you may also run it to cleanly remove
    and rebuild an existing PKI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may set up your PKI anywhere, and the good OpenVPN people recommend putting
    it on a machine that is not exposed to the internet and is well-protected from
    anyone who should not be messing with your PKI. If your CA is compromised, it
    is easy for an attacker to infiltrate your network. Obviously, you must have a
    secure method of distributing these files: USB stick, the *scp* command, an encrypted
    tarball downloaded from a secure server or emailed to your users.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look in your PKI directory to see how all these items are organized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Signing requests have a *.req* file extension, public keys *.crt*, and private
    keys *.key*. Keys always come in pairs, public and private.
  prefs: []
  type: TYPE_NORMAL
- en: Public Keys Encrypt, Private Keys Decrypt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public keys encrypt, private keys decrypt. Private keys must be protected and
    never shared. Public keys are meant to be shared.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on any signed certificate in your file manager to see something like
    [Figure 13-1](#fig-vpn-1). This provides a wealth of information: the CA that
    signed it, expiration date, serial number, fingerprint, signature, and lots more.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing a signed certificate](Images/lcb2_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. Viewing a signed certificate
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Or use the *openssl* command to read it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: A certificate is a request signed by a CA, and it contains the public key and
    the CA’s digital signature. A request contains a public key and the digital signature
    from the corresponding private key. You can see all of this by comparing them.
  prefs: []
  type: TYPE_NORMAL
- en: EasyRSA was originally part of OpenVPN and then spun off as a separate project.
    If you are used to managing PKIs with OpenSSL, you will appreciate how EasyRSA
    has streamlined the process.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.6 Customizing EasyRSA Default Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default settings for EasyRSA are not what you want, and you want to know
    how to change them.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look for your *vars.example* file, which is part of EasyRSA. Save a copy of
    this file as *vars* in your PKI directory, which in the examples in this chapter
    is */home/duchess/mypki/pki/*. The *vars* file defines your default settings for
    creating and signing certificates.
  prefs: []
  type: TYPE_NORMAL
- en: This file is well commented. Make your edits below the `# DO YOUR EDITS BELOW
    THIS POINT` line. Everything prefaced with *set_var* is editable. Uncomment everything
    you change.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the default configuration uses just the Common Name, and not a
    full *org* configuration. The following example creates a traditional *org* configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When you use the *org* configuration, remember to enter your Common Name when
    you run *easyrsa build-ca*, or you will be stuck with the default *Easy-RSA CA*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use *cn* or *org* according to your own policies and preferences; it makes no
    difference to your server operations.
  prefs: []
  type: TYPE_NORMAL
- en: See [Recipe 13.10](#rec-harden-vpn) to learn how to harden your server.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.7 Creating and Testing Server and Client Configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a nice stout PKI, you want to know how to configure your OpenVPN
    server and clients.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we will set up a simple test instance between two hosts on the
    same subnet, *server1* and *client1*. This is a good simple way to test your server
    configuration without having to hassle with routing and getting past your internet
    gateway.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example is a simple OpenVPN server configuration. Note that you
    can store your server keys anywhere on the server, as long you reference them
    correctly in your configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'An example client configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop your OpenVPN server if it is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Start OpenVPN on both hosts with the *openvpn* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: And there you have it, both configurations are correct and you have a successful
    connection. Press Ctrl-C on both hosts to stop.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenVPN installs with a batch of example configurations in */usr/share/doc/openvpn/*.
    These are abundantly commented and are excellent references. There are dozens
    of options, but in real life you will use just a few of them. In the examples
    in this recipe, there are a few items of note.
  prefs: []
  type: TYPE_NORMAL
- en: '`port 1194` is the default port, and `proto udp` is preferred over `proto tcp`.
    UDP is more secure, providing some protection from port scanning and denial-of-service
    attacks, and provides higher throughput and lower latency. TCP is useful when
    a remote user uses public networks with restrictive firewalls, such as hotels
    and coffee shops.'
  prefs: []
  type: TYPE_NORMAL
- en: '*tls-auth /etc/openvpn/keys/ta.key* must always have the 0 value on the server,
    and 1 on the clients. *tls-auth* enforces TLS-only connections.'
  prefs: []
  type: TYPE_NORMAL
- en: '*verb 4* is the logging level. 1 is the lowest, 9 is the most verbose. Keep
    it at 4–6 until you are confident everything is set up correctly. When you start
    OpenVPN from the command line, you will see a lot of messages.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of stale how-tos that recommend the *comp_lzo* option to enable
    compression. Don’t bother, as it does not provide much benefit. Most traffic is
    not compressible since it is either already compressed or is encrypted and cannot
    be compressed. There is at least one vulnerability enabled by compression, VORACLE.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example configuration files in your installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.8 Controlling OpenVPN with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to manage the OpenVPN daemon like any other daemon, with *systemctl*,
    but you don’t see an OpenVPN unit file. Or, you see an odd-looking unit file like
    *openvpn-server@.service*, and when you try to start it, it throws error messages.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ampersand, @, creates a *parameterized* unit file. This means you can easily
    create multiple unit files for the same service by calling different configuration
    files. For example, suppose your server configuration file is */etc/openvpn/austin.conf*.
    Your unit file is *openvpn@austin.service*, created with *systemctl*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note that you do not type the file extension of your OpenVPN *.conf* file. Now
    you can control your OpenVPN daemon with *systemctl*, just like any other service.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a rather ingenious method that gives you the flexibility to create multiple
    configurations without having to write multiple unit files. You can “parameterize”
    any systemd unit file.
  prefs: []
  type: TYPE_NORMAL
- en: You can have multiple tunnels running at the same time on the same machine.
    Each configuration requires a different *tun* device, for example *tun0*, *tun1*,
    *tun2*, a different subnet for each tunnel, and a different UDP port. Control
    all of these tunnels with different configuration files and their corresponding
    parameterized unit files.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[systemd.unit](https://oreil.ly/2AAEe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.9 Distributing Client Configurations More Easily with .ovpn Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up clients is a fair bit of work, and you want to know if there is a
    faster way, one that your users can do themselves without a lot of help.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bundle your client configurations and keys into single files with the *.ovpn*
    extension. All clients, Linux, Windows, macOS, iOS, and Android, can import these.
  prefs: []
  type: TYPE_NORMAL
- en: 'First create the users’ certificates, then follow this template to create their
    *.ovpn* files. This example builds on the example in [Recipe 13.7](#rec-vpn-configs).
    Instead of linking to all their certificates, copy them into this file. All certificates
    are in plain text, so all you do is copy the BEGIN/END portions into the *.ovpn*
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now you have only one file to distribute to your clients. (See [Recipe 13.1](#rec-install-openvpn)
    to learn what to install for Linux, macOS, Windows, iOS, and Android clients.)
  prefs: []
  type: TYPE_NORMAL
- en: The easy way to import a new *.ovpn* file in Linux is using NetworkManager.
    Open “VPN Connections” → “Add a VPN connection.” This opens “Choose a VPN Connection
    Type.” Select “Import a Saved VPN Connection,” click Create, and find your *.ovpn*
    file in the file selector. Review the settings on the General and VPN tabs.
  prefs: []
  type: TYPE_NORMAL
- en: On the General tab, make sure that “All users may connect to this network” is
    not checked. This is a simple but important security measure that requires every
    user to have their own individual OpenVPN configuration.
  prefs: []
  type: TYPE_NORMAL
- en: On the VPN tab, note that NetworkManager converts the inline certificates to
    *.pem* files ([Figure 13-2](#fig-vpn-2)). This is normal and not a mistake. You
    can compare these to the originals; click on the little file folder icon to the
    right to see where the converted files are stored.
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing .ovpn client configuration file into NetworkManager](Images/lcb2_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. Importing the *.ovpn* client configuration file into NetworkManager
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For all other clients, the procedure is similar. Follow their instructions,
    and if all goes well, your clients will be up and running in a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: The NetworkManager import function also works with client configuration files
    that are not inline, like in [Recipe 13.7](#rec-vpn-configs). In this case the
    certificates are not converted, and they retain their original filenames.
  prefs: []
  type: TYPE_NORMAL
- en: An inline file may have the *.conf* extension if you have only Linux clients.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.10 Hardening Your OpenVPN Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know some options for making your OpenVPN more secure.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenVPN default settings are pretty good, but they’re designed for broader
    compatibility. There are some changes you can make that will make your server
    stronger.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following examples go in both server and client configuration files. These
    options maximize the effectiveness of TLS. All SSL and TLS protocols older than
    TLS 1.2 are deprecated and should not be allowed. Accept only TLS 1.2 or higher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Use a stronger data channel cipher, and enforce its use by disabling cipher
    negotiation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many changes in TLS 1.3, so you need two different configurations
    for TLS 1.2 and 1.3\. These are all stronger and more efficient encryption ciphers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Use Elliptic Curve Diffie-Hellman Ephemeral (ECDHE) in place of our old Diffie-Hellman
    static keys. You do not have to create a *ta.key*, as you do in [Recipe 13.5](#rec-create-pki):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Add the *float* option, in the server configuration only, to allow clients to
    roam on different networks without losing connection, as long they pass all other
    authentication tests.
  prefs: []
  type: TYPE_NORMAL
- en: The *opt-verify* option, in the server configuration only, checks for compatibility
    between server and client settings, and disconnects clients that do not match.
    *opt-verify* checks *dev-type, link-mtu, tun-mtu, proto, ifconfig, comp-lzo, fragment,
    keydir, cipher, auth, keysize, secret, no-replay, no-iv, tls-auth, key-method,
    tls-server*, and *tls-client*.
  prefs: []
  type: TYPE_NORMAL
- en: See the Discussion for complete example configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Put these enhancements all together in the server configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'An example client configuration, using the inline file format ([Recipe 13.9](#rec.ovpn)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: These options strengthen the authentication between client and server, and enforce
    using TLS 1.2 and higher. If you’re wondering how to know which ciphers and ciphersuites
    to use, I asked some experts. You can lock down your setup even tighter. For example,
    disallowing users from saving passwords, adding more restrictions to client-server
    authentication, using SELinux, or using a chroot. These are advanced topics not
    covered here.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[EasyRSA](https://oreil.ly/eKbsg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenSSL Cookbook](https://oreil.ly/Ctm0X)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.11 Configuring Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your OpenVPN server is running, all of your connection tests work as expected,
    and now you need to know how to set up your networking so that remote clients
    can find your server and traffic gets routed appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no one-size-fits-all solution. Configuring your networking has to take
    into account how your LAN is set up, whether you are connecting individual clients
    or linking networks, IPv4, IPv6, how your internet gateway is set up, and lots
    more. Consult Jan Just Keijser’s excellent [*OpenVPN Cookbook*](https://learning.oreilly.com/library/view/openvpn-cookbook-/9781786463128/),
    2nd Edition (O’Reilly), to find the answers you need. This book covers TUN versus
    TAP, Windows clients, PAM and LDAP, IPv6, routing, and site-to-site configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Networking is the most challenging part of running any server, especially an
    important security server. It pays to study this and take pains to get it right.
    The OpenVPN documentation has a lot of good information on networking as well.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[OpenVPN documentation](https://oreil.ly/Ah124)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 openvpn*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
