- en: Chapter 6\. Installing and Uninstalling Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and uninstalling software are basic system administrator tasks. You
    might not perform them daily, but these are regular tasks for you and your team
    to complete. Most often, you’ll install updates, which can be automated. Any new
    software you install should be accompanied by a business justification, a change
    control record, and a written understanding of security implications, if any,
    from the requesting party. Installing software with known vulnerabilities is an
    easy pathway for malicious actors to compromise your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling software also requires a change control record because of the potential
    danger of removing a package, directory, or library required by some other critical
    system or service function.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three software installation methods: installing from repositories
    using a package manager, installing individual packages downloaded to the local
    filesystem, and compiling source code. This chapter covers all three methods.
    There are two standard methods of uninstalling software: using the package management
    tool and, in the case of compiled software, using an uninstall process. A third,
    nonstandard uninstall method is manually uninstalling software by removing directories,
    libraries, and binaries.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual software removal is a tedious task that only senior-level sysadmins should
    perform. The sections in this chapter teach you how to install software by a particular
    method and then uninstall software by that same method.
  prefs: []
  type: TYPE_NORMAL
- en: Before I discuss installing and uninstalling software, I’ll show you how to
    update your system. Because updating is so important, it’s worth discussing first,
    and you should update before performing other tasks because of the high value
    of updating your system. You should always update your system when troubleshooting
    to check whether a simple update resolves your issues. A quick system update might
    alleviate the need to remove or install new software to solve a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: All demonstrations and examples in this chapter use CentOS 8.3 (`server1`) and
    Ubuntu Server 20.04 LTS (`server2`). I perform all tasks on `server1` first and
    then on `server2`, noting any differences between the two systems. The software
    package used in the examples is Lynx, a lightweight text-based browser.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Your System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve mentioned keeping your system updated multiple times in this book. It’s
    an important task to remember. It should be one of your top priorities. Updates
    are a part of standard maintenance. Many system administrators apply updates weekly,
    which is good practice. But don’t hesitate to apply patches, updates, and upgrades
    as needed to mitigate vulnerabilities. Security is your top priority. The following
    two sections illustrate how to apply updates to your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Red Hat Enterprise Linux–Based System Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Red Hat Enterprise Linux–based systems use the YUM/DNF utility to maintain
    updates and software installation from repositories. From the [official Red Hat
    documentation](https://oreil.ly/R2Mca):'
  prefs: []
  type: TYPE_NORMAL
- en: YUM/DNF (yum/dnf) is the primary tool for getting, installing, deleting, querying,
    and managing Red Hat Enterprise Linux RPM software packages from official Red
    Hat software repositories, as well as other third-party repositories. YUM/DNF
    is used in Red Hat Enterprise Linux versions five and newer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'DNF is the latest incarnation of the utility, so I’ve combined the two. According
    to the documentation, DNF is YUM version 4 and is the tool to use from Red Hat
    Enterprise Linux version 8 onward. To begin an update, issue the `yum` or `dnf`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Agree to the installation here to have your target packages upgraded to the
    latest stable versions. To automate subsequent updates, use the `-y` option to
    answer “yes” to any prompts. The following demonstrates using the `-y` option
    with the `dnf` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This automatically accepts the installation and does not prompt you interactively.
    This is a great option for use in scripts. The next section provides you with
    the equivalent update action on Debian-based systems.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Debian-Based System Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You apply updates to Debian-based systems with a command analogous to the DNF
    one you used for Red Hat Enterprise Linux–based systems, using the Debian `apt`
    utility, as shown here. You’ll also receive a similar response if your system
    requires updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If your system doesn’t require updates, `apt`’s response will look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are no special update commands for patches, security updates, or application
    version upgrades; this single command takes care of all updates regardless of
    type or priority on both systems. Your system checks for updates from all configured
    repositories and applies them when available. It’s a good practice to check weekly
    or more frequently for updates and apply them during a scheduled maintenance window
    or as necessary for critical security updates.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this chapter focuses on installing software as on-demand service
    requests from your users, your management, or other sources.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Software from Repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing software from a repository is the easiest method of installing software
    on a Linux system. The reason that it’s the easiest method is because the repository
    automatically meets your dependencies without you having to do anything except
    request an installation. For example, if you want to install the Apache HTTP Server
    on a system, there are several dependencies that you must satisfy before it installs.
    The repository contains all of your dependent packages, gathers, and installs
    them as they’re called for in support of your primary package. I use the text-based
    Lynx browser for the following installation demonstrations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On a CentOS system, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you receive this error, it means that the package, `lynx`, in this case,
    doesn’t exist by that name. You’ll have to search for the package name or repository
    that contains the package you want. For example, I had to perform the following
    steps to install `lynx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This installs three packages: `dnf-plugins-core`, `python3-dnf-plugins-core`,
    and `yum-utils`. Then, use the following command to enable the PowerTools repository
    where `lynx` resides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, proceed with the installation of `lynx` and its dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Agree to the installation to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This process installed the Lynx application and its dependency, `centos-indexhtml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On an Ubuntu system, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the two dependencies: *libidn11* and *lynx-common*. The system installs
    the dependencies before the target package. Continue by responding yes (`y`) to
    the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `apt` package manager installed the `lynx` package and its dependencies.
    That’s all there is to install from a repository. Use the package installer and
    name the application packages you want to install, and the package manager takes
    care of everything for you. In the next section, you learn how to uninstall a
    software package.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling an Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following simple process uninstalls a target package using a package manager
    on Red Hat Enterprise Linux–based systems. The Red Hat Package Manager, `rpm`,
    installs, uninstalls, and queries individual packages and their dependencies.
    The `-e` option erases (removes) target packages from the system. As you’ll see
    next, when there are no errors from removing a package, the system gives no response.
    The `autoremove` step automatically removes unused dependencies. Your system might
    have more than one unused dependency. It’s generally safe to remove them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This process removed the `lynx` package and its dependency, `centos-indexhtml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following process uses Ubuntu’s `apt` with the `purge` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `purge` option removes the `lynx` package but not the dependencies. As shown
    in the preceding output, you must run `sudo apt autoremove` to erase those files
    from the system. If you use the `remove` option, then `apt` only removes the binaries
    from the system, which leaves configurations and other files intact. In the next
    section, you learn how to install and remove individual packages using a system’s
    package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Uninstalling Individual Software Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need software packages from other sources, such as vendor websites, GitHub,
    and SourceForge that aren’t part of any repository. You must install these individual
    packages manually at the command line. Rather than using repository commands to
    install these packages, you use the local package manager utilities such as `rpm`
    and `dpkg`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Be sure to read any documentation that accompanies your target package before
    attempting to install it. Check for dependencies, configurations, and any security
    warnings. You’ll need to satisfy dependencies before installing the target package.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an Individual Software Package Manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The examples in this section use the `downloadonly` option to download without
    installing packages from repositories to simplify locating a package for this
    demonstration. It doesn’t matter what the source is for packages, only that you
    have them downloaded to your system and install them manually at the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a CentOS system, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When you download packages using this method, they’re stored in a subdirectory
    of the */var/cache/dnf* directory. The subdirectory to which packages download
    depends on the repository that the packages originate from. For example, packages
    can download to any of the following on my CentOS system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `lynx` package downloaded to */var/cache/dnf/powertools-⁠25a6a2b3​31e53e98/packages*
    and `centos-indexhtml` downloaded to */var/cache/dnf/⁠baseos-​929b586ef1f72f69/packages*.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will attempt to install the `lynx` package first, which will fail because
    of its dependency on the `centos-indexhtml` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Since CentOS is a Red Hat Enterprise Linux binary-compatible distribution, our
    `centos-indexhtml` package is equivalent to the `redhat-indexhtml` package. It
    will work because the package names are analogous.
  prefs: []
  type: TYPE_NORMAL
- en: 'Heeding the preceding error, install the `centos-indexhtml` package first and
    then proceed to install the `lynx` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The package installs without error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `lynx` package was installed successfully. The `rpm` switch (`-i`) means
    *install*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Ubuntu systems, the manual download and install process proceeds as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian-based systems such as Ubuntu, files downloaded this way reside in
    */var/cache/apt/archives* as *.deb* packages, and you can install them from that
    location. Note that the `apt` utility dialog stated that the packages “will be
    installed” but the final message, “Download complete and in download only mode”
    means that the packages downloaded but didn’t install. In the following example,
    I attempt to install `lynx` and ignore the dependencies that downloaded with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The system won’t allow you to install without the dependencies that downloaded
    into the same directory with `lynx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the dependencies first, and then install `lynx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `-i` switch for the `dpkg` command means install, just as it does for the
    `rpm` utility. Next, we will uninstall the same packages manually.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling Individual Software Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To uninstall a manually installed package, you have to reverse the process.
    This means you uninstall in the opposite order, beginning with the last installed
    package. In other words, you must uninstall all dependencies before uninstalling
    the package itself. If there are dependencies, the system will instruct you which
    ones they are.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a CentOS system, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You have successfully uninstalled `lynx` and its dependency, `centos-indexhtml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On an Ubuntu system, you’ll notice that when you attempt an uninstall of a
    package that you manually installed, there are no warnings about dependencies.
    To uninstall Lynx on Ubuntu, there are three packages, `lynx`, and its two dependencies:
    `libidn11` and `lynx-common`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the differences when attempting to uninstall `lynx` and its dependencies
    individually from an Ubuntu system. These are three separate commands to demonstrate
    how packages and dependencies are or are not removed, depending on which command
    you use. I’ve answered no (`n`) to each for this demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And, if you remove only `lynx` from the system, `lynx_common` and `libidn11`
    are left behind. Issuing the command `sudo apt autoremove` won’t remove the unused
    dependencies as it did when you installed Lynx from a repository. The following
    section describes how to find dependencies for a specific software package.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Package Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It helps to know a package’s dependencies before you install it. This is how
    you find them on a Red Hat Enterprise Linux–based system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier in this chapter, the system has already installed most
    of the required dependencies. The required one, `centos-indexhtml`, doesn’t stand
    out in any particular way. The only way I know of to isolate any dependencies
    that your system requires is to attempt an installation of the target package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing shows you the same dependency list query on an Ubuntu
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If you’re a Linux purist and like to compile your software so that you have
    maximum control, the next section demonstrates installing a software package from
    source code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Software from Source Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some system administrators prefer to install all software from source code (also
    referred to as “source”) because it is the most flexible software installation
    method. Installing from source allows you to customize the installation for your
    specific needs. You can change installation paths, enable features, disable features,
    and make minute adjustments to every possible configuration option available for
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: There are some downsides to installing from source code. The major downside
    is that you must satisfy dependencies for the software you install. This can be
    frustrating, time-consuming, and tedious. I have personally chased recursive dependencies
    to the point where I’ve forgotten the name of the original application I needed
    to install. Another downside is that you must install a full complement of development
    tools onto your systems, which consumes considerable disk space. Another downside
    is that upgrading to a newer version of the software installed from source code
    is just as difficult and time-consuming as installing the original version. And
    if a previous version isn’t fully overwritten or removed, you can experience version
    conflicts that can be quite difficult to resolve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Satisfying Prerequisites: Building a Development Environment'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before installing any application from source code, you’ll need to set up a
    development environment by installing a code compiler and supporting software.
    The easiest method is to install a group of software packages from your Linux
    vendor’s repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Red Hat Enterprise Linux–based systems, using the `groupinstall` option
    and identifying `"Development Tools"` as the installation target group is the
    best choice. Unfortunately, this group selection installs many unnecessary and
    potentially nonsecure packages for compiling source code at the command line,
    such as a list of graphical tools. For this reason, it’s often desirable to set
    up a specific system dedicated to software development. To create a software development
    system, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu systems, the equivalent installation uses the option `build-essential`
    to install all the necessary development tools on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Confirm the installation and continue. Installing groups of packages can take
    several minutes. Once your development environment is set up, you’ll need to download
    the source code for Lynx. The instructions for installing from source are the
    same for any Linux distribution; however, I will perform this installation on
    both the CentOS and the Ubuntu systems and note any differences and errors in
    the text. Users may download, compile, and make the binaries, but only the root
    user can install binaries to the system directories.
  prefs: []
  type: TYPE_NORMAL
- en: Download, Extract, Compile, and Install Your Software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download your compressed source code using a utility such as `wget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the source code from the compressed archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the directory into the `lynx` source tree created by the extraction
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Before running `configure`, take a few minutes to look for and read the *README*
    file that often exists in source code trees. This file has valuable instructions
    and information about the source code and installation instructions. The *README*
    file usually refers to the *INSTALLATION* file describing installation options.
    I accept all the defaults for demonstration purposes and simply run the configure
    script. If all dependencies are met, the configuration checks will go without
    error, create the makefile, and then drop you back at your shell prompt. This
    process can take a few minutes to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Both configure scripts failed with the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When you encounter errors, the configure script (configure) stops but keeps
    its place so that you may continue where you left off as you satisfy dependencies
    by running the script again. To satisfy the current dependency, I installed the
    `ncurses-devel` package (`sudo dnf -y install ncurses-devel`) on the CentOS system.
    The configure script completed successfully. For the Ubuntu system, I installed
    the `lib32ncurses-dev` package (`sudo apt install lib32ncurses-dev`), and the
    configure script completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the *INSTALLATION* file, you now must run the `make` command to
    compile the sources. This process will take a few minutes to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After satisfying the failed dependencies in the configure script, both compilations
    successfully completed. To install Lynx to its proper location and set the correct
    permissions, run `sudo make install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, most instructions advise you to run `make clean` to remove all
    of the object code and other temporary files from your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: It’s a matter of preference to run this command. If you need to remove compiled
    software from your system, the next section steps you through the process of doing
    so.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling a Source-Installed Software Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your source trees exist with your original makefile intact, you can uninstall
    a package quite easily, but you must have the makefile to do so. If you don’t
    want to keep all your source trees on your system for every compiled program,
    make a backup of the makefile, such as copying it to a backup directory with the
    name *makefile.lynx289r1* or similar. The makefile must be in your current directory
    when uninstalling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t have your makefile or it isn’t in your current directory, you
    receive the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You can re-create the makefile if you extract the same version of the source
    tree that you previously used and can remember your configure options. Otherwise,
    you can use the preceding uninstall results to guide you in uninstalling manually.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter walked you through installing software from different sources:
    repositories, local package files, and source code. You’ll find that installing
    software is easy enough with a little practice. Please remember that the responsibility
    of keeping your systems running smoothly and securely rests with you. Just because
    installing software is quick and easy doesn’t mean that you should ignore its
    impact on system performance, security, and disk usage.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter teaches you how to add disk space to your systems.
  prefs: []
  type: TYPE_NORMAL
