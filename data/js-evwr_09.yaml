- en: Chapter 8\. User Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you had just joined a club (remember the “Secret Club for Super Cool
    People”?), but when you showed up for the first time there was nothing to do.
    The club was a big, empty room with people wandering in and out with no way of
    interacting with the club or one another. I’m a bit of an introvert, so this doesn’t
    sound *that* bad, but I wouldn’t be willing to pay a membership fee for it.
  prefs: []
  type: TYPE_NORMAL
- en: Right now our API is essentially a big, useless club. We have a way to create
    data and a way for users to sign in, but nothing allows a user to own that data.
    In this chapter, we’ll be addressing this by adding user interactions. We’ll write
    the code that will enable a user to own the notes they create, limit who can delete
    or modify a note, and enable users to “favorite” a note that they like. Additionally,
    we’ll enable API users to make nested queries, allowing our UIs to write simple
    queries that relate users to notes.
  prefs: []
  type: TYPE_NORMAL
- en: Before We Get Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll be making some pretty significant changes to our notes
    files. Since we have a small amount of data in our database, you may find it easier
    to remove the existing notes from your local database. This isn’t necessary, but
    can reduce confusion as you work through this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we’ll go into the MongoDB shell, ensure that we’re referencing
    the `notedly` database (the name of the database in our *.env* file), and use
    MongoDB’s `.remove()` method. From your terminal, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Attach a User to New Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we updated our *src/index.js* file so that when a user
    makes a request, we check for a JWT. If the token exists, we decode it and add
    the current user to our GraphQL context. This allows us to send the user’s information
    to each resolver function that we call. We’ll update our existing GraphQL mutations
    to verify the user’s information. To do this we’ll utilize Apollo Server’s `AuthenticationError`
    and `ForbiddenError` methods, which will allow us to throw appropriate errors.
    These will help us both debug in development as well as send appropriate responses
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get started, we’ll need to import the `mongoose` package into our
    *mutations.js* resolver file. This will allow us to appropriately assign cross-referencing
    MongoDB object IDs to our fields. Update the module imports at the top of *src/resolvers/**mutation.js*
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, in our `newNote` mutation, we’ll add `user` as a function parameter, then
    check to see if a user is passed into the function. If a user ID is not found,
    we’ll throw an `AuthenticationError`, as a person must be signed in to our service
    to create a new note. Once we have verified that the request has been made by
    an authenticated user, we can create the note in the database. In doing so, we
    will now assign the author the user ID that is passed to the resolver. This will
    allow us to reference the creating user from the note itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/resolvers/mutation.js*, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to apply the cross-referencing to the data in our database.
    To do this, we will need to update the `author` field of our MongoDB notes schema.
    In */src/models/note.js*, update the `author` field as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this reference in place, all new notes will accurately record and cross-reference
    the author from the context of the request. Let’s try this out by writing a `newNote`
    mutation in the GraphQL Playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When writing the mutation, we also must be sure to pass a JWT in the `Authorization`
    header (see [Figure 8-1](#user_newnote)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to Retrieve a JWT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don’t have the JWT handy, you can perform a `signIn` mutation to retrieve
    one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the newNote mutation in the GraphQL Playground](assets/jsev_0801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. A newNote mutation in the GraphQL Playground
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For now, our API doesn’t return the author information, but we can verify that
    the author was added correctly by looking up the note in the MongoDB shell. In
    a terminal window, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The returned value should include an author key, with a value of an object ID.
  prefs: []
  type: TYPE_NORMAL
- en: User Permissions for Updates and Deletes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can add user checks to our `deleteNote` and `updateNote` mutations as
    well. These will require that we check both that a user is passed to the context
    and whether that user is the owner of the note. To accomplish this, we’ll check
    if the user ID stored in the `author` field of our database matches the user ID
    that is passed into the resolver context.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/resolvers/mutation.js*, update the `deleteNote` mutation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, also in *src/resolvers/mutation.js*, update the `updateNote` mutation
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: User Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our existing mutations updated to include user checks, let’s also add
    some user-specific queries. To do this, we’ll add three new queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`'
  prefs: []
  type: TYPE_NORMAL
- en: Given a specific username, returns the user’s information
  prefs: []
  type: TYPE_NORMAL
- en: '`users`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list of all users
  prefs: []
  type: TYPE_NORMAL
- en: '`me`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the user information for the current user
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we write the query resolver code, add these queries to the GraphQL *src/schema.js*
    file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the *src/resolvers/query.js* file, write the following resolver query
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how these look in our GraphQL Playground. First, we can write a user
    query to look up the information of a specific user. Be sure to use a username
    that you’ve already created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will return a data object, containing the username, email, and ID values
    for the specified user ([Figure 8-2](#user_query)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the user query in the GraphQL Playground](assets/jsev_0802.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-2\. The user query in the GraphQL Playground
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now to look up all of the users in our database, we can use the `users` query,
    which will return a data object containing the information of all users ([Figure 8-3](#users_query)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of the users query in the GraphQL Playground](assets/jsev_0803.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-3\. The users query in GraphQL Playground
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now we can use a JWT, passed in the HTTP header, to look up information about
    the signed-in user, using the `me` query.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, be sure to include the token in the HTTP header portion of the GraphQL
    Playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, perform the `me` query like so ([Figure 8-4](#me_query)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of the me query in the GraphQL Playground](assets/jsev_0804.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-4\. The me query in GraphQL Playground
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With these resolvers in place, we can now query our API for user information.
  prefs: []
  type: TYPE_NORMAL
- en: Toggling Note Favorites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have one last piece of functionality to add to our user interactions. You
    may recall that our application specifications stated that “users will be able
    to favorite the notes of other users as well as retrieve a list of their favorites.”
    Similar to Twitter “hearts” and Facebook “likes,” we’d like our users to be able
    to mark (and unmark) a note as a favorite. To implement this behavior, we’ll follow
    our standard pattern of updating the GraphQL schema, then the database model,
    and lastly the resolver function.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will update our GraphQL schema in *./src/schema.js* by adding two
    new properties to our `Note` type. `favoriteCount` will track the total number
    of “favorites” that a note has received. `favoritedBy` will contain an array of
    users who have favorited a note.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll also add the list of favorites to our `User` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add a mutation in *./src/schema.js* called `toggleFavorite`, which
    will resolve by either adding or removing a favorite for the specified note. This
    mutation will take a note ID as a parameter and return the specified note.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to update our note model to include the `favoriteCount` and `favoritedBy`
    properties in our database. `favoriteCount` will be a `Number` type with a default
    value of `0`. `favoritedBy` will be an array of objects, containing references
    to user object IDs in our database. Our full *./src/models/note.js* file will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With our GraphQL schema and database models updated, we can write the `toggle``Favorite`
    mutation. This mutation will receive a note ID as a parameter and check to see
    if the user is already listed in the `favoritedBy` array. If the user is listed,
    we will remove the favorite by decreasing the `favoriteCount` and removing the
    user from the list. If the user has not yet favorited the note, we will increment
    the `favoriteCount` by 1 and add the current user to the `favoritedBy` array.
    To do all of this, add the following code to the *src/resolvers/mutation.js* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With this code in place, let’s test our ability to toggle a note favorite in
    the GraphQL Playground. Let’s do this with a freshly created note. We’ll begin
    by writing a `newNote` mutation, being sure to include an `Authorization` header
    with a valid JWT ([Figure 8-5](#user_newnote2)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshote of a newNote mutation in the GraphQL Playground](assets/jsev_0805.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-5\. A newNote mutation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll notice that the `favoriteCount` of this new note is automatically set
    to `0`, because that’s the default value we set in our data model. Now, let’s
    write a `toggle``Favorite` mutation to mark it as a favorite, passing the ID of
    the note as a parameter. Again, be sure to include the `Authorization` HTTP header,
    with a valid JWT.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After you run this mutation, the value of the note’s `favoriteCount` should
    be `1`. If you rerun the mutation, the `favoriteCount` will reduce to `0` ([Figure 8-6](#favorite_count)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the toggleFavorite mutation in the GraphQL Playground](assets/jsev_0806.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-6\. The toggleFavorite mutation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Users can now mark and unmark notes as favorites. More importantly, I hope that
    this functionality demonstrates how you can add new features to a GraphQL application’s
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Nested Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things about GraphQL is that we can *nest* queries, allowing
    us to write a single query that returns precisely the data we need, rather than
    multiple queries. Our GraphQL schema’s `User` type includes a list of notes by
    the author in an array format, while our `Notes` type includes a reference to
    its author. As a result, we can pull a list of notes from a user query or get
    the author information from a note query.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we can write a query that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If we currently try to run a nested query like the preceding one, we’ll receive
    an error. This is because we haven’t yet written the resolver code that performs
    the database lookup for this information.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this functionality, we’ll add two new files in our *src/resolvers*
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *src/resolvers/note.js*, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In *src/resolvers/user.js*, add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to update our *src/resolvers/index.js* to import and export these
    new resolver modules. Overall the *src/resolvers/index.js* file should now look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we write a nested GraphQL query or mutation, we will receive the information
    that we expect. You can try this out by writing the following `note` query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This query should correctly resolve with the author’s username and ID. Another
    practical example would be to return information about users who have “favorited”
    a note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: With nested resolvers in place, we can write precise queries and mutations that
    return exactly the data that we need.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations! In this chapter our API graduated to being something that
    users can truly interact with. This API demonstrates the true power of GraphQL
    by integrating user actions, adding new features, and nesting resolvers. We’ve
    also followed a tried-and-true pattern for adding new code to our projects: first
    write the GraphQL schema, then write the database model, and finally write the
    resolver code to query or update the data. By breaking down the process into these
    three steps, we can add all sorts of features to our applications. In the next
    chapter we’ll look at the final steps needed to make our API production ready,
    including pagination and security.'
  prefs: []
  type: TYPE_NORMAL
