- en: Chapter 5\. IndexedDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html#ch_webStorage) covered data persistence with local or
    session storage. This works well for string values and serializable objects, but
    querying is not ideal and objects require JSON serialization. *IndexedDB* is a
    newer, more powerful data persistence mechanism present in all modern browsers.
    An IndexedDB database contains *object stores* (sort of like tables in a relational
    database). Each object store can have indexes on certain properties for more efficient
    querying. It also supports more advanced concepts like versioning and transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: Object Stores and Indexes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An IndexedDB database has one or more object stores. All operations to add,
    remove, or query data are done on an object store. An object store is a collection
    of JavaScript objects that are persisted in the database. You can define *indexes*
    on an object store. An index stores extra information to the database that lets
    you query objects by the indexed property. For example, suppose you are creating
    a database to store product information. Each product has a key, likely a product
    ID or SKU code. This lets you quickly search the database for a given product.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to also be able to query the data by price, you can create an index
    on the price property. This lets you look up objects by their price. With an index,
    you can specify a specific price or a range of prices, and the index can quickly
    find those records for you.
  prefs: []
  type: TYPE_NORMAL
- en: Keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Objects in a store have a *key* that uniquely identifies that object within
    that store. This is similar to a primary key in a relational database table. There
    are two types of keys in an IndexedDB object store.
  prefs: []
  type: TYPE_NORMAL
- en: '*In-line* keys are defined on the object itself. For example, here’s a to-do
    item with an in-line key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the key is the `id` property. When adding to-do items to such an object
    store, they must have an `id` property defined. Additionally, when creating the
    object store, you would specify a *key path* of `id`. The key path tells IndexedDB
    the name of the property that contains the key when using in-line keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use in-line keys and don’t want to worry about maintaining unique
    keys, you can tell IndexedDB to use auto-incrementing keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Out-of-line* keys are not stored within the object. An out-of-line key is
    specified as a separate argument with `add` or `put` when storing an object. Following
    the previous example, you could also use out-of-line keys for to-do items. This
    means the key, or the `id` property, would not be stored as part of the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Transactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IndexedDB operations use *transactions*. A transaction is a logical grouping
    of database tasks executed together to perform some work. They are meant to protect
    the integrity of the data in the database. If one of the operations within a transaction
    fails, the entire transaction fails and any completed work is rolled back to the
    state that existed before the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: A transaction can be read-only or read-write, depending on the type of operation
    you want to perform. You can create a transaction by calling the `transaction`
    method of an IndexedDB database. You pass the names of any object stores that
    should be involved in this transaction and the transaction type (`readonly` or
    `readwrite`).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a transaction, you can get a reference to the object store(s)
    you need. From there you can start performing your database operation. These operations
    return an IndexedDB *request*. All read and write operations in an IndexedDB database
    require a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you perform an operation on an object store, within a transaction, you’ll
    get back a request object that implements the `IDBRequest` interface, and the
    requested work begins asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: When the work is done, the request object triggers a `success` event containing
    the results. For example, a query operation’s `success` event includes the objects
    found by the query.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-1](#figure_indexedDbParts) shows the general flow of an IndexedDB
    operation: creating a transaction, opening the object store, creating a request,
    and listening for events.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The parts of an IndexedDB operation](assets/wacb_0501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. The parts of an IndexedDB operation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating, Reading, and Deleting Objects in a Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a basic IndexedDB database where objects can be created,
    read, and deleted. For example, this could be a contact list database.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a database with a single object store, and define the create/read/delete
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: To create or open the database, call `indexedDB.open` (see [Example 5-1](#example5-1)).
    If the database was not previously created, it triggers an `upgradeneeded` event.
    In the handler for that event, you can create the object store. When the database
    is opened and ready for use, it triggers a `success` event.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-1\. Opening the database
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Before rendering the contacts, you’ll need to load them from the database. For
    this, use a `readonly` transaction and call the object store’s `getAll` method,
    which retrieves all objects in the object store (see [Example 5-2](#example5-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-2\. Reading the contacts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Adding a contact requires a `readwrite` transaction. Pass the contact object
    to the object store’s `add` method (see [Example 5-3](#example5-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-3\. Adding a contact
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You’ll also need a `readwrite` transaction for deleting a contact (see [Example 5-4](#example5-4)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-4\. Deleting a contact
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating the database, you call `indexedDB.open`, which creates a request
    to open the database. If it triggers an `upgradeneeded` event, you can create
    the necessary object store.
  prefs: []
  type: TYPE_NORMAL
- en: Each object in the object store must have a unique key. If you try to add an
    object with a duplicate key, you’ll get an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pattern for the other operations is generally the same:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a transaction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the object store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the desired method on the object store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listen for the `success` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of these functions takes an argument called `onSuccess`. Because IndexedDB
    is asynchronous, you need to wait until an operation is complete before proceeding.
    The `openDatabase` function passes the database to the `onSuccess` function where
    you can save it to a variable for later (see [Example 5-5](#example5-5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-5\. Using the `openDatabase` function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the `contactsDb` variable set, you can pass it to the other database
    operations. When you want to render the contact list, you have to wait until they
    are loaded first, so you’d pass a success handler that receives the contact objects
    and renders them (see [Example 5-6](#example5-6)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-6\. Loading and rendering contacts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, when adding a new contact, you have to wait until the new object
    is added, then load and render the updated contact list (see [Example 5-7](#example5-7)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-7\. Adding and rerendering contacts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t want to be constantly passing around a database reference, you
    could encapsulate your database reference and functions inside a new object, as
    shown in [Example 5-8](#example5-8).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-8\. An encapsulated database
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With this approach, you still need callbacks to notify you when the operations
    are done, but the `contactsDb` object keeps track of the database reference for
    you (and avoids a global variable!).
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading an Existing Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to update an existing database to add a new object store.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a new database version. When handling the `upgradeneeded` event, determine
    if the current user’s database needs the new object store to be added based on
    the version.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you have a to-do list database with a `todos` object store. Later, in
    an update to your app, you want to add a new `people` object store so that tasks
    can be assigned to people.
  prefs: []
  type: TYPE_NORMAL
- en: The `indexedDB.open` call now needs a new version number. You can increment
    the version number to `2` (see [Example 5-9](#example5-9)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-9\. Upgrading a database
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you call `indexedDB.open`, you can specify a database version. If you don’t
    specify a version, it defaults to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever the database is opened, the current database version in the browser
    (if any) is compared with the version number passed to `indexedDB.open`. If the
    database doesn’t exist yet or the version is not up to date, you’ll get an `upgradeneeded`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: In the `upgradeneeded` event handler, you can check the event’s `oldVersion`
    property to determine the browser’s current database version. If the database
    doesn’t exist yet, `oldVersion` is `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the `oldVersion`, you can determine which object stores and indexes
    already exist and which need to be added.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you try to create an object store or index that already exists, the browser
    throws an exception. Before creating these objects, make sure to check the event’s
    `oldVersion` property.
  prefs: []
  type: TYPE_NORMAL
- en: Querying with Indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to efficiently query for data based on a property value other than
    the key (commonly referred to as the “primary key”).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an index on that property, then query on that index.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the example of a database of employees. Each employee has a name, department,
    and a unique ID as its key. You might want to filter the employees by a certain
    department.
  prefs: []
  type: TYPE_NORMAL
- en: When the `upgradeneeded` event is triggered and you create the object store,
    you can also define indexes on that object store (see [Example 5-10](#example5-10)).
    [Example 5-11](#example5-11) shows how to query by the index that is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-10\. Defining an index when the object store is created
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Example 5-11\. Querying the employees by the department index
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An IndexedDB object store can have more than one index, depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: This example uses specific values for querying the index, but an index can also
    be queried for a *range* of keys. These ranges are defined with the `IDBKeyRange`
    interface. A range is defined in terms of its *bounds*—it defines a starting and
    ending point for the range, and all keys within that range are returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `IDBKeyRange` interface supports four types of bounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IDBKeyRange.lowerBound`'
  prefs: []
  type: TYPE_NORMAL
- en: Matches keys starting at the given lower bound
  prefs: []
  type: TYPE_NORMAL
- en: '`IDBKeyRange.upperBound`'
  prefs: []
  type: TYPE_NORMAL
- en: Matches keys ending at the given upper bound
  prefs: []
  type: TYPE_NORMAL
- en: '`IDBKeyRange.bound`'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies a lower *and* upper bound
  prefs: []
  type: TYPE_NORMAL
- en: '`IDBKeyRange.only`'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies a single key only
  prefs: []
  type: TYPE_NORMAL
- en: The `lowerBound`, `upperBound`, and `bound` key ranges also accept a second
    boolean parameter to specify whether the range is open or closed. If `true`, then
    it’s considered an *open* range and excludes the bounds themselves. `IDBKeyRange.upperBound(10)`
    matches all keys less than *or equal to* `10`, but `IDBKeyRange.upperBound(10,
    true)` matches all keys *less than* `10` because 10 itself is excluded. The bounds
    for a key range don’t have to be numbers. Other object types such as strings and
    `Date` objects can be used as keys.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for String Values with Cursors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to query an IndexedDB object store for objects with a string property
    matching a pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a cursor, checking each object’s property to see if it contains the given
    string.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine an employee list application. You want to search for all contacts whose
    name contains the entered text. For this example, assume the database has already
    been opened and the object store is called `employees`.
  prefs: []
  type: TYPE_NORMAL
- en: A *cursor* iterates through each object in the object store. It stops at each
    object, where you can access the current item and/or move on to the next item.
    You can check if the contact name includes the query text and collect the results
    in an array (see [Example 5-12](#example5-12)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-12\. Searching string values with a cursor
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you call `openCursor` on the object store, it returns an `IDBRequest` request
    object. It fires a `success` event for the first object in the store. For every
    `success` event, the request has a `result` property that is the cursor object
    itself. You can access the current value that the cursor is pointing to with its
    `value` property.
  prefs: []
  type: TYPE_NORMAL
- en: The success handler checks the current object’s first and last name fields,
    converting both to lowercase first so that it’s a case-insensitive search. If
    it matches, it’s added to a result array.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re done processing the current object, you can call `continue` on the
    cursor. This advances to the next object and emits another `success` event. If
    you have reached the end of the object store, and there are no objects left, `request.result`
    is `null`. When this happens, you know that the search is complete and you have
    the matching contacts.
  prefs: []
  type: TYPE_NORMAL
- en: At each iteration of the cursor, any objects that match the search query are
    added to a `results` array. This is passed to the success callback when the cursor
    is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Paginating a Large Data Set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to break up a large data set into pages, each with an offset and a
    length.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a cursor to skip to the first item on the requested page and collect the
    desired number of items (see [Example 5-13](#example5-13)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-13\. Using a cursor to get a page of records
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may not want to start at the first record—that’s what the `offset` argument
    is for. The first time through, the event handler calls `advance` with the requested
    offset. This tells the cursor to jump ahead to the starting item you want. Technically
    speaking, `advance` doesn’t move to the specified offset but rather advances by
    the given number *starting at the current index*. For this example, though, it’s
    effectively the same because it always starts at index zero.
  prefs: []
  type: TYPE_NORMAL
- en: You can’t start collecting values until the next iteration of the cursor. To
    handle this, there’s a `skipped` flag that is set to indicate that the cursor
    has now skipped ahead. The next time through, this flag is seen as `true` and
    it won’t try to skip again.
  prefs: []
  type: TYPE_NORMAL
- en: Once the cursor has advanced, another `success` event is fired. Now the cursor
    is pointing to the first item to be collected (assuming there are items remaining—the
    `cursor` object is `null` if there are no more objects). It adds the current value
    to the result array. Finally, it calls `continue` on the cursor to move on to
    the next value.
  prefs: []
  type: TYPE_NORMAL
- en: This process continues until the result array has reached the requested length,
    or there are no more objects remaining in the object store. This would happen
    if `offset + length` was greater than the number of objects in the object store.
  prefs: []
  type: TYPE_NORMAL
- en: Once there are no more objects to collect, the full page of results is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Using Promises with the IndexedDB API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want a `Promise`-based API for working with an IndexedDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `Promise` wrappers around IndexedDB requests. When the request triggers
    the `success` event, resolve the `Promise`. If it triggers the `error` event,
    reject it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 5-14](#code_promiseCreateDb) creates a wrapper around the `indexedDb.open`
    function. It opens or creates the database and returns a `Promise` that is resolved
    when the database is ready.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-14\. Creating a database with a `Promise`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To load some data from the database, [Example 5-15](#code_promiseGetAllDb) provides
    a wrapper around the `getAll` method. It requests the data, then returns a `Promise`
    that is resolved with an array of the objects when they have been loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-15\. Getting objects from a store with a `Promise`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have an API that returns `Promise`s, you can use `then` or `async`/`await`
    when working with your database (see [Example 5-16](#code_awaitDatabase)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-16\. Using the promisified database
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a `Promise` API with `async`/`await` removes the need to pass success
    handler callbacks around. As [Example 5-16](#code_awaitDatabase) shows, you can
    also take advantage of `Promise` chaining to avoid nested callbacks and event
    handlers.
  prefs: []
  type: TYPE_NORMAL
