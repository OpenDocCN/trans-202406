- en: Chapter 2\. Declarative Kubernetes Cluster Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。声明性Kubernetes集群管理
- en: 'When you create a CRD, you can provide a custom controller with the proper
    logic to maintain the associated objects. In this way, you can extend the Kubernetes
    declarative API to embrace new kinds of objects. This is exactly the approach
    Cluster API uses to manage Kubernetes: it provides resources to represent Kubernetes
    clusters and the infrastructure itself.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建CRD时，可以为其提供适当的控制器逻辑来维护关联的对象。通过这种方式，您可以扩展Kubernetes声明性API以包含新类型的对象。这正是Cluster
    API用来管理Kubernetes的方法：它提供资源来表示Kubernetes集群及其基础设施。
- en: Cluster API is a project created by the Kubernetes Cluster Lifecycle special
    interest group (SIG) to provide a consistent, modular platform for declarative
    Kubernetes cluster management. Leveraging kubeadm, Cluster API uses Kubernetes-style
    APIs to create, configure, and manage Kubernetes clusters and their infrastructure
    for a variety of deployment environments and providers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API是由Kubernetes集群生命周期特别兴趣小组（SIG）创建的项目，旨在提供一致的、模块化的声明性Kubernetes集群管理平台。利用kubeadm，Cluster
    API使用类似于Kubernetes的API来创建、配置和管理不同部署环境和提供程序的Kubernetes集群及其基础设施。
- en: Goals of Cluster API
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cluster API的目标
- en: The Kubernetes Cluster Lifecycle SIG created Cluster API to make cluster lifecycle
    management easier. Although Kubernetes itself has APIs for orchestrating containers
    regardless of the environment or provider, it doesn’t provide a consistent way
    to create new machines on arbitrary infrastructure. This means cluster lifecycle
    has to be handled uniquely depending on the environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群生命周期SIG创建了Cluster API以简化集群生命周期管理。尽管Kubernetes本身具有API来编排容器，而不管环境或提供程序如何，但它没有提供一致的方法来在任意基础设施上创建新的机器。这意味着集群生命周期必须根据环境独立处理。
- en: 'The primary charter of the Kubernetes Cluster Lifecycle SIG is to make it easier
    to create, manage, upgrade, and retire Kubernetes clusters. The group decided
    to develop Cluster API as a framework for managing Kubernetes infrastructure across
    environments, with several goals in mind:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群生命周期SIG的主要任务是简化创建、管理、升级和废弃Kubernetes集群的过程。该组决定开发Cluster API作为跨环境管理Kubernetes基础设施的框架，有几个目标：
- en: Declarative cluster lifecycle management
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性集群生命周期管理
- en: Cluster API’s declarative approach for managing Kubernetes cluster lifecycle
    makes it easy to integrate with GitOps, a declarative operations framework that
    applies DevOps application development practices to infrastructure automation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API的声明性方法用于管理Kubernetes集群生命周期，使其与GitOps轻松集成，后者是一个将DevOps应用开发实践应用于基础设施自动化的声明性操作框架。
- en: Infrastructure abstraction
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施抽象化
- en: Cluster API provides a consistent way to provision and maintain cluster infrastructure
    across different environments, both in the cloud and on premises. This means managing
    not just compute and storage but also networking and security, including implementing
    security best practices such as subnets and bastion hosts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API提供了一种在云上和本地环境中跨不同环境管理集群基础设施的一致方法，这意味着管理的不仅仅是计算和存储，还包括网络和安全，包括实施子网和堡垒主机等安全最佳实践。
- en: Integration with existing components
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与现有组件的集成
- en: Cluster API is designed to work with existing components that rely on kubeadm,
    cloud-init, and other tools to initialize a cluster rather than reinventing and
    reimplementing what already works. Even the Cluster API approach to managing cluster
    infrastructure is familiar, as it’s designed to resemble the way developers manage
    workloads on Kubernetes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API旨在与依赖于kubeadm、cloud-init和其他工具来初始化集群的现有组件一起工作，而不是重新发明和重新实现已经运行良好的内容。即使是Cluster
    API管理集群基础设施的方式也很熟悉，因为它设计成类似于开发者在Kubernetes上管理工作负载的方式。
- en: Easy adoption
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 易于采用
- en: Cluster API is designed to be adopted as quickly or as slowly as necessary.
    A team can adopt Cluster API all at once or in stages, or they can even choose
    to adopt only part of Cluster API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API被设计成可以根据需要快速或缓慢地采纳。团队可以一次性全面采用Cluster API，也可以分阶段采用，甚至可以选择只部分采用Cluster
    API。
- en: A modular approach
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化方法
- en: To be adaptable to different deployment environments and infrastructure providers,
    Cluster API uses a modular, extensible architecture. The goal is to provide consistent,
    repeatable operations that work the same way even on unforeseen infrastructure.
    A modular approach also means standardizing default operations for common operations
    and the ability to use alternative implementations when needed. For example, although
    Cluster API leverages kubeadm, it can use other bootstrap providers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应不同的部署环境和基础设施提供商，Cluster API采用了一种模块化、可扩展的架构。其目标是提供一致、可重复的操作，即使在未预见的基础设施上也能以相同的方式运行。模块化方法还意味着标准化常见操作的默认操作以及在需要时使用替代实现的能力。例如，虽然Cluster
    API利用了kubeadm，但也可以使用其他引导提供者。
- en: The overall goal of Cluster API is to provide a centralized, consistent set
    of tools that make it possible to manage multiple Kubernetes clusters in different
    environments without having to worry about the underlying infrastructure and without
    having to build large assortments of custom tools.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API的总体目标是提供一套集中、一致的工具，使得可以在不同环境中管理多个Kubernetes集群，无需担心底层基础设施，也无需构建大量自定义工具。
- en: Cluster API Concepts
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cluster API概念
- en: 'Cluster API uses modular, interchangeable components as the basis for a complete
    cluster infrastructure management platform that automates difficult cluster lifecycle
    management tasks such as creating, scaling, repairing, and upgrading a cluster.
    In essence, Cluster API is a modular abstraction layer that makes it possible
    to treat a variety of objects on different infrastructure substrates consistently.
    The core components of Cluster API remain the same from one environment to another,
    while the modular parts of Cluster API adapt to each environment:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API使用模块化、可互换的组件作为完整集群基础设施管理平台的基础，自动化了创建、扩展、修复和升级集群等繁琐的集群生命周期管理任务。实质上，Cluster
    API是一个模块化的抽象层，使得可以在不同基础设施底层上一致地处理各种对象。Cluster API的核心组件在不同环境中保持不变，而Cluster API的模块化部分则适应每个环境：
- en: CRDs model the VMs, physical servers, and other cluster components.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRDs模型化了虚拟机、物理服务器和其他集群组件。
- en: Providers implement the correct capabilities and services for different infrastructure
    environments.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者实现了适用于不同基础设施环境的正确能力和服务。
- en: Cluster API manages these resources declaratively, meaning that instead of specifying
    how to create and manage the infrastructure, you need only to define the desired
    state of the cluster. Instead of a set of commands, the code becomes a repeatable
    specification that you can reuse for multiple deployments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API以声明方式管理这些资源，这意味着不需要指定如何创建和管理基础设施，只需要定义集群的期望状态。代码成为可重复使用于多个部署的规范，而不是一组命令。
- en: '[Figure 2-1](#fig_1_cluster_api_modular_architecture) shows how providers implement
    the modular approach to Cluster API architecture, making it possible to tailor
    cluster lifecycle management to any infrastructure.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-1](#fig_1_cluster_api_modular_architecture)显示了提供者如何实现Cluster API架构的模块化方法，从而使得可以根据任何基础设施定制集群生命周期管理。'
- en: '![Cluster API modular architecture](assets/cdkm_0201.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Cluster API模块化架构](assets/cdkm_0201.png)'
- en: Figure 2-1\. Cluster API modular architecture
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. Cluster API模块化架构
- en: Custom Resource Definitions and Controllers
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义资源定义和控制器
- en: 'Just as Kubernetes provides abstractions for objects such as nodes, namespaces,
    and pods, Cluster API uses Kubernetes CRDs to represent the infrastructure and
    configuration that support a Kubernetes cluster. Each CRD is a declarative specification
    for a component of infrastructure. Cluster API introduces several CRDs for managing
    cluster infrastructure, including:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Kubernetes为节点、命名空间和Pod等对象提供抽象一样，Cluster API使用Kubernetes CRD来表示支持Kubernetes集群的基础设施和配置。每个CRD都是用于组件基础设施的声明性规范。Cluster
    API引入了几个CRD来管理集群基础设施，包括：
- en: '`Cluster`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cluster`'
- en: Specifies cluster details like API version, the IP address blocks for pods and
    services, the API endpoints, and the service domains
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 指定集群详细信息，如API版本、用于Pod和服务的IP地址块、API端点和服务域
- en: '`ControlPlane`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ControlPlane`'
- en: Controls the configuration and lifecycle of the control plane nodes
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 控制控制平面节点的配置和生命周期
- en: '`Machine`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Machine`'
- en: Specifies the configuration of an individual node
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 指定单个节点的配置
- en: '`MachineHealthCheck`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`MachineHealthCheck`'
- en: Determines when a node is unhealthy and needs to be replaced
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 决定节点何时不健康并需要被替换
- en: '`MachineSet`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`MachineSet`'
- en: Specifies the desired number of `Machine` resources to maintain in a specific
    group
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 指定在特定组中维护的 `Machine` 资源的期望数量。
- en: '`MachineDeployment`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`MachineDeployment`'
- en: Manages changes to `Machines` by destroying and replacing them as needed
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过根据需要销毁和替换它们来管理 `Machines` 的变更。
- en: '`MachineClass`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`MachineClass`'
- en: Makes it easier to reuse machine specifications across `Machines`, `MachineSets`,
    and `MachineDeployments`
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让在 `Machines`、`MachineSets` 和 `MachineDeployments` 中重复使用机器规格更加容易。
- en: Each CRD has a corresponding *controller*, a service that maintains the specified
    state. A controller ensures that the state of its corresponding object and the
    state of the world outside the object both match the desired state. This is called
    *reconciling* the actual state with the specification. The Cluster API Core Manager,
    also known as the Controller Manager, uses these controllers when managing the
    lifecycle of each cluster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 CRD 都有一个相应的 *controller*，一个维护指定状态的服务。控制器确保其对应对象的状态和对象外部世界的状态都与所需状态匹配。这称为
    *reconciling* 实际状态与规范之间的差异。Cluster API 核心管理器，也称为控制器管理器，在管理每个集群的生命周期时使用这些控制器。
- en: When you specify the characteristics of a cluster, control plane, or machine,
    you do so by creating a YAML file called a *manifest*, which follows the schema
    defined in the corresponding CRD. For every parameter defined in the CRD, the
    YAML file provides a value that tells Cluster API how to create the custom resource.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您指定集群、控制平面或机器的特性时，通过创建一个名为 *manifest* 的 YAML 文件来实现，该文件遵循相应 CRD 中定义的模式。对于 CRD
    中定义的每个参数，YAML 文件提供一个值，告诉 Cluster API 如何创建自定义资源。
- en: Providers
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Providers
- en: 'Providers are modules that make Cluster API work in different environments.
    There are three types of providers:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Providers 是在不同环境中使 Cluster API 运行的模块。有三种类型的 providers：
- en: Infrastructure providers
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施 providers
- en: Create and access infrastructure and resources on specific environments and
    infrastructure hosts
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定环境和基础设施主机上创建和访问基础设施和资源。
- en: Control plane provider
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面 provider
- en: Instantiates a Kubernetes control plane and starts its required services
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化 Kubernetes 控制平面并启动其所需的服务。
- en: Bootstrap provider
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 引导 provider
- en: Generates a script that brings up a Kubernetes node on a machine, which encapsulates
    configuration logic for initializing different distributions of Kubernetes nodes
    like kubeadm, k8s, microk8s, and so forth
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个脚本，在机器上启动一个 Kubernetes 节点，该脚本封装了初始化不同 Kubernetes 节点分发（如 kubeadm、k8s、microk8s
    等）的配置逻辑。
- en: With Cluster API, you can use a single declarative API to deploy a pool of VMs
    or work directly on bare metal, using the correct commands and services for your
    chosen provider, and bring up a Kubernetes cluster. Each provider implements the
    best practices for the environment for which it’s designed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cluster API，您可以使用单一声明性 API 部署一组 VM 或直接在裸金属上工作，使用适合您选择的 provider 的正确命令和服务，并启动一个
    Kubernetes 集群。每个 provider 实现了针对其设计环境的最佳实践。
- en: Cluster API providers let you use the same declarative specifications to bring
    up similar clusters in different environments or on different infrastructure hosts.
    [Figure 2-2](#fig_2_how_crds_and_providers_abstract_system_resources_a) shows
    how CRDs and providers create abstractions that make it possible to manage resources
    and infrastructure consistently across environments.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API providers 允许您使用相同的声明性规范在不同环境或不同基础设施主机上启动类似的集群。[Figure 2-2](#fig_2_how_crds_and_providers_abstract_system_resources_a)
    展示了 CRDs 和 providers 如何创建抽象，从而可以跨环境一致地管理资源和基础设施。
- en: '![How CRDs and providers abstract system resources and infrastructure](assets/cdkm_0202.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![CRDs 和 providers 如何抽象系统资源和基础设施](assets/cdkm_0202.png)'
- en: Figure 2-2\. How CRDs and providers abstract system resources and infrastructure
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. CRDs 和 providers 如何抽象系统资源和基础设施
- en: The ability to work consistently across different types of infrastructure makes
    it easy to work across deployments on premises and in public clouds, private clouds,
    or edge locations. This provides consistency regardless of substrate, which is
    especially important in diverse geographical regions with different providers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在不同类型基础设施上一致工作，使得在本地部署和公共云、私有云或边缘位置上部署变得简单。这提供了跨不同 provider 的一致性，这在具有不同 provider
    的多样化地理区域尤为重要。
