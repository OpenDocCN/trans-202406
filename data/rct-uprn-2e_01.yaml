- en: Chapter 1\. Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get started on the journey to mastering application development using
    React. In this chapter, you will learn how to set up React and write your first
    “Hello World” web app.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First things first: you need to get a copy of the React library. There are
    various ways to go about it. Let’s go with the simplest one that doesn’t require
    any special tools and can get you learning and hacking away in no time.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder for all the code in the book in a location where you’ll be able
    to find it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a */react* folder to keep the React library code separate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to add two files: one is React itself, the other is the ReactDOM
    add-on. You can grab the latest 17.* versions of the two from the [*unpkg.com*](https://unpkg.com)
    host, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that React doesn’t impose any directory structure; you’re free to move
    to a different directory or rename *react.js* however you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to download the libraries; you can use them directly from [*unpkg.com*](https://unpkg.com).
    However, having them locally makes it possible to learn anywhere and without an
    internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `@17` in the URLs shown in the preceding example gets you a copy of the
    latest React 17, which is current at the time of writing this book. Omit `@17`
    to get the latest available React version. Alternatively, you can explicitly specify
    the version you require, for example `@17.0.2`.
  prefs: []
  type: TYPE_NORMAL
- en: Hello React World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start with a simple page in your working directory (*~/reactbook/01.01.hello.html*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can find all the code from this book [in the accompanying repository](https://github.com/stoyan/reactbook2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Only two notable things are happening in this file:'
  prefs: []
  type: TYPE_NORMAL
- en: You include the React library and its Document Object Model (DOM) add-on (via
    `<script src>` tags)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You define where your application should be placed on the page (`<div id="app">`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can always mix regular HTML content as well as other JavaScript libraries
    with a React app. You can also have several React apps on the same page. All you
    need is a place in the DOM where you can point React to and say “do your magic
    right here.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s add the code that says “hello”—update *01.01.hello.html* and replace
    `// my app''s code` with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Load *01.01.hello.html* in your browser and you’ll see your new app in action
    (as depicted in [Figure 1-1](#FIG0101)).
  prefs: []
  type: TYPE_NORMAL
- en: '![rur2 0101](Images/rur2_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. “Hello world!” in action
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Congratulations, you’ve just built your first React application!
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-1](#FIG0101) also shows the *generated* code in Chrome DevTools where
    you can see that the contents of the `<div id="app">` placeholder was replaced
    with the contents generated by your React app.'
  prefs: []
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few points of interest in the code that made your first app work.
  prefs: []
  type: TYPE_NORMAL
- en: First, you see the use of the `React` object. All of the APIs available to you
    are accessible via this object. The API is intentionally minimal, so there are
    not a lot of method names to remember.
  prefs: []
  type: TYPE_NORMAL
- en: You can also see the `ReactDOM` object. It has only a handful of methods, `render()`
    being the most useful. `ReactDOM` is responsible for rendering the app *in the
    browser*. You can, in fact, create React apps and render them in different environments
    outside the browser—for example in canvas, or natively in Android or iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Next, there is the concept of *components*. You build your UI using components
    and you combine these components in any way you see fit. In your applications,
    you’ll end up creating your custom components, but to get you off the ground,
    React provides wrappers around HTML DOM elements. You use the wrappers via the
    `React.createElement` function. In this first example, you can see the use of
    the `h1` element. It corresponds to the `<h1>` in HTML and is available to you
    using a call to `React.createElement('h1')`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you see the good old `document.getElementById('app')` DOM access. You
    use this to tell React where the application should be located on the page. This
    is the bridge crossing over from the DOM manipulation as you know it to React-land.
  prefs: []
  type: TYPE_NORMAL
- en: Once you cross the bridge from DOM to React, you don’t have to worry about DOM
    manipulation anymore, because React does the translation from components to the
    underlying platform (browser DOM, canvas, native app). In fact, not worrying about
    the DOM is one of the great things about React. You worry about composing the
    components and their data—the meat of the application—and let React take care
    of updating the DOM most efficiently. No more hunting for DOM nodes, `firstChild`,
    `appendChild()` and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You *don’t have to* worry about DOM, but that doesn’t mean you cannot. React
    gives you “escape hatches” if you want to go back to DOM-land for any reason you
    may need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know what each line does, let’s take a look at the big picture.
    What happened is this: you rendered one React component in a DOM location of your
    choice. You always render one top-level component, and it can have as many child
    (and grandchild, etc.) components as needed. Even in this simple example, the
    `h1` component has a child—the “Hello world!” text.'
  prefs: []
  type: TYPE_NORMAL
- en: React.createElement()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you now know, you can use a number of HTML elements as React components via
    the `React.createElement()` method. Let’s take a close look at this API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, the “Hello world!” app looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter to `createElement` is the type of element to be created.
    The second (which is `null` in this case) is an object that specifies any properties
    (think DOM attributes) that you want to pass to your element. For example, you
    can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The HTML generated by this example is shown in [Figure 1-2](#FIG0102).
  prefs: []
  type: TYPE_NORMAL
- en: '![rur2 0102](Images/rur2_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. HTML generated by a `React.createElement()` call
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The third parameter (`"Hello world!"` in this example) defines a child of the
    component. The simplest case is just a text child (a `Text` node in DOM-speak)
    as you see in the preceding code. But you can have as many nested children as
    you like and you pass them as additional parameters. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example, this time with nested components (result shown in [Figure 1-3](#FIG0103))
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![rur2 0103](Images/rur2_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. HTML generated by nesting `React.createElement()` calls
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can see in [Figure 1-3](#FIG0103) that the DOM generated by React has the
    `<em>` element as a child of the `<span>` which is in turn a child of the `<h1>`
    element (and a sibling of the “world” text node).
  prefs: []
  type: TYPE_NORMAL
- en: JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you start nesting components, you quickly end up with a lot of function
    calls and parentheses to keep track of. To make things easier, you can use the
    *JSX syntax*. JSX is a little controversial: people often find it repulsive at
    first sight (ugh, XML in my JavaScript!), but indispensable after.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It’s not quite clear what the acronym JSX stands for, but it’s most likely JavaScriptXML
    or JavaScript Syntax eXtension. The official home of the open-source project is
    [*https://facebook.github.io/jsx*](https://facebook.github.io/jsx).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the previous snippet but this time using JSX syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is much more readable. This syntax looks very much like HTML and you already
    know HTML. However it’s not valid JavaScript that browsers can understand. You
    need to *transpile* this code to make it work in the browser. Again, for learning
    purposes, you can do this without special tools. You need the Babel library which
    translates cutting-edge JavaScript (and JSX) to old school JavaScript that works
    in ancient browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Setup Babel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like with React, get a local copy of Babel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you need to update your learning template to include Babel. Create a file
    *01.04.hellojsx.html* like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note how `<script>` becomes `<script type="text/babel">`. This is a trick where,
    by specifying an invalid `type`, the browser ignores the code. This gives Babel
    a chance to parse and transform the JSX syntax into something the browser can
    run.
  prefs: []
  type: TYPE_NORMAL
- en: Hello JSX World
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this bit of setup out of the way, let’s try JSX. Replace the `// my app''s
    code` part in the preceding HTML with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The result of running this in the browser is shown in [Figure 1-4](#FIG0104).
  prefs: []
  type: TYPE_NORMAL
- en: '![rur2 0104](Images/rur2_0104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. Hello JSX world
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On Transpilation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s great that you got the JSX and Babel to work, but maybe a few more words
    won’t hurt, especially if you’re new to Babel and the process of transpilation.
    If you’re already familiar, feel free to skip this part where we familiarize a
    bit with the terms *JSX*, *Babel*, and *transpilation*.
  prefs: []
  type: TYPE_NORMAL
- en: '*JSX* is a separate technology from React and is completely optional. As you
    see, the first examples in this chapter didn’t even use JSX. You can opt into
    never coming anywhere near JSX at all. But it’s very likely that once you try
    it, you won’t go back to function calls.'
  prefs: []
  type: TYPE_NORMAL
- en: The process of *transpilation* is a process of taking source code and rewriting
    it to accomplish the same results but using syntax that’s understood by older
    browsers. It’s different than using *polyfills*. An example of a polyfill is adding
    a method to `Array.prototype` such as `map()`, which was introduced in ECMAScript5,
    and making it work in browsers that support only ECMAScript3\. A polyfill is a
    solution in pure JavaScript-land. It’s a good solution when adding new methods
    to existing objects or implementing new objects (such as `JSON`). But it’s not
    sufficient when new syntax is introduced into the language. Any new syntax in
    the eyes of a browser that does not support it is just invalid and throws a parse
    error. There’s no way to polyfill it. New syntax, therefore, requires a compilation
    (transpilation) step so it’s transformed *before* it’s served to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Transpiling JavaScript is getting more and more common as programmers want to
    use the latest JavaScript (ECMAScript) features without waiting for browsers to
    implement them. If you already have a build process set up (that does, for example,
    minification or any other code transformation), you can simply add the JSX step
    to it. Assuming you *don’t* have a build process, you’ll see later in the book
    the necessary steps of setting one up.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s leave the JSX transpilation on the client side (in the browser)
    and move on with learning React. Just be aware that this is only for education
    and experimentation purposes. Client-side transforms are not meant for live production
    sites as they are slower and more resource intensive than serving already transpiled
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next: Custom Components'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, you’re done with the bare-bones “Hello world” app. Now you know
    how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the React library for experimentation and learning (it’s really just
    a question of a few `<script>` tags)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render a React component in a DOM location of your choice (e.g., `ReactDOM.render(reactWhat,
    domWhere)`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use built-in components, which are wrappers around regular DOM elements (e.g.,
    `React.createElement(element, attributes, content, children)`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The real power of React, though, comes when you start using custom components
    to build (and update!) the user interface (UI) of your app. Let’s learn how to
    do just that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
