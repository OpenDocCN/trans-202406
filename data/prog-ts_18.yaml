- en: Appendix E. Triple-Slash Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Triple-slash directives are just regular JavaScript comments that TypeScript
    looks for to do things like adjust compiler settings for a specific file, or indicate
    that your file depends on another file. Put your directives at the top of your
    file, before any code. Triple-slash directives look like this (each directive
    is a triple-slash, `///`, followed by an XML tag):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'TypeScript supports a handful of triple-slash directives. [Table E-1](#useful-directive-table)
    lists the ones you are most likely to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`amd-module`'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [“The amd-module Directive”](ch12.html#triple-slash-amd) to learn
    more.
  prefs: []
  type: TYPE_NORMAL
- en: '`lib`'
  prefs: []
  type: TYPE_NORMAL
- en: The `lib` directive is a way to indicate to TypeScript which of TypeScript’s
    `lib`s your module depends on, which you may want to do if your project doesn’t
    have a *tsconfig.json*. Declaring the `lib`s you depend on in your *tsconfig.json*
    is almost always a better option.
  prefs: []
  type: TYPE_NORMAL
- en: '`path`'
  prefs: []
  type: TYPE_NORMAL
- en: When using TSC’s `outFile` option, use the `path` directive to declare a dependency
    on another file, so that the other file appears earlier in your compiled output
    than the dependent file does. If your project uses `import`s and `export`s, you
    likely won’t ever use this directive.
  prefs: []
  type: TYPE_NORMAL
- en: '`type`'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [“The types Directive”](ch12.html#import-elision) to learn more
    about the `type` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Table E-1\. Triple-slash directives
  prefs: []
  type: TYPE_NORMAL
- en: '| Directive | Syntax | Use it to… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `amd-module` | `<amd-module name="MyComponent" />` | Declare export names
    when compiling to AMD modules |'
  prefs: []
  type: TYPE_TB
- en: '| `lib` | `<reference lib="dom" />` | Declare which of TypeScript’s built-in
    `lib`s your type declarations depend on |'
  prefs: []
  type: TYPE_TB
- en: '| `path` | `<reference path="./path.ts" />` | Declare which TypeScript files
    your module depends on |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | `<reference types="./path.d.ts" />` | Declare which type declaration
    files your module depends on |'
  prefs: []
  type: TYPE_TB
- en: Internal Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will probably never use the `no-default-lib` directive ([Table E-2](#triple-slash-internal-table))
    in your own code.
  prefs: []
  type: TYPE_NORMAL
- en: Table E-2\. Internal triple-slash directives
  prefs: []
  type: TYPE_NORMAL
- en: '| Directive | Syntax | Use it to… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `no-default-lib` | `<reference no-default-lib="true" />` | Tell TypeScript
    to not use any `lib`s at all for this file |'
  prefs: []
  type: TYPE_TB
- en: Deprecated Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should never use the `amd-dependency` directive ([Table E-3](#triple-slash-deprecated-table)),
    and instead stick to a regular `import`.
  prefs: []
  type: TYPE_NORMAL
- en: Table E-3\. Deprecated triple-slash directives
  prefs: []
  type: TYPE_NORMAL
- en: '| Directive | Syntax | Instead use… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `amd-dependency` | `<amd-dependency path="./a.ts" name="MyComponent" />`
    | `import` |'
  prefs: []
  type: TYPE_TB
