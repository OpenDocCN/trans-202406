- en: Chapter 12\. Using IDE Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programming with an
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: IDE the first time feels
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: like superpowers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: No popular programming language would be complete without syntax highlighting
    and other IDE features to help developing in it. One of TypeScript’s greatest
    strengths is that its language service provides a suite of powerful development
    helpers for JavaScript and TypeScript code. This chapter will cover some of the
    most useful items.
  prefs: []
  type: TYPE_NORMAL
- en: 'I highly recommend you try these IDE features out on the TypeScript projects
    you’ve built alongside this book. Although all the examples and screenshots in
    this chapter are of VS Code, my favorite editor, any IDE with TypeScript support
    will support most or all of this chapter. As of 2022 that includes the native
    support or TypeScript plugins for at least all of: Atom, Emacs, Vim, Visual Studio,
    and WebStorm.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This chapter is a nonexhaustive list of some of the more commonly useful TypeScript
    IDE features, along with any default shortcuts for them in VS Code. You’ll likely
    find more as you keep writing TypeScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Many IDE features are generally made available in the context menu surfaced
    by right-clicking on a name in code. IDEs such as VS Code generally show keyboard
    shortcuts in the context menu too. Getting comfortable with your IDE’s keyboard
    shortcuts can help you write code and execute refactors much more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the list of commands and their shortcuts in VS Code for
    a variable in TypeScript ([Figure 12-1](#ide_context_menu)).
  prefs: []
  type: TYPE_NORMAL
- en: '![VS Code showing a list of commands in the right-click context menu for a
    variable.](Images/lets_1201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. VS Code showing a list of commands in the right-click context
    menu for a variable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In VS Code, as with most applications, up and down arrows select drop-down options,
    and Enter activates one.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers generally spend much more time reading code rather than actively
    writing it. Tools that assist in navigating code are supremely useful for speeding
    that time up. Many of the features provided by the TypeScript language service
    are geared toward learning about code: in particular, jumping between type definitions
    or values in code and where they’re used.'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll now go through commonly used navigation options from the context menu along
    with their VS Code shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Definitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TypeScript can start from a reference to a type definition or value and navigate
    you back to its original location in code. VS Code also provides a couple of ways
    to backtrace in that way:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Definition (F12) navigates directly to where a requested name was originally
    defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cmd (Mac) / Ctrl (Windows) + clicking a name triggers going to definition as
    well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peek > Peek Definition (Option (Mac) / Alt (Windows) + F12) brings up a Peek
    box showing the definition instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to Type Definition is a specialized version of Go to Definition that goes
    to the definition of whatever type a value is. For an instance of a class or interface,
    it will reveal the class or interface itself instead of where the instance is
    defined.
  prefs: []
  type: TYPE_NORMAL
- en: These screenshots show finding the definition of a `data` variable imported
    into a file with Go to Definition ([Figure 12-2](#variable_go_to_definition)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: going to definition on a variable name; right: the resultant opened
    data.ts file.](Images/lets_1202.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-2\. Left: going to definition on a variable name; right: the resultant
    opened data.ts file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When the definition is declared in your own code, such as a relative file, the
    editor will bring you to that file. Modules outside your code such as npm packages
    will commonly use *.d.ts* declaration files instead.
  prefs: []
  type: TYPE_NORMAL
- en: Finding References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given a type definition or value, TypeScript can show you a list of all the
    references to it, or places it’s used in the project. VS Code provides a couple
    ways to visualize that list.
  prefs: []
  type: TYPE_NORMAL
- en: Go to References (Shift + F12) shows a list of references to that type definition
    or value—starting with itself—in an expandable Peek box just below the right-clicked
    name.
  prefs: []
  type: TYPE_NORMAL
- en: For example, here’s a Go to References of a `data` variable’s declaration in
    one file, *data.ts*, that shows both the declaration and its usage in another
    file, *index.ts* ([Figure 12-3](#ide_go_to_references)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Peek menu showing references to a variable.](Images/lets_1203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-3\. Peek menu showing references to a variable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: That Peek box contains a file view of the referencing file. You can use that
    file—type, run editor commands, and so on—as if it were a regularly opened file.
    You can also double-click in the Peek box’s view of a file to open that file.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking through the list of file names on the right of the Peek box will switch
    the Peek box’s file view to the clicked file. Double-clicking a line of a file
    from the list will open the file and select its matched reference.
  prefs: []
  type: TYPE_NORMAL
- en: Here, VS Code is showing the same `data` variable’s declaration and usage, but
    expanded in the sidebar view on the right ([Figure 12-4](#ide_go_to_references_other_file)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Peek menu showing an opened reference to a variable.](Images/lets_1204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-4\. Peek menu showing an opened reference to a variable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Find All References (Option (Mac) / Alt (Windows) + Shift + F12) also shows
    a list of references, but in a sidebar view that stays visible after code navigation.
    This can be useful for opening or performing actions on more than just one reference
    at a time ([Figure 12-5](#ide_find_all_references)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Find All References menu for a variable.](Images/lets_1205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-5\. Find All References menu for a variable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Finding Implementations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to Implementations (Cmd (Mac) / Ctrl (Windows) + F12) and Find All Implementations
    are specialized versions of Go To / Find All References made for interfaces and
    abstract class methods. They find all implementations of an interface or abstract
    method in code ([Figure 12-6](#ide_find_all_implementations)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Find All Implementations menu for an interface.](Images/lets_1206.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-6\. Find All Implementations menu for an `AI` interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These are particularly helpful when you’re specifically searching for how values
    typed as a type such as class or interface are used. Find All References might
    be too noisy, as it will also show definitions of and other type references to
    the class or interface.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IDE language services such as VS Code’s TypeScript service run in the background
    of your editor and react to actions taken in files. They see edits to files as
    you type them—even before changes are saved to files. Doing so enables a slew
    of features that help automate common tasks when writing TypeScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Completing Names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript’s APIs can be used by editors to fill in names that exist in the
    same file as well. When you start typing a name, such as when providing a previously
    declared variable as a function argument, editors using TypeScript will often
    suggest autocompletions with a list of variables with matching names. Clicking
    the name in the list with your mouse or hitting the Enter key will complete the
    name ([Figure 12-7](#variable_auto_import)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: autocompletions on a variable typed as `dat`; right: the result of
    autocompleting to an imported `data`.](Images/lets_1207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-7\. Left: autocompletions on a variable typed as `dat`; right: the
    result of autocompleting to an imported `data`'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Automatic import additions will be offered for package dependencies as well.
    These screenshots show a TypeScript file’s imports and module code before and
    after `sortBy` is imported from the `"lodash"` package ([Figure 12-8](#package_auto_import)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: autocompletions on a variable typed as `sortBy`; right: the result
    of autocompleting to an imported `sortBy` from lodash.](Images/lets_1208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-8\. Left: autocompletions on a variable typed as `sortBy`; right:
    the result of autocompleting to an imported `sortBy` from `lodash`'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Automatic imports are one of my favorite features of the TypeScript experience.
    They greatly expedite the often laborious processes of figuring out where imports
    come from and then explicitly typing them out.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if you start typing the name of a property from a typed value, editors
    powered by TypeScript will offer to autocomplete to known properties of the value’s
    type ([Figure 12-9](#property_auto_complete)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: autocompletions on an array property typed as `forE`; right: the result
    of autocompleting to `.forEach`](Images/lets_1209.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-9\. Left: autocompletions on a property typed as `forE`; right: the
    result of autocompleting to `.forEach`'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Automatic Import Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you rename a file or move it from one folder to another, you may need to
    update potentially many import statements for the file. Updates may need to be
    made both in that file itself and in any other file that imports from it.
  prefs: []
  type: TYPE_NORMAL
- en: If you drag and drop a file or rename it to a nested folder path using the VS
    Code file explorer, VS Code will offer to use TypeScript to update file paths
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: These screenshots show a *src/logging.ts* file being renamed to a *src/shared/logging.ts*
    location, and file imports getting updated in a corresponding manner ([Figure 12-10](#file_move)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: a `src/index.ts` file importing from `./logging`; middle: renaming
    `src/logging.ts` to `src/shared/logging.ts`; right: `src/index.ts` with updated
    import path.](Images/lets_1210.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-10\. Left: a *src/index.ts* file importing from `"./logging"`; middle:
    renaming *src/logging.ts* to *src/shared/logging.ts*; right: *src/index.ts* with
    an updated import path'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Multifile edits may leave changes to files unsaved. Remember to save any changed
    files after running edits on them.
  prefs: []
  type: TYPE_NORMAL
- en: Code Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of TypeScript’s IDE utilities are provided as actions you can trigger.
    While some of these modify only the current file being edited, some can modify
    many files at once. Using these code actions is a great way to direct TypeScript
    to do many of your manual code writing tasks such as calculating import paths
    and common refactors for you.
  prefs: []
  type: TYPE_NORMAL
- en: Code actions are generally represented with some kind of icon in editors when
    available. VS Code, for example, shows a clickable light bulb next to your text
    cursor when at least one code action is available ([Figure 12-11](#error_lightbulb)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Code actions lightbulb next to a name causing a type error.](Images/lets_1211.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-11\. Code actions lightbulb next to a name causing a type error
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Editors generally expose keyboard shortcuts to operate their code actions menu
    or equivalent, allowing you to trigger any action in this chapter without using
    a mouse. VS Code’s default shortcut to open a code actions menu is Cmd + `.` on
    Mac and Ctrl + `.` on Linux/Windows. Up and down arrows select drop-down options,
    and Enter activates one.
  prefs: []
  type: TYPE_NORMAL
- en: These code actions—in particular renames and refactors—are especially powerful
    by virtue of being informed by TypeScript’s type system. When applying an action
    to a type, TypeScript will understand which values across all files are of that
    type, and can then apply any needed changes to those values.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing a name that already exists, such as that of a function, interface,
    or variable can be cumbersome to perform manually. TypeScript can perform a renaming
    for a name that also updates all references to the name.
  prefs: []
  type: TYPE_NORMAL
- en: The Rename Symbol (F2) context menu option creates a text box where you can
    type in a new name. Triggering a rename on a function’s name, for example, would
    provide a text box to rename that function and all calls to it. Hit Enter to apply
    that name ([Figure 12-12](#rename_function)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Box for renaming a `log` function, with `logData` inserted.](Images/lets_1212.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-12\. Box for renaming a `log` function, with `logData` inserted
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’d like to see what would happen before you apply the new name, press
    Shift + Enter to open a Refactor Preview pane that lists all the text changes
    that would happen ([Figure 12-13](#rename_function_preview)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Refactor preview for renaming a `log` function, with `logData` previewed
    across two files.](Images/lets_1213.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-13\. Refactor preview for renaming a `log` function, with `logData`
    previewed across two files
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Removing unused code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many IDEs subtly change the visual appearance of code that is unused, such as
    imported values and variables that are never referenced. VS Code, for example,
    reduces their opacity by about a third.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript provides code actions to delete unused code. ([Figure 12-14](#import_auto_remove))
    shows the result of asking TypeScript to remove an unused `import` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: selecting an unused import and opening the refactors menu; right: the
    file after TypeScript deletes it.](Images/lets_1215.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-14\. Left: selecting an unused import and opening the refactors menu;
    right: the file after TypeScript deletes it'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Other quick fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many TypeScript error messages are for code problems that can be quickly rectified,
    such as minor typos in keywords or variable names. Other commonly useful TypeScript
    quick fixes include:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a missing property on a class or interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correcting a mistyped field name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filling in missing properties of a variable declared as a type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend checking the list of quick fixes whenever you spot an error message
    you haven’t seen before. You never know what useful utilities TypeScript has made
    available to resolve it!
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TypeScript language service provides a plethora of handy code changes for
    different structures of code. Some are as simple as moving lines of code around,
    while others are as complex as creating new functions for you.
  prefs: []
  type: TYPE_NORMAL
- en: When you’ve selected an area of code, VS Code will display a lightbulb icon
    next to your selection. Click it to see the list of refactors available.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a developer extracting an inline array literal to a `const` variable
    ([Figure 12-15](#extract_to_constant)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: selecting an array literal and opening the refactors menu; right: extracting
    to a constant variable.](Images/lets_1214.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-15\. Left: selecting an array literal and opening the refactors menu;
    right: extracting to a constant variable'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Working Effectively with Errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading and taking action on error messages is a fact of life for working in
    any programming language. Every developer, regardless of proficiency with the
    TypeScript language, will trigger a plethora of TypeScript compiler errors each
    time they write TypeScript code. Using IDE features to enhance your ability to
    work effectively with TypeScript compiler errors will help you become much more
    productive in the language.
  prefs: []
  type: TYPE_NORMAL
- en: Language Service Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Editors generally surface any errors reported by the TypeScript language service
    as red squigglies underneath the troublesome code. Hovering your mouse over underlined
    characters will show a hover box next to them with the text of the error ([Figure 12-16](#variable_does_not_exist)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Hover information on a variable that does not exist.](Images/lets_1216.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-16\. Hover information on a variable that does not exist
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: VS Code also shows errors for any open files in a Problems tab in its Panels
    section. The bottom left View Problem link in the mouse hover box for an error
    will open an inline display of the message inserted after the problem’s line and
    before any subsequent lines ([Figure 12-17](#variable_does_not_exist_view_problem)).
  prefs: []
  type: TYPE_NORMAL
- en: '![View Problem inline display for a variable that does not exist.](Images/lets_1217.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-17\. View Problem inline display for a variable that does not exist
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When multiple problems exist in the same source file, their displays will include
    up and down arrows that you can use to switch between them. F8 and Shift + F8
    will work as shortcuts to go forward and backward through that list of problems,
    respectively ([Figure 12-18](#variable_does_not_exist_view_problems)).
  prefs: []
  type: TYPE_NORMAL
- en: '![One of two View Problem inline displays for a variable that does not exist.](Images/lets_1218.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-18\. One of two View Problem inline displays for variables that do
    not exist
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Problems tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: VS Code includes a Problems tab in its panel that, as its name suggests, surfaces
    any problems in your workspace. That includes errors reported by the TypeScript
    language service.
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows a Problems tab showing two problems in a TypeScript file
    ([Figure 12-19](#file_problems)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Problems tab showing two errors in a file.](Images/lets_1219.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-19\. Problems tab showing two errors in a file
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Clicking any error within the Problems tab will bring your text cursor to the
    offending line and column in its file.
  prefs: []
  type: TYPE_NORMAL
- en: Note that VS Code will only list problems for files that are currently open.
    If you want a real-time updated list of all TypeScript compiler problems, you’ll
    need to run the TypeScript compiler in a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Running a terminal compiler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommending running the TypeScript compiler in watch mode (covered in [Chapter 13,
    “Configuration Options”](ch13.xhtml#configuration_options)) in a terminal while
    working in a TypeScript project. Doing so will give you a real-time updated list
    of all problems—not just those in files.
  prefs: []
  type: TYPE_NORMAL
- en: To do this in VS Code, open the Terminal panel and run `tsc -w` (or `tsc -b
    -w` if using project references, also covered in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)).
    You should now see a terminal display showing all TypeScript issues in your project,
    as in this screenshot ([Figure 12-20](#terminal_tsc_watch)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Running `tsc -w` in a terminal to report a problem in a file.](Images/lets_1220.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-20\. Running `tsc -w` in a terminal to report a problem in a file
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Cmd (Mac) / Ctrl (Windows) + clicking a file name will bring your text cursor
    to the offending line and column in its file as well.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Some projects use VS Code launch.json configurations to start a terminal with
    TypeScript compiler in watch mode for you. See [code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)
    for a full reference on VS Code tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will sometimes find that you need to learn the type of something that’s
    set up in a way that the type isn’t apparent. For any value, you can hover your
    mouse over its name to see a hover box showing its type.
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the hover box for a variable ([Figure 12-21](#hovering_variable)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Hover information on a variable.](Images/lets_1221.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-21\. Hover information on a variable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hold Ctrl while hovering to also show where the name is declared.
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the Ctrl hover box for the same variable as before ([Figure 12-22](#hovering_variable_ctrl)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanded hover information on a variable.](Images/lets_1222.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-22\. Expanded hover information on a variable
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hover info boxes are also available on types, such as type aliases. This screenshot
    shows hovering over a `keyof typeof` type to see its equivalent union of string
    literals ([Figure 12-23](#hovering_type)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanded hover information on a type.](Images/lets_1223.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-23\. Expanded hover information on a type
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One strategy I’ve found to be helpful when trying to understand components of
    complex types is to create a type alias that represents just one component of
    the type. You will then be able to hover your mouse over that type alias to see
    what its type result is.
  prefs: []
  type: TYPE_NORMAL
- en: For the `FruitsType` type from before as an example, its `typeof fruits` portion
    could be extracted into a separate intermediary type with a refactor. That intermediary
    type can then be hovered to see type information ([Figure 12-24](#hovering_type_intermediary)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Left: extracting part of the FruitsType type; right: hovering over that extracted
    type.](Images/lets_1224.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-24\. Left: extracting part of the `FruitsType` type; right: hovering
    over that extracted type'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The intermediary type alias strategy is particularly useful for debugging the
    type operations covered in [Chapter 15, “Type Operations”](ch15.xhtml#type_operations).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you explored using TypeScript’s IDE integrations to level
    up your ability to write TypeScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening context menus on types and values to list their available commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating code by finding definitions, references, and implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating writing code with name completions and automatic imports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More code actions including renames and refactors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategies for viewing and understanding language service errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategies for understanding types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/using-ide-features*](https://learningtypescript.com/using-ide-features).
  prefs: []
  type: TYPE_NORMAL
- en: What do IDEs in love say to each other?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “You complete me!”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
