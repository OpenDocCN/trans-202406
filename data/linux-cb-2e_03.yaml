- en: Chapter 3\. Starting, Stopping, Restarting, and Putting Linux into Sleep Modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter you will learn several ways to stop, start, and restart a Linux
    system, and how to manage sleep modes. You will learn both the legacy commands
    and the new systemd commands.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn how to set up automated startups and shutdowns. An automated
    shutdown is nice to remind you to stop working, and you don’t have to remember
    to shut off your computer for the night. You can set up automated wake-ups and
    shutdowns on a remote machine, so that you can access it during work hours without
    leaving it running all the time. If your users are watt wasters who don’t shut
    off their computers, you can configure them to shut down during off hours.
  prefs: []
  type: TYPE_NORMAL
- en: The “three-key salute,” Ctrl-Alt-Delete, is useful when you need to interrupt
    a startup and reboot, or reboot when a process or application is misbehaving.
    In graphical desktops you can remap the keys to a more convenient key combination.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of legacy shutdown commands that have accumulated over the
    decades, with a lot of overlapping functionality: *shutdown*, *halt*, *poweroff*,
    and *reboot*. The *shutdown* command provides the useful options of timed shutdowns,
    with warnings to all logged-in users. These commands are useful in scripts, in
    SSH sessions, and anytime you are working from the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: Root Privileges Not Always Required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In olden times, root privileges were needed to run the shutdown commands. This
    is changing, and on many modern Linux distributions, root privileges are not needed
    for these commands. The examples in this chapter are for normal, unprivileged
    users. If your particular Linux requires root permissions, it will tell you.
  prefs: []
  type: TYPE_NORMAL
- en: These permissions are controlled by Polkit (formerly PolicyKit) on modern Linux
    distributions. See *man 8 polkit* to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'But that’s not all, because in Linux distributions with systemd ([Chapter 4](ch04.xhtml#cha-systemd)),
    the classic old commands are not installed on the system. Intead, their names
    are symlinked to the *systemctl* command. You can see this with the *stat* command,
    like this example for *shutdown*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `File:` line displays a symbolic link to */bin/systemctl*. All of the legacy
    command names, */sbin/shutdown*, */sbin/halt*, */sbin/poweroff*, and */sbin/reboot*,
    are symlinked to */bin/systemctl*. The symlinks for the legacy command names are
    provided for backward compatibility. On Linux systems without systemd these symlinks
    do not exist, and these systems use the legacy executables.
  prefs: []
  type: TYPE_NORMAL
- en: On some Linux distros these symlinks are in */usr/sbin* rather than */sbin*.
    When you use the legacy command names, they behave the same way on systems with
    systemd and on systems without systemd.
  prefs: []
  type: TYPE_NORMAL
- en: The power buttons on your graphical desktop are configurable; you should be
    able to customize which buttons are visible and their location.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Shutting Down with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the *systemctl* commands to shut down and reboot your system.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Halt the system and power off the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to halt the system and power off the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Reboot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Halt the system without powering off the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *systemctl* shutdown commands do not have the many options that the legacy
    commands do, which does not matter all that much because there are a lot of redundant
    options in the legacy commands. There is one significant difference: *systemctl
    shutdown* lacks the timed shutdown options supported by the *shutdown* command
    (see [Recipe 3.2](#rec-shutdown)).'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 systemd-halt.service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.2 Shutting Down, Timed Shutdowns, and Rebooting with the shutdown Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use timed shutdowns, for example, 10 minutes from now or at a specific
    time, and warn all logged-in users. Or you want to just shut down now with no
    frills.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *shutdown* command works the same way, whether it is symlinked to *systemctl*
    or the legacy *shutdown* executable.
  prefs: []
  type: TYPE_NORMAL
- en: The following examples show how to shut down immediately, shut down a certain
    number of minutes from now, cancel a shut down, shutdown at a specific time, halt,
    and reboot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shut down immediately, with no notification to other logged-in users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Shut down in 10 minutes with notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Other users on the system may see this message, depending on which Linux they
    are using, and if they have a terminal open:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Cancel the shutdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Logged-in users may see this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create your own message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Rather than specifying minutes to shutdown, you may set a shutdown time in
    24-hour hh:mm format. The following example shuts down the system at 10:15 P.M.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Reboot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Halt the system without powering off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Running *shutdown* with no options is equivalent to *shutdown -h +1*.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*shutdown* sends messages only when you use the *-h* option, except for the
    *-h now* option, and when you use the *-k* option. These are called *wall* messages,
    which is short for “write to all logged-in users.” Linux distributions vary in
    their support of this feature, so other users on your particular Linux may not
    see these messages.'
  prefs: []
  type: TYPE_NORMAL
- en: '*--help* displays a summary of options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-H*, *--halt* performs a clean shutdown but does not power off the machine;
    you must press and hold the power button to power off your machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-P*, *--poweroff* performs a clean shutdown and powers off the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-r*, *--reboot* performs a clean shutdown and reboots the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-k* sends a wall message without shutting down the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*--no-wall* disables wall messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 shutdown*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 wall*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 systemd-halt.service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.3 Shutting Down and Rebooting with halt, reboot, and poweroff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You understand the *shutdown* command, and now you want to know what *halt*,
    *reboot*, and *poweroff* are for, and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are all pretty much the same.
  prefs: []
  type: TYPE_NORMAL
- en: '*halt* performs a clean shutdown, stopping all services and processes and unmounting
    filesystems, but it does not power off the machine. After the *halt* command is
    finished, you must press and hold the machine’s power button to complete the shutdown.'
  prefs: []
  type: TYPE_NORMAL
- en: '*reboot* performs a clean shutdown and restarts the system.'
  prefs: []
  type: TYPE_NORMAL
- en: '*poweroff* performs a clean shutdown and powers off the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The *halt* and *poweroff* commands can reboot the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re thinking this all looks a little weird and redundant, you’re right.
    As software ages, cruft accumulates and never goes away. Linux has been around
    since 1991, and started out as a free clone of Unix, which was born in 1969. That
    is a lot of years for the various contributors to tweak code and add their own
    favorite features.
  prefs: []
  type: TYPE_NORMAL
- en: '*halt* and *poweroff* are the same commands and support the same options:'
  prefs: []
  type: TYPE_NORMAL
- en: '*--help* displays a summary of options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*--halt* performs a clean shutdown but does not power off the machine (yes,
    *halt* and *halt --halt* do the same thing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-p*, *--poweroff* performs a clean shutdown and powers off the machine (yes,
    *poweroff* and *poweroff --poweroff* do the same thing) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*--reboot* performs a clean shutdown and restarts the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-f*, *--force* forces an immediate halt or poweroff. Shutdown of all running
    services is skipped, all processes are killed, and all filesystems are unmounted
    or mounted read-only. Run it twice to force an unclean shutdown; for example,
    *poweroff -f -f*, which you should use only when normal shutdown commands fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-w*, *--wtmp-only* does not perform a shutdown, but only writes an entry in
    */var/log/wtmp*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-d*, *--no-wtmp* prevents writing a *wtmp* entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 halt*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 poweroff*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 systemd-halt.service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.4 Sending Your System into Sleep Modes with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Linux system has systemd, and you want to use *systemctl* to manage system
    sleep modes.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*systemctl* provides these power saving modes: *suspend*, *hibernate*, *hybrid-sleep*,
    and *suspend-then-hibernate*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Put your system into suspend mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This stores your current session in RAM and puts all hardware into a suspended
    state. Wake your system up by pressing any key, moving the mouse, or opening your
    laptop lid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put your system into hibernate mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This stores your session on disk and powers off the machine. Wake it up by pressing
    the power button, and when it resumes, which can take a minute or two, your session
    will be restored where you left off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put your system into hybrid-sleep mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This suspends your system to both memory and disk, and shuts off all devices
    except RAM. If your system RAM loses power, the system resumes from disk. Wake
    it up by pressing the power button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put your system into suspend-then-hibernate mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '*suspend-then-hibernate* first goes into suspend mode, then enters hibernation
    after the period of time specified by the HibernateDelaySec= setting in */etc/systemd/sleep.conf*.
    Wake it up by pressing the power button.'
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the Discussion in [Recipe 3.9](#rec-rtc-wakeups) for details on the different
    sleep states.
  prefs: []
  type: TYPE_NORMAL
- en: Your graphical desktop should have buttons for entering power saving modes and
    a graphical configuration tool for controlling events such as screen blanking,
    screen locking, power button, mouse, and laptop lid actions such as entering a
    sleep state or powering off.
  prefs: []
  type: TYPE_NORMAL
- en: Power management tends to work best on laptops and may not behave as expected
    on your Linux distribution. Power management is affected by your UEFI, CPU capabilities,
    udev, Advanced Configuration and Power Interface (ACPI), kernel compilation options,
    and possibly other devices and programs; so much depends on how your particular
    Linux has implemented power management. Check your Linux distribution documentation.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 systemctl*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 systemd-halt.service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.5 Rebooting Out of Trouble with Ctrl-Alt-Delete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want a reliable method of rebooting that always works, even when you are
    having problems such as crashes and runaway processes.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The good old “three-key salute,” Ctrl-Alt-Delete, was made for this. Press and
    hold these three keys in sequence, and they will override most problems and reboot
    your system. Ctrl-Alt-Delete is disabled in some Linux distributions, and you
    can change this.
  prefs: []
  type: TYPE_NORMAL
- en: Ctrl-Alt-Delete is controlled by systemd in the Linux console. See [Recipe 3.6](#rec-systemd-ctraltdel)
    to learn about managing Ctrl-Alt-Delete in systemd.
  prefs: []
  type: TYPE_NORMAL
- en: For systems without systemd, see the Discussion in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical environments have their own configuration tools for Ctrl-Alt-Delete,
    independent of systemd. For example, there is a keyboard configuration module
    in the Xfce4 Settings Manager ([Figure 3-1](#fig-keyboard-shortcuts)); in GNOME,
    use the Keyboard Settings module in the GNOME Settings utility.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Ctrl-Alt-Deletein Xubuntu](Images/lcb2_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. Settings → Keyboard → Applications, configuring keyboard shortcuts
    in Xubuntu
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you prefer a different key combination, use any keys you want. You could
    even use a single key, though that risks rebooting with an accidental key press.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Linux systems that do not use systemd, Ctrl-Alt-Delete is controlled by
    the */etc/inittab* file. This example, from MX Linux, shows a typical configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '*12345* makes it active in runlevels 1, 2, 3, 4, and 5\. *-t1* means wait one
    second, *-a* calls */etc/shutdown.allow*, and *-r* is reboot. Configure it to
    power off the system with the *-h* option, just like running *shutdown* from the
    command line (see [Recipe 3.2](#rec-shutdown)). To disable Ctrl-Alt-Delete, comment
    out the line with the *shutdown* command.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that *-t1* and *-a* are not present in all *shutdown* command implementations.
    The preceding example is from MX Linux. MX Linux supports both the Unix System
    V initialization system (SysV init) and systemd, and you select the one you want
    to use from the boot menu.
  prefs: []
  type: TYPE_NORMAL
- en: Ctrl-Alt-Delete is coded into the IBM PC BIOS/UEFI, and it should always reboot
    a system before the operating system is launched, up to the moment before GRUB
    launches the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Ctrl-Alt-Delete was created by IBM engineer David Bradley for the IBM PC BIOS.
    Orignally it was a developer tool and not intended for users. It required two
    hands by design, to make it difficult to press by accident.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then Microsoft adopted it to bring up the Task Manager on the first press,
    and to reboot on the second press. Then in Windows NT it was used to access the
    Windows login screen. Supposedly this was a security measure that prevented users
    from being deceived by fake login screens, which I never knew was a risk, but
    that was a long time ago. There is a funny exchange about the invention and use
    of Ctrl-Alt-Delete between Mr. Bradley and Bill Gates preserved in a YouTube video,
    which hopefully will stay up forever: [“Control-Alt-Delete: David Bradley & Bill
    Gates”](https://oreil.ly/e83k6).'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 7 systemd.special*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.6 Disabling, Enabling, and Configuring Ctrl-Alt-Delete in the Linux Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: systemd controls the behavior of Ctrl-Alt-Delete in the Linux console, and you
    want to know how to manage it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can check the status, disable or enable Ctrl-Alt-Delete, or change it to
    power off the system.
  prefs: []
  type: TYPE_NORMAL
- en: The Ctrl-Alt-Delete unit file is not a service, but a target, so it does not
    run as a daemon. If the */etc/systemd/system/ctrl-alt-del.target* symlink exists,
    Ctrl-Alt-Delete is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example disables and masks *ctrl-alt-del.target*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Unmask and re-enable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The changes take effect immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change it to power off the system by linking the *ctrl-alt-del.target* unit
    to the *poweroff.target* unit. First, disable it to remove the existing symlink,
    then create the new symlink:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now it will power off the system instead of rebooting.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *stat* command to see symlinks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You should not change any */lib/systemd/system/* links. Instead, create the
    new symlink in */etc/systemd/system/* so that your change is not overwritten by
    system updates.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 7 systemd.special*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.7 Creating Scheduled Shutdowns with cron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want your machine to turn itself off at night so you can walk away and not
    worry about it. Or, your users are careless watt wasters who refuse to develop
    the habit of shutting their PCs down at night.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use *cron* to create scheduled shutdowns. For example, add this line to */etc/crontab*
    to shut down every night at 10:30 P.M., with a 20-minute warning. Editing */etc/crontab*
    requires root permissions, and the following example uses the nano text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Before doing this on your work computer, check your employer’s policies. If
    they run updates and backups at night, then your computer may need to stay on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example runs only at 11 P.M. on weekdays and shuts down immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way is to use the *crontab* command as root or with *sudo*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: There is no name field when you run *crontab*, as there is in */etc/crontab*.
    The previous example opens the root user’s crontab in edit mode. Edit and save,
    then you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t try to name the file yourself. During editing it is a temporary file,
    which is automatically renamed by *crontab* when you save it. It will be saved
    in */var/spool/cron/crontabs*.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*/etc/crontab* has a name field, so any user can have entries in this file,
    but only root can edit */etc/crontab*. Users who want to control their own personal
    crontabs should use the *crontab* command, as personal crontabs do not require
    root permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: The fields in */etc/crontab* can take a little getting used to ([Table 3-1](#crontab_values)),
    so here are more examples and explanations.
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-1\. Table of crontab values
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Allowed values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| minute | 0-59 |'
  prefs: []
  type: TYPE_TB
- en: '| hour | 0-23 |'
  prefs: []
  type: TYPE_TB
- en: '| day of month | 1-31 |'
  prefs: []
  type: TYPE_TB
- en: '| month | 1-12 |'
  prefs: []
  type: TYPE_TB
- en: '| day of week | 0-7 |'
  prefs: []
  type: TYPE_TB
- en: The asterisk * is a wildcard for “all.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Shut down only on weekends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a quirk in *cron* that Sunday is 0 or 7\. This dates back to very
    olden times, and I have no idea why it persists. You’ll have to test it to see
    what works, so you may need to use *6,7* for Saturday, Sunday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'It would be nice to use *sat,sun*, but you can only enter one day by name,
    and cannot use names in lists. Days of the week and months are named with the
    first three letters: sat, sun, jan, feb. Case does not matter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use ranges: 1–4 means 1, 2, 3, and 4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ranges and lists can be mixed: 1, 3, 5, 6-10.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step values follow ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: 10–23/2 is every second hour in the range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*/2 in the dow field means every other day'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2–6/2 equals 2, 4, 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following strings are nice shortcuts that replace the first five fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 cron*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 crontab*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 5 crontab*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.8 Scheduling Automated Startups with UEFI Wake-Ups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scheduled shutdowns are so wonderful, you want scheduled wake-ups as well.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’re in luck, because Linux supports scheduled wake-ups. There are three
    methods to try: Wake-on-LAN, real-time clock (RTC) wake-ups, or your computer’s
    UEFI setup, if it has a scheduled wake-up feature.'
  prefs: []
  type: TYPE_NORMAL
- en: UEFI wake-ups are the most reliable. [Figure 3-2](#fig-bios-wakeup) shows the
    scheduled wake-up screen on a Lenovo ThinkPad.
  prefs: []
  type: TYPE_NORMAL
- en: '![Lenovo UEFI wake-up scheduler](Images/lcb2_0302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-2\. Scheduling wake-ups in a Lenovo UEFI
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Enter your UEFI setup by pressing the appropriate F*n* key at startup. On Dell,
    ASUS, and Acer systems this is usually F2; Lenovo uses F1\. This varies, however.
    For example, some systems use the Delete key, so check your machine’s documentation.
    Some systems tell which key to press on their startup screens. It can be a bit
    tricky to press the key at the right time, so start pressing it right after you
    press the power button, just like banging on an elevator button to make it arrive
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: If your system does not have a UEFI wake-up feature, try either Wake-on-LAN
    (see [Recipe 3.10](#rec-wol-wired-wakeups), which requires a second device to
    send a wake-up signal), or RTC wake-ups (see [Recipe 3.9](#rec-rtc-wakeups)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s discuss briefly what BIOS and UEFI mean. When you boot up your computer,
    the first startup instructions come from the Basic Input Output System (BIOS),
    or the Unified Extensible Firmware Interface (UEFI) firmware stored on the computer’s
    motherboard. BIOS is the old legacy system that has been with us since 1980\.
    UEFI is its modern replacement. UEFI includes legacy BIOS support, though someday
    this will be removed. Nearly all computers made after the mid-2000s have UEFI.
  prefs: []
  type: TYPE_NORMAL
- en: UEFI has considerably more features than the old BIOS, and is like a little
    operating system. The UEFI setup screens control boot order, boot devices, security
    options, Secure Boot, overclocking, displaying hardware health, networking, and
    many more functions.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 3.9](#rec-rtc-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.10](#rec-wol-wired-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.11](#rec-wol-wifi-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.9 Scheduling Automated Startups with RTC Wake-ups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to set up scheduled wake-ups with RTC because your UEFI setup does
    not have a scheduled wake-up feature, or because you just want to.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the *rtcwake* command, which should already be present on your system from
    the *util-linux* package. *rtcwake* stops and wakes your system. You may set it
    to wake up your system after a specified interval, such as 1800 seconds from now,
    or at a scheduled time and date.
  prefs: []
  type: TYPE_NORMAL
- en: Your system’s real-time clock (RTC) should be set to Coordinated Universal Time
    (UTC).
  prefs: []
  type: TYPE_NORMAL
- en: 'When *rtcwake* stops your system, it sends it into an ACPI sleep state. Look
    in */sys/power/state* to see which sleep states your system supports. In the following
    example, only three of the six ACPI sleep states are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: On non-systemd Linuxes, run *cat /proc/acpi/info*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above example, we have three sleep states to try. Test each one according
    to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '*-m* specifies the standby mode, and *-s* is the number of seconds until the
    system starts up again. When it is successful, you will see your system go into
    a sleep state, then wake up, and you will see either a success message or an error
    message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example does a dry run of scheduling a wake-up tomorrow at 8
    A.M.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Remove *-n* to disable the dry run and run it for real.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a nice, simple */etc/crontab* example to automate shutdowns
    and wake-ups. The *rtcwake* command suspends to disk at 11 P.M. on weeknights
    and wakes up 8 hours later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look in your system’s BIOS/UEFI to verify that your hardware clock is set to
    UTC. If there is no button or some kind of setting to change the real-time clock
    to UTC, change the time manually to the current UTC time.
  prefs: []
  type: TYPE_NORMAL
- en: The example that includes *-u -t +$(date +%s -d “tomorrow 08:00”)* converts
    Unix epoch time to human-readable values. Unix epoch time is the number of seconds
    elapsed since midnight January 1, 1970 UTC. *date +%s* reports the current Unix
    epoch time. The *-t* option passes Unix epoch time to *date* for conversion, and
    *-u* specifies that your hardware clock is set to UTC.
  prefs: []
  type: TYPE_NORMAL
- en: The *no* option for *rtcwake* means do not go into a sleep state, but only set
    the wake-up time. Remove the *no* option to immediately go into a sleep state.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time clock (RTC) wake-ups are the least reliable. Your system has to be
    put into an Advanced Configuration and Power Interface (ACPI) sleep state supported
    by your Linux. ACPI is the modern power management standard for managing sleep
    states. It is supposed to be vendor neutral and hardware independent, but the
    standard is complex and hardware vendors often support only a subset of its capabilities.
    Adding to the fun, the various Linuxes implement it in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six ACPI sleep states, S0-S5\. The Linux kernel is capable of supporting
    up to four, and distributions vary in which ones and how many:'
  prefs: []
  type: TYPE_NORMAL
- en: S0
  prefs: []
  type: TYPE_NORMAL
- en: System is running, monitor may be off, most peripherals are on.
  prefs: []
  type: TYPE_NORMAL
- en: S1
  prefs: []
  type: TYPE_NORMAL
- en: Power-on suspended, CPU stops, power to CPU and RAM is on.
  prefs: []
  type: TYPE_NORMAL
- en: S2
  prefs: []
  type: TYPE_NORMAL
- en: CPU is powered off, dirty cache is flushed to RAM.
  prefs: []
  type: TYPE_NORMAL
- en: S3
  prefs: []
  type: TYPE_NORMAL
- en: Also called standby, sleep, and suspend-to-RAM. Data may not be written to disk.
  prefs: []
  type: TYPE_NORMAL
- en: S4
  prefs: []
  type: TYPE_NORMAL
- en: Hibernation, suspend-to-disk. Everything in RAM is written to disk and the system
    is powered down.
  prefs: []
  type: TYPE_NORMAL
- en: S5
  prefs: []
  type: TYPE_NORMAL
- en: Similar to powering the system off, except there is still power to the power
    button and peripherals, such as the keyboard, network interface, and USB devices.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 cron*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 rtcwake*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Time and Date](https://timeanddate.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.10 Setting Up Remote Wake-Ups with Wake-on-LAN over Wired Ethernet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to set up remotely triggered wake-ups with Wake-on-LAN because your
    UEFI setup does not have a scheduled wake-up feature, or it is too simple for
    your needs, or you want the flexibility to send a wake-up signal at random times.
    This recipe is for waking up a machine on the same network as the device you use
    to send the wake-up signal, and your target machine must use a wired Ethernet
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configure your PC to listen for wake-up requests, then use a second device,
    such as another computer, a smartphone, or a Raspberry Pi to send the wake-up
    signal, which is called the *magic packet*. Which isn’t really magic, but merely
    a specialized packet designed specifically for remote wake-ups. (Yes, I too am
    sad it is not real magic.)
  prefs: []
  type: TYPE_NORMAL
- en: Start by booting into your system’s UEFI setup and look for settings for enabling
    Wake-on-LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: An important precaution is to disable all settings that enable PXE (preboot
    execution environment) booting. If PXE boot is enabled, and you have a PXE server
    (a preboot execution environment server, which is booting from a network installation
    server) on your network, it is possible that your machine will wake up to PXE
    boot and install a new image, overwriting the existing installation.
  prefs: []
  type: TYPE_NORMAL
- en: Then exit and finish starting up. Install the *wakeonlan* and *ethtool* packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch the name of your Ethernet interface, which in this example is *enp0s25*,
    and use *ethtool* to verify that it supports Wake-on-LAN. The output is abbreviated
    for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Record the MAC address of your interface. In the preceding *ip* example, the
    “ether” line lists the MAC address, 9c:ef:d5:fe:8f:20\. Yours will be different,
    as MAC addresses are unique.
  prefs: []
  type: TYPE_NORMAL
- en: '“Supports Wake-on: pumbg” is the magic phrase that verifies your interface
    has the necessary support, indicated by the *g* switch. The second line, “Wake-on:
    g,” tells you that it is already enabled. If it is not, enable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If it does not stay enabled after a restart, add an entry like this to */etc/crontab*
    to run the command after every restart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Shut down the machine, and from a second device on the same network, send the
    command to wake it up, using the MAC address of your target machine’s Ethernet
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If your target machine and second device are on the same network but in different
    subnets, specify the broadcast address for your target machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wake-on-LAN is an Ethernet standard for remotely waking up a computer by sending
    it a wake-up signal over a network. *wakeonlan* is the name of the command and
    the name of the package on most Linuxes.
  prefs: []
  type: TYPE_NORMAL
- en: When your computer is shut down, it isn’t really turned off, but is in a low
    power mode, and can receive and act on the magic packet wake-up signal.
  prefs: []
  type: TYPE_NORMAL
- en: '*wakeonlan* sends the magic packet over UDP port 9\. The magic packet goes
    to the network’s broadcast address, and every host on the network receives this
    packet. The MAC address ensures that only the host with that address will wake
    up.'
  prefs: []
  type: TYPE_NORMAL
- en: The target machine wakes up just as if you had pressed the power button.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 wakeonlan*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 ethtool*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.8](#rec-uefi-wakeup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.9](#rec-rtc-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.11](#rec-wol-wifi-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.11 Setting Up Remote Wake-Ups over WiFi (WoWLAN)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your want to wake up a remote computer via its wireless interface (Wake-on-Wireless
    LAN, or WoWLAN).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is for waking up a machine on the same network as the device you
    use to send the wake-up signal.
  prefs: []
  type: TYPE_NORMAL
- en: Your machine must have an onboard wireless interface, either integrated on the
    motherboard or peripheral component interconnect (PCI). It will not work with
    a USB interface because there is no power to the USB bus when the machine is shut
    down.
  prefs: []
  type: TYPE_NORMAL
- en: First, enter the UEFI setup of the machine you want to wake up remotely and
    enable any Wake-on-LAN settings.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: An important precaution is to also disable all settings that enable PXE booting.
    If PXE boot is enabled and you have a PXE server on your network, it is possible
    that your machine will wake up to PXE boot and install a new image, overwriting
    the existing installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then exit and finish starting up. Install the *iw* command, and use it to list
    all of your wireless devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is more than one, query the one you want to use. The following example
    shows a wireless interface that does not support WoWLAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example is for an interface that supports WoWLAN, and it is not
    enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable WoWLAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '*iw dev* provides the MAC address, which your second device needs to send the
    magic packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Send the magic packet to a machine on the same network, but in a different
    subnet, using the broadcast address of the subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This works well when the remote computer is a laptop, as laptops have integrated
    wireless network interfaces that typically support more features. Desktop machines
    usually don’t ship with integrated wireless interfaces, so you must shop carefully
    for a PCI/PCIe wireless adapter that supports WoWLAN and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 iw*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 wakeonlan*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.8](#rec-uefi-wakeup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.9](#rec-rtc-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 3.10](#rec-wol-wired-wakeups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
