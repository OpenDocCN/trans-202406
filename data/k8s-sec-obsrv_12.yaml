- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We hope that the book helped you understand how observability and security
    for Kubernetes deployments are different from traditional deployments. And we
    hope that the book is a guide for you as you design and implement your security
    and observability strategy, whether you are in the early stages of your journey
    or further along in adopting Kubernetes. The key takeaway is that you need to
    think about security and observability at every stage of your journey; it should
    not be an afterthought that is implemented once you have designed your deployment.
    We often hear folks say, “I will not need to worry about security or observability
    for a while; let me first get my workloads running in Kubernetes.” This line of
    thinking is not right, as the right security implementation will likely alter
    the design and will likely cause an untimely iteration to the design and delay
    the implementation. The following are some of the characteristics that make Kubernetes
    different:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is the most widely adopted orchestration engine for deploying modern
    applications and is used both in public cloud and on-premise deployments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes is declarative in nature and enables users to specify outcomes for
    their application deployments (e.g., scale, specifications, access, etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes continuously monitors the status of the deployment and takes corrective
    action to ensure the deployment is operating as specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes abstracts the details of networking, IP addresses, etc., and instead
    allows users to define identity using higher-level constructs like labels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to these characteristics, implementing observability and security for Kubernetes
    needs a different approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These characteristics of Kubernetes have also altered the development process
    and the teams involved. Previously, development teams built applications that
    would be deployed on preprovisioned infrastructure. In today’s world, when you
    deploy an application in the cloud, you first provision the infrastructure (e.g.,
    hosts, VMs, etc.) that is required for your application and then deploy your application
    on the provisioned infrastructure. Also, the infrastructure is dynamic and adapts
    to the needs of the application. The following lists the life cycle of an application
    in a Kubernetes cluster and the role of various teams:'
  prefs: []
  type: TYPE_NORMAL
- en: The deployment of an application comprises the build stage (create the resources
    needed for the application), the deploy stage (deploy the application using Kubernetes),
    and the runtime stage (application operation post deployment).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The teams that are responsible for successful deployment and operation of the
    application are the operations team, the platform team, the networking team, the
    security team, and the compliance team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to design an effective security and observability strategy for your
    application, you need to consider security and observability at all stages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration between the teams is critical to success as security is a joint
    responsibility of all the teams involved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following checklist is a good guide to ensure that you have an effective
    security and observability implementation for your Kubernetes deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: All images are scanned for known vulnerabilities prior to deployment and then
    periodically scanned for vulnerabilities discovered post-deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All container images being deployed are built with minimal base OS components
    (e.g., distroless or scratch images).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operating system on the host is an immutable Linux distribution that reduces
    the attack surface area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The host OS and the pods deployed are configured with controls that only allow
    required access (e.g., system calls, filesystem access).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes cluster deployment is hardened with the encryption of secrets,
    securing access to the API server and the data store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment of workloads in your Kubernetes cluster is controlled by best practices
    for RBAC and admission controllers to enforce policies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All access to services in your cluster is exposed to external clients using
    security best practices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes cluster has an integration with a perimeter security device (firewall
    or a gateway) to enable the device to have visibility into traffic originating
    from the cluster so it can add effective controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to ensure that access control is in place for network traffic and application
    traffic using L3/L7 policies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you are using a tool native to Kubernetes to implement observability;
    e.g., your tool needs to be aware that pods backing a service or a deployment
    are identical and should be viewed as a unit to “observe” a service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you implement machine learning to baseline behavior of various entities
    in your cluster and build an anomaly detection system layered above that to detect
    security incidents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you implement threat defense features like IDS, IPS, and advanced
    threat detection techniques in your cluster to detect malicious activity inside
    your cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you have implemented data in transit encryption for communication
    inside the cluster as well as communication to external entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We wish you the best in your Kubernetes journey as you implement security and
    observability for your workloads!
  prefs: []
  type: TYPE_NORMAL
