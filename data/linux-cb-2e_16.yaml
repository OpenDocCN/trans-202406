- en: Chapter 16\. Managing Local Name Services with Dnsmasq and the hosts File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/MUa4U) is an excellent server for LAN name services,
    both Domain Name System (DNS) and Dynamic Host Discovery Protocol (DHCP). Dnsmasq
    also provides BOOTP, PXE, and TFTP, which are for network booting and installing
    operating systems from a network server. Dnsmasq supports IPv4 and IPv6, provides
    local DNS caching, and acts as a stub resolver.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers setting up local DNS and DHCP using Dnsmasq and the */etc/hosts*
    file together. */etc/hosts* is the very old way of setting up DNS, mapping hostnames
    to IP addresses in a static file. */etc/hosts* by itself is sufficient for very
    small networks.
  prefs: []
  type: TYPE_NORMAL
- en: Dnsmasq is designed for LAN name services. It is lightweight and simple to configure,
    especially in comparison to BIND, the dominant DNS server, which is heavyweight
    and has a rather steep learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: Dnsmasq and */etc/hosts* work great together. Dnsmasq reads the entries in */etc/hosts*
    into DNS.
  prefs: []
  type: TYPE_NORMAL
- en: The DHCP server in Dnsmasq automatically integrates with DNS. All you need for
    Dnsmasq to create DNS entries for your DHCP clients is to configure your DHCP
    clients to send their hostnames to the DHCP server, which is the default in most
    Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four types of DNS servers: recursive resolvers, root name servers,
    top-level domain (TLD) name servers, and authoritative name servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Recursive resolvers answer DNS requests. A stub resolver, like Dnsmasq and systemd-resolved,
    forwards any requests it cannot answer from its cache to an upstream resolver.
    When you visit a website a recursive resolver finds the site’s DNS information
    by querying the other three types of DNS servers. Recursive resolvers cache this
    information to make it available more quickly. Your ISP’s name servers, and services
    like [OpenDNS](https://oreil.ly/oCRsV), [Cloudflare](https://oreil.ly/9Fgqc),
    and [Google Public DNS](https://oreil.ly/lc9ep) are all recursive resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 13 types of root name servers, spread all over the planet, and there
    are currently several hundred root name servers. A root server accepts a query
    from a recursive resolver, then the root server directs the request to the appropriate
    TLD server according to the top-level domain: .com, .net, .org, .me, .biz, .int,
    .biz, .gov, .edu, and so on. The Internet Corporation for Assigned Names and Numbers—[ICANN](https://icann.org)—oversees
    all of these servers and domains.'
  prefs: []
  type: TYPE_NORMAL
- en: Authoritative name servers are the source records for a domain and are controlled
    by the owner of the domain. Dnsmasq can serve as your authoritative name server,
    though I recommend using BIND. See the Authoritative Configuration section of
    *man 8 dnsmasq* to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Too Many Name Service Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux distributions are still transitioning to NetworkManager and *systemd-resolved*
    from the legacy *resolvconf*, which has long been the default DNS resolver on
    Linux systems. This presents a bit of a tangle for Linux users, with continual
    changes and the various distros making the transition at different rates. Pay
    close attention to the documentation, forums, and release notes for your particular
    Linux.
  prefs: []
  type: TYPE_NORMAL
- en: It should be possible to use Dnsmasq as the DNS backend for NetworkManager,
    because NetworkManager has a plug-in for this. But on some Linux distributions,
    this does not yet work correctly ([Recipe 16.5](#rec-play-nice)).
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need systemd-resolved running on your Dnsmasq server because it will
    contend with Dnsmasq for control of the system’s stub DNS resolver.
  prefs: []
  type: TYPE_NORMAL
- en: By the time you read this, all of this may be different, but for now the recipes
    aim to be reliable rather than cutting edge.
  prefs: []
  type: TYPE_NORMAL
- en: 16.1 Simple Name Resolution with /etc/hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want a simple, fast way to set up name resolution without having to run
    a DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is what the */etc/hosts* file is made for. Your LAN computers must have
    static IP addresses. The following is an example for three computers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy these entries to all three hosts, then try pinging each other by hostnames,
    like this example for pinging *host2* from *host3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*/etc/hosts* also manages domain names, so you can give your LAN a cool domain.
    In the following examples, that is *sqr3l.nut*. First enter the IP address, then
    the fully qualified domain name (FQDN), then the hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now your hosts can connect to each other with their hostnames, like *host1*,
    or their FQDNs, like *host1.sqr3l.nut*.
  prefs: []
  type: TYPE_NORMAL
- en: Shared and Individual Hosts Entries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can have both shared and private entries in */etc/hosts*. Anything you want
    shared must be copied to all the relevant hosts. Anything else in your hosts file
    that is not copied to other hosts will work only for you. See [Recipe 16.2](#rec-hosts-blocking)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*127.0.0.1 localhost* and *::1 localhost ip6-localhost ip6-loopback* are required.
    Yours might look a little different, but however they are written, do not delete
    them. They are assigned to the loopback device, a special virtual network interface
    that your Linux system uses to communicate with itself.'
  prefs: []
  type: TYPE_NORMAL
- en: You can ping them and use them to connect to local servers. For example, when
    you use the CUPS web administration page, you are using the loopback device. Enter
    *127.0.0.1:631* or *localhost:631* to open it ([Figure 16-1](#fig-dnsmasq-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Opening a local web page with the loopback device](Images/lcb2_1601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-1\. Opening a local web page with the loopback device
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The virtual network interface for the loopback device is *lo*. Use the *ip*
    command to see it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Your system does not need a physical network interface for the loopback device
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the *hostname* command to confirm that your configuration is correct. Check
    the hostname of your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the FQDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the domain name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*/etc/hosts* does not scale well, but for small networks it may be all you
    ever need for your local DNS.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 hosts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 ping*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 16.2](#rec-hosts-blocking)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.2 Using /etc/hosts for Testing and Blocking Annoyances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are working on development servers, and you want to manage their DNS without
    hassles. Or, you want a simple way to block annoying sites.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose the name of a dev server you are working on is *dev.stashcat.com*.
    Make an entry for it your */etc/hosts* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You don’t have to bother your network admin or mess with your DNS server, but
    can create and remove entries in */etc/hosts* as you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another fun trick is to map annoying websites to bogus IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This makes the site unreachable from your computer. Most how-tos use the loopback
    address, 127.0.0.1, and it works, but I prefer to keep the annoying sites separate.
    You can use the same fake IP address for multiple annoying sites.
  prefs: []
  type: TYPE_NORMAL
- en: If your web browser still reaches the site after adding it to */etc/hosts*,
    clear your browser cache and try again.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run a LAN Dnsmasq server, keep in mind that all entries in */etc/hosts*
    on the Dnsmasq server will be applied to all Dnsmasq clients, so don’t put your
    name server on your development computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux has a number of DNS managers, and */etc/hosts* is read first. The order
    is set in the */etc/nsswitch.conf* file on the *hosts* line. The following example
    is from Ubuntu 20.04:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*files* is */etc/hosts*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*mdns4_minimal* uses the Avahi autodiscovery service to locate network services.'
  prefs: []
  type: TYPE_NORMAL
- en: '*[NOTFOUND=return]* means that if *mdns4_minimal* is working but the requested
    host is not found, the DNS lookup should stop and return an error. If the *mdns4_minimal*
    service is not found, continue the lookup.'
  prefs: []
  type: TYPE_NORMAL
- en: '*dns* uses any available DNS server.'
  prefs: []
  type: TYPE_NORMAL
- en: '*mymachines* refers to the *systemd-machined* service, which tracks local virtual
    machines and containers.'
  prefs: []
  type: TYPE_NORMAL
- en: You should put *files dns* first on your Dnsmasq server.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 hosts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 5 nsswitch.conf*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 systemd-machined.service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.3 Finding All DNS and DHCP Servers on Your Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to know if there are any DNS and DHCP servers on your LAN, other than
    your Dnsmasq server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Probe your LAN with *nmap*. The following example searches the local network
    for all open TCP ports and finds an open TCP port 53, which is used by DNS. This
    is indicated by “53/tcp open domain”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, *nmap* only looks for TCP ports. DNS servers listen to TCP and
    UDP 53, and DHCP listens on UDP 67\. The following example looks only for ports
    UDP 53 and 67:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*nmap* found one DNS/DHCP server, on dns-server.sqr3l.nut.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command searches for all open TCP and UDP ports on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This takes several minutes to complete, and then you have a list of the active
    services on all up hosts in your network, including any services running on nonstandard
    ports.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be very careful with port scanning, and use it only on networks that you have
    permission for. Port scanning other networks is often treated as a hostile act,
    like you are probing for vulnerabilities to exploit.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple name servers can cause conflicts, and in any case it is good to know
    if your users are running any servers.
  prefs: []
  type: TYPE_NORMAL
- en: On most Linux systems, the package to install is *nmap*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 nmap*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.4 Installing Dnsmasq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to install Dnsmasq and take care of any prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the *dnsmasq* package. In this recipe the Dnsmasq server is named *dns-server*.
    You will use both Dnsmasq and the */etc/hosts* file to configure your DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, stop Dnsmasq if it is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Give your Dnsmasq server a static IP address, if it does not already have one.
    Do this with NetworkManager’s graphical control panel (*nm-connection-editor*),
    or with the *nmcli* command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example uses *nmcli* to find your active connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then assign the static IP address you want your DNS server to use, using the
    NAME to identify the correct connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then restart NetworkManager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, check if your Linux is running *systemd-resolved.service*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If it is, see [Recipe 16.5](#rec-play-nice) before configuring Dnsmasq, and
    also to learn how to configure NetworkManager on your Dnsmasq server.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: systemd is implemented differently amongst the various Linuxes. For example,
    openSUSE Leap 15.2 does not use the *systemd-resolved.service*, so you should
    not have to make any systemd changes to enable Dnsmasq to control your LAN DNS.
    Fedora 33 and up, and Ubuntu 17.04 and up, run *systemd-resolved.service*, and
    it should be disabled on your Dnsmasq server.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 16.5](#rec-play-nice)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.5 Making systemd-resolved and NetworkManager Play Nice with Dnsmasq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*systemd-resolved* and NetworkManager are conflicting with Dnsmasq, and you
    want them out of the way.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check if the *systemd-resolved.service* is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'That shows that it is running. *systemd-resolved.service* is fine for providing
    a stub DNS resolver for client machines, but not DNS servers. Disable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then look at */etc/resolv.conf*, which should be a symlink:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When it is a symlink, it is managed by *systemd-resolved.service*. To remove
    control from *systemd-resolved.service*, delete the symlink and create a plain-text
    file with the same name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that */etc/resolv.conf* is a file and not a symlink, it is managed by NetworkManager.
    Open your NetworkManager configuration file and look for the *[main]* section,
    then add or change the *dns=* value to *none*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your Dnsmasq server’s IPv4 and IPv6 localhost addresses in */etc/resolv.conf*
    and your local domain, if you have one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Then reboot and configure your new Dnsmasq installation.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetworkManager and *systemd-resolved* are wonderful on client machines. On your
    Dnsmasq server, you must have control of */etc/resolv.conf*, and Dnsmasq should
    be the only stub resolver.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 systemd-resolved.service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 networkmanager*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.6 Configuring Dnsmasq for LAN DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to set up Dnmasq as your LAN DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any hosts that you enter in */etc/hosts* need static IP addresses, and Dnsmasq
    will automatically enter them into DNS. At a minimum, enter your Dnsmasq server.
    The following example includes the Dnsmasq server, a backup server, and an internal
    web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Configure Static Hosts from DHCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See [Recipe 16.12](#rec-static-dnsmasq) to learn how to manage static IP address
    assignments from DHCP, instead of */etc/hosts*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it is time to configure Dnsmasq. Rename the default configuration file
    so you can start with a new empty file, and use the original as a reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following configuration, replacing the second *listen-address* with
    your own server’s IP address, and use your own domain name. The upstream name
    servers are OpenDNS, and you may use whatever upstream name servers you wish.
    Dnsmasq looks for */etc/resolv.conf* by default, but it doesn’t hurt to be explicit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run Dnsmasq’s syntax checker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax checker won’t find configuration errors, but only typos. Start up
    Dnsmasq, and if there are errors it will not start. The following example shows
    a successful start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run some tests on your Dnsmasq server with *nslookup* using your server’s hostname
    and FQDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the *ss* command to verify the listening ports. In the following example,
    the Recv-Q, Send-Q, and Peer Address:Port columns have been removed for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You should see your server address, localhost address, and only *dnsmasq* in
    the Process column. Add the *-r* option to see hostnames instead of IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: When all of these commands succeed, your configuration is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If Dnsmasq fails to start, run *journalctl -ru dnsmasq* to see why. (If your
    Dnsmasq logs are sent somewhere else, then look there; see [Recipe 16.14](#rec-dnsmasq-logging).)
  prefs: []
  type: TYPE_NORMAL
- en: '*nslookup* is in the *bindutils* package.'
  prefs: []
  type: TYPE_NORMAL
- en: '*ss*, socket statistics, is in the *iproute2* package.'
  prefs: []
  type: TYPE_NORMAL
- en: If your *nslookup* commands fail, try restarting networking, and then restarting
    Dnsmasq. If they still fail, reboot. If this doesn’t fix it, recheck all your
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '*domain-needed* prevents Dnsmasq from forwarding queries for your plain hostnames
    to upstream nameservers. If the name is not known from */etc/hosts* or DHCP, then
    a “not found” answer is returned. This keeps requests for your LAN addresses from
    leaking out into the world and possibly being answered incorrectly if your LAN
    domain is the same as a public domain name.'
  prefs: []
  type: TYPE_NORMAL
- en: '*bogus-priv* blocks bogus private reverse lookups. All reverse lookups for
    private IP ranges which are not found in */etc/hosts* or the DHCP leases file
    are answered with “no such domain” rather than being forwarded upstream.'
  prefs: []
  type: TYPE_NORMAL
- en: '*expand-hosts* automatically adds your private domain name to the plain hostnames
    in */etc/hosts*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*domain=* is your local domain name.'
  prefs: []
  type: TYPE_NORMAL
- en: '*local=/[domain]/* tells Dnsmasq to resolve queries for the local domain directly,
    and not forward them upstream.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 hosts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.7 Configuring firewalld to Allow DNS and DHCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to open your Dnsmasq server’s firewall to allow your LAN clients access
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open TCP and UDP ports 53 for DNS, and UDP 67 for DHCP. If you are running
    *firewalld*, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the first things to check, when you have connectivity problems, is firewall
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.xhtml#cha-firewalld)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.8 Testing Your Dnsmasq Server from a Client Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to test your nice new Dnsmasq DNS server from a client computer.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *dig* command from any host on your network to query any website, via
    the IP address for your Dnsmasq server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'That is a successful test, confirmed by “status: NOERROR” and the SERVER line
    showing the IP address of your Dnsmasq server.'
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also test using your server’s hostname and fully qualified domain name
    (FQDN):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 dig*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.9 Managing DHCP with Dnsmasq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your DNS is working, and now you want to set up DHCP.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'No problem. Add these lines to your */etc/dnsmasq.conf* file to define a single
    pool of addresses, substituting your own desired addressing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart Dnsmasq:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Try getting an address on a LAN computer. First, make sure it is configured
    to get its IP address via DHCP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*auto* confirms it is a DHCP client. (If it says *manual* then it is not.)
    Bring the interface down, then back up again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Check your Dnsmasq server logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: That shows a successful IP address assignment from *dns-server* to *client2*.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the NetworkManager panel applet instead of *nmcli*, or run the *nm-connection-editor*
    command to open NetworkManager’s graphical configurator, then disconnect and connect
    with a mouse click ([Figure 16-2](#fig-dnsmasq-4)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Linux distributions use NetworkManager to control client DHCP. If yours
    does not, it probably uses *dhclient*. Look for a *dhclient.conf* configuration
    file, if this exists, then request a new lease with the *dhclient* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can send, over DHCP, some of the information your client machines need to
    access network services. See [Recipe 16.10](#rec-advertise) to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing network connections with nm-connection-editor](Images/lcb2_1602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-2\. Managing network connections with nm-connection-editor
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*dhcp-range=192.168.1.25,192.168.10.75,24h* defines a range of 50 available
    address leases, with a lease time of 24 hours. This range must not include your
    Dnsmasq server, nor any hosts with static IP addresses. Define the lease time
    in seconds, minutes, or hours. The default is one hour, and the minimum is two
    minutes. If you want leases that never expire, don’t specify a lease time.'
  prefs: []
  type: TYPE_NORMAL
- en: '*dhcp-lease-max=25* defines how many leases can be active at one time. You
    can have a large address pool available, and then limit the number of active leases.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 16.10](#rec-advertise)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 8 dhclient*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.10 Advertising Important Services over DHCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to advertise various servers to your LAN clients over DHCP.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some services, like the default route to your internet gateway, DNS server,
    and NTP server, can be advertised to your LAN clients so that they automatically
    use them. The following examples show how to configure */etc/dnsmasq.conf* to
    advertise some services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the default router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Advertise your DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This example points the way to your local NTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'How do you know which numbers to use? Use this command to list all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*dnsmasq --help dhcp* displays the known DHCPv4 configuration options. See
    the Discussion in [Recipe 16.11](#rec-dhcp-zones) for more information on the
    DHCPv4 configuration options.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.11 Creating DHCP Zones for Subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have two subnets, and you want to configure Dnsmasq to apply different options
    to them, such as different default routers and servers.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define your zones with whatever names you want to give them, like *zone1* and
    *zone2*, and set their address ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The two zones have different routers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'They use the same DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '*zone2* gets an NTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Only a few of the DHCP options are useful. They are very old, and some are
    mysterious, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: option default-url string;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The format and meaning of this option is not described in any standards document,
    but is claimed to be in use by Apple Computer. It is not known what clients may
    reasonably do if supplied with this option. Use at your own risk.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: man 5 DHCP options
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Client support is inconsistent for many of them. The only ones I use are NTP,
    routers, and DNS servers.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 5 dhcp*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.12 Assigning Static IP Addresses from DHCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to centralize IP addressing as much as possible, including assigning
    static IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *dhcp-host* option in */etc/dnsmasq.conf*. Identify the client machine
    by its hostname, and assign an unused address from your LAN’s address block. (It
    is not necessary to use the DHCP address range you defined with the *_dhcp-range=**
    option in */etc/dnsmasq.conf* for static addresses.) The following example assigns
    an address to *server2* in the 192.168.3.0/24 network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Restart Dnsmasq, then the next time *server2* requests an address it will receive
    the address specified by the *dhcp-host=* option.
  prefs: []
  type: TYPE_NORMAL
- en: Use multiple *dhcp-host=* lines to configure multiple clients, one per line.
  prefs: []
  type: TYPE_NORMAL
- en: You may use the client’s MAC address in place of the hostname.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, centralizing administration chores saves time and headaches.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.13 Configuring DHCP Clients for Automatic DNS Entries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want your DHCP clients to be entered into DNS automatically by Dnsmasq.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only thing the clients have to do is send their hostnames to Dnsmasq’s DHCP
    server, which is the default in most Linuxes.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose a DHCP client on the local *sqr3l.nut* domain has the host name *client4*.
    *client4* starts up, and receives its IP address and other network information
    from Dnsmasq. Dnsmasq receives *client4*’s hostname and enters it into DNS. Now
    other hosts on the network can access *client4* and *client4.sqr3l.nut*.
  prefs: []
  type: TYPE_NORMAL
- en: There must not be any duplicate entries for *client4* in */etc/hosts*.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three different ways to check your DHCP client configuration: in
    *dhclient.conf*, NetworkManager’s graphical configuration tool (*nm-connection-editor*),
    and with the *nmcli* command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First check *dhclient*, which has been the default DHCP client on Linux for
    years. On most Linux systems its configuration file is */etc/dhcp/dhclient.conf*.
    Look for this line, which automatically finds the system’s hostname and sends
    it to the DHCP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Or a line like this, specifying the system’s hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If there is no *dhclient.conf* file, then NetworkManager is your DHCP client
    manager. You can check this in your graphical *nm-connection-editor* ([Figure 16-3](#fig-dnsmasq-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![NetworkManager sends client hostname to DHCP server](Images/lcb2_1603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16-3\. NetworkManager sends client hostname to DHCP server
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When the connection method is “Automatic (DHCP),” NetworkManager sends the hostname
    to the DHCP server. “Automatic (addresses only)” does not send the hostname to
    the DHCP server, but only provides DNS to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also use the *nmcli* command. First, find your active network connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Then verify that it sends the hostname to your DHCP server. The following example
    confirms that it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If it says *no*, run the following commands to set it to *yes*. After that,
    reload the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you prefer a graphical tool to manage NetworkManager, it’s best to use NetworkManager’s
    graphical configuration utility, *nm-connection-editor*, rather than a different
    graphical tool, such as the network module in the GNOME control panel. The *nm-connection-editor*
    offers the most complete configuration options, and it is the same on all Linux
    distros.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 1 nmcli*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 nmcli-examples*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 5 nm-settings*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.14 Managing Dnsmasq Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dnsmasq has the option to send its messages to a file of your choice using the
    legacy *syslog* daemon, rather than to *journalctl*, and you want to know which
    is the best option.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It does not matter which one you use: the same information is logged either
    way. The default behavior is to log to the systemd journal.'
  prefs: []
  type: TYPE_NORMAL
- en: It can be convenient to isolate Dnsmasq logs in their own directory, such as
    */var/log/dnsmasq/dnsmasq.log*. Use the *log-facility=* option in */etc/dnsmasq.conf*
    to specify the log file you want to use, then restart Dnsmasq. The file must already
    exist or Dnsmasq will not start.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your logfile will grow very large unless you set up log rotation. The following
    example configuration, */etc/logrotate.d/dnsmasq*, sets up a simple weekly rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Test it with the *logrotate* command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This shows no errors and it is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: systemd supports both *journalctl* and the *syslog* daemon. They will probably
    exist together for a long time, so you can set up logging in whatever way you
    prefer.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*man 8 rsyslog*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*man 1 journalctl*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 20](ch20.xhtml#cha-trouble)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.15 Configuring Wildcard Domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a wildcard domain in Dnsmasq, so that requests for the domain’s
    subdomains resolve without manually adding the subdomains to your DNS.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the *address* option in */etc/dnsmasq.conf* to create the top-level domain
    (TLD):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart Dnsmasq, then run *nslookup* to test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '*foo.wildcard.net* resolves, showing that it works.'
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use DNS wildcards carefully. Wildcards are useful when you’re doing development
    work on complex services such as Kubernetes. Make sure to use address ranges that
    are different from the ranges on your LAN’s name server, and are available only
    to LAN clients.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Dnsmasq](https://oreil.ly/vvfHg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
