- en: Chapter 12\. The Expanding Landscape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 扩展的景观
- en: The landscape of tools that are available to interact with Linux containers
    is constantly evolving, especially with the significant adoption that Kubernetes
    has experienced for many years.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于与Linux容器交互的工具的格局在不断发展，特别是随着多年来Kubernetes的显著采纳。
- en: In this chapter, we are going to take a very quick tour of a few tools that
    are inspired by Docker but are often focused on improving specific use cases.
    This is not intended to be a comprehensive list but instead is intended to simply
    give you a taste of some of the categories and options that are available to explore.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将快速浏览一些受Docker启发但通常专注于改善特定用例的工具。这并不意味着要全面列出，而是简单地让您体验一些可供探索的类别和选项。
- en: Client Tools
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端工具
- en: 'In this section, we are going to introduce three command-line tools: `nerdctl`,
    `podman`, and `buildah`. All of these tools might be useful to anyone familiar
    with Docker and its common workflows.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍三个命令行工具：`nerdctl`、`podman`和`buildah`。所有这些工具对于熟悉Docker及其常见工作流程的人都可能很有用。
- en: nerdctl
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nerdctl
- en: Although [`crictl`](https://oreil.ly/zElq_)^([1](ch12.html#idm46803124121664))
    is installed by default in many `containerd`-based environments, `nerdctl` is
    an easy-to-use Docker-compatible CLI for `containerd`, which is worth checking
    out. This means that `nerdctl` can provide a very easy migration path for people
    and scripts that use Docker but need to support `containerd` systems that are
    not running the Docker daemon.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在许多基于`containerd`环境中默认安装了[`crictl`](https://oreil.ly/zElq_)^([1](ch12.html#idm46803124121664))，`nerdctl`是一个易于使用的Docker兼容CLI，适用于`containerd`，值得一试。这意味着`nerdctl`可以为使用Docker但需要支持未运行Docker守护程序的`containerd`系统的人和脚本提供非常简便的迁移路径。
- en: 'As a quick example, if you spin up a small Kubernetes cluster with `kind`,
    which we discussed in [“Kind”](ch10.html#k8s_kind), you should end up with a `containerd`-based
    Kubernetes cluster that is not directly compatible with the `docker` CLI:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 举个快速的例子，如果你用我们在[“Kind”](ch10.html#k8s_kind)中讨论过的`kind`快速启动一个小型Kubernetes集群，你将会得到一个基于`containerd`的Kubernetes集群，但它并不直接兼容`docker`命令行界面：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should now be inside the `kind`/Kubernetes container.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经在`kind`/Kubernetes容器内部了。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the `curl` command that follows, you must ensure that you are downloading
    the correct version for your architecture. You will need to replace `${ARCH}`
    with either `amd64` or `arm64`, depending on your system. Also, feel free to try
    and [download the most recent version](https://github.com/containerd/nerdctl/releases)
    of `nerdctl`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的`curl`命令中，你必须确保下载适合你架构的正确版本。你需要用你的系统架构`${ARCH}`替换为`amd64`或`arm64`。同时，可以尝试[下载最新版本](https://github.com/containerd/nerdctl/releases)的`nerdctl`。
- en: 'Once you have edited the following `curl` command and reassembled it into a
    single line, you should be able to download and extract the `nerdctl` client and
    then try a few commands with it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你编辑了以下的`curl`命令，并将其重新组装成一行，你就可以下载并解压`nerdctl`客户端，然后尝试几个命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In most cases, `docker` commands can be used with almost no alteration by `nerdctl`.
    The one change that might stand out is the need to often provide a namespace value.
    This is because `containerd` provides [a fully namespaced API](https://github.com/containerd/containerd/blob/main/docs/namespaces.md),
    and we need to specify which one we are interested in interacting with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，`nerdctl`几乎可以无需修改地使用`docker`命令。唯一可能突出的变化是通常需要提供一个命名空间值。这是因为`containerd`提供了[完全命名空间化的API](https://github.com/containerd/containerd/blob/main/docs/namespaces.md)，我们需要指定我们想要与之交互的命名空间。
- en: 'Once you have exited the `kind` container, you can go ahead and delete it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦退出`kind`容器，你可以继续删除它：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: podman and buildah
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: podman和buildah
- en: '[`podman`](https://podman.io) and [`buildah`](https://buildah.io) are a set
    of tools from Red Hat that were created early on to provide a container workflow
    that did not rely on a daemon process, like Docker. It is heavily used within
    the Red Hat community and rethinks the way that images are built and containers
    are run and managed.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`podman`](https://podman.io)和[`buildah`](https://buildah.io)是Red Hat提供的一组工具，早期创建的目的是提供一个不依赖于像Docker那样的守护进程的容器工作流程。它在Red
    Hat社区内被广泛使用，并重新思考了镜像构建和容器运行管理的方式。'
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can find a good introduction to [`podman` and `buildah` for Docker users
    on the Red Hat blog](https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Red Hat博客上找到一个适合Docker用户的[`podman`和`buildah`介绍](https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users)。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: An overview of installing and using `kind` can be found in [“Kind”](ch10.html#k8s_kind).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和使用`kind`的概述可以在[“Kind”](ch10.html#k8s_kind)中找到。
- en: 'You should now be inside the `kind`/Kubernetes container:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该已经进入`kind`/Kubernetes容器：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Unlike `docker` (which interfaces with the Docker daemon) and `nerdctl` (which
    interfaces with `containerd`), `podman` skips the container engine and instead
    directly interfaces with an underlying container runtime, like `runc`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与`docker`（与Docker守护程序接口）和`nerdctl`（与`containerd`接口）不同，`podman`跳过容器引擎，直接与底层容器运行时（如`runc`）接口。
- en: Although `podman build` can be used to build containers as well, `buildah` provides
    an advanced interface for image building that makes it possible to script the
    whole image-building process and remove the need to rely on the *Dockerfile* format
    (or *Containerfile*, as `podman` calls it).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`podman build`也可以用于构建容器，但`buildah`提供了一个高级接口用于图像构建，可以脚本化整个图像构建过程，并消除对*Dockerfile*格式（或`podman`称为的*Containerfile*）的依赖。
- en: We won’t dig into the details of `buildah` here, but you can try a very simple
    example in the `kind` container, and if you are interested in alternatives to
    the traditional `Dockerfile` approach, or the newer alternatives provided by BuildKit’s
    [LBB interface](https://github.com/moby/buildkit#exploring-llb), you can read
    more about `buildah` online via [GitHub](https://github.com/containers/buildah)
    and the [Red Hat blog](https://www.redhat.com/sysadmin/building-buildah).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会深入探讨`buildah`的细节，但您可以在`kind`容器中尝试一个非常简单的示例，如果您对传统的`Dockerfile`方法的替代方法或BuildKit的新替代方法（通过[LBB接口](https://github.com/moby/buildkit#exploring-llb)）感兴趣，您可以通过[GitHub](https://github.com/containers/buildah)和[Red
    Hat博客](https://www.redhat.com/sysadmin/building-buildah)在线阅读更多关于`buildah`的信息。
- en: 'To try out a `buildah` script in the `kind` container, go ahead and run the
    following commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`kind`容器中尝试运行`buildah`脚本，请继续运行以下命令：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have exited the `kind` container, you can go ahead and delete it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 退出`kind`容器后，可以继续删除它：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: All-in-One Developer Tools
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一体化开发工具
- en: Although Docker Desktop is a very useful tool, changes in Docker’s licensing
    and the broader technology landscape have led some people and organizations to
    look for alternative tools. In this section, we will take a quick look at Rancher
    Desktop and Podman Desktop and how they can be used to provide some of the functionality
    of Docker Desktop while also bringing some interesting features of their own.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Docker Desktop是一个非常有用的工具，但Docker的许可证变更和更广泛的技术格局导致一些人和组织寻找替代工具。在本节中，我们将简要介绍Rancher
    Desktop和Podman Desktop以及它们如何提供部分Docker Desktop功能，并带来一些自己的有趣特性。
- en: Rancher Desktop
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rancher Desktop
- en: '[Rancher Desktop](https://rancherdesktop.io) is designed to provide a very
    similar experience to Docker Desktop while focusing specifically on Kubernetes
    integration. It uses [k3s](https://k3s.io) to provide a certified, lightweight
    Kubernetes backend and can use either `containerd` or `dockerd` (`moby`) as the
    container runtime.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[Rancher Desktop](https://rancherdesktop.io)专为提供与Docker Desktop非常相似的体验而设计，重点是Kubernetes集成。它使用[k3s](https://k3s.io)提供认证的轻量级Kubernetes后端，并且可以使用`containerd`或`dockerd`（`moby`）作为容器运行时。'
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You should probably quit Docker (and/or Podman) Desktop, if either one is running,
    before trying out Rancher Desktop, since they all spin up a VM that will consume
    system resources.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试运行Rancher Desktop之前，您可能应该退出Docker（和/或Podman）Desktop，因为它们都会启动一个消耗系统资源的虚拟机。
- en: After downloading, installing, and launching Rancher Desktop, you will have
    a local Kubernetes cluster, which, by default, is using `containerd` and can be
    interacted with via `nerdctl`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下载、安装和启动Rancher Desktop后，您将拥有一个本地的Kubernetes集群，默认情况下使用`containerd`，并可以通过`nerdctl`进行交互。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The exact location where Rancher Desktop installs the `nerdctl` binary might
    vary a bit depending on which operating system you are using. You should initially
    try and make sure that you are using the version that was packaged with the Rancher
    Desktop.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher Desktop安装`nerdctl`二进制文件的确切位置可能会根据您使用的操作系统而有所不同。您应该首先确保使用的是与Rancher Desktop打包的版本。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Don’t forget to quit Rancher Desktop when you are done; otherwise the VM will
    stay running and consume additional resources.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成使用 Rancher Desktop 后，请不要忘记退出；否则虚拟机将继续运行并消耗额外的资源。
- en: Podman Desktop
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Podman Desktop
- en: '[Podman Desktop](https://podman-desktop.io) is focused on providing a daemon-less
    container tool that still provides the seamless experience that developers on
    all of the major operating systems have grown accustomed to.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[Podman Desktop](https://podman-desktop.io)专注于提供一个无守护进程的容器工具，仍然能够提供开发者在所有主要操作系统上习惯的无缝体验。'
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You should probably quit Docker (and/or Rancher) Desktop, if either one is running,
    before trying out Podman Desktop, since they all spin up a VM that will consume
    system resources.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试 Podman Desktop 之前，您应该可能退出正在运行的 Docker（和/或 Rancher）Desktop，因为它们都会启动一个会消耗系统资源的虚拟机。
- en: After downloading, installing, and launching Podman Desktop, you will see an
    application window on the Home tab. If Podman Desktop does not detect the `podman`
    CLI on your system, it will prompt you to install it via a button labeled Install.
    This should walk you through the installation of the `podman` client. When the
    Podman Desktop VM, which can be controlled from the command line via the `podman
    machine` command, is not started, click the Run Podman switch, and then wait a
    few moments. The switch should disappear, and you should see the “Podman is running”
    message.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下载、安装并启动 Podman Desktop 后，您将在主页选项卡上看到一个应用程序窗口。如果 Podman Desktop 在您的系统上未检测到`podman`
    CLI，则会提示您通过一个标有“安装”的按钮安装它。这应该会引导您完成`podman`客户端的安装。当未启动 Podman Desktop VM（可通过`podman
    machine`命令从命令行控制）时，请单击“运行 Podman”开关，然后稍等片刻。开关应该会消失，您会看到“Podman 正在运行”的消息。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The exact location where Podman Desktop installs the `podman` binary might vary
    a bit depending on which operating system you are using. You should initially
    make sure that you are using the version that was installed via Podman Desktop.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Podman Desktop 安装`podman`二进制文件的确切位置可能会有所不同，这取决于您使用的操作系统。您应该首先确保使用的是通过 Podman
    Desktop 安装的版本。
- en: 'To test the system, give this a try:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 若要测试系统，请尝试这样做：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you are done exploring Podman Desktop, you can go ahead and shut down the
    VM by clicking the Preferences tab, selecting Resources → Podman → Podman Machine,
    and then clicking the Stop button.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成探索 Podman Desktop 后，可以转到“偏好设置”选项卡，选择“资源”→“Podman”→“Podman Machine”，然后单击“停止”按钮关闭虚拟机。
- en: At this point, you can go ahead and quit the Podman Desktop application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以继续退出 Podman Desktop 应用程序。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can also start and stop the Podman VM by using the `podman machine start`
    and `podman machine stop` commands.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`podman machine start`和`podman machine stop`命令启动和停止 Podman VM。
- en: Wrap-Up
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Docker’s place in technology history is well established. There is no doubt
    that the introduction of Docker took the existing Linux container technology,
    extended it with the image format, and then made the concepts and technology accessible
    to engineers all around the world.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在技术历史上的地位已经得到确认。毫无疑问，Docker 的引入扩展了现有的 Linux 容器技术，并通过镜像格式使概念和技术变得全球工程师都可以接触到。
- en: We can argue about whether things are better today than they were before Linux
    containers and Docker, and we can debate about which tools and workflows are better,
    but in the end, much of that comes down to how each tool is used and how those
    workflows are designed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以辩论关于今天是否比 Linux 容器和 Docker 出现之前更好，并且我们可以讨论哪些工具和工作流程更好，但最终，这取决于每个工具的使用方式以及这些工作流程的设计。
- en: No tools will magically solve all your problems, and any tool can be implemented
    so poorly that it makes everything much worse than it was before. This is why
    it is so important to spend significant time thinking about the process workflow
    that you want to implement from at least three angles. First, what inputs and
    outputs do we need the workflow to support? Second, how easy will the workflow
    be for the people who need to use it every day or just once a year? And third,
    how easy will it be to run and maintain for the people who must ensure that the
    system runs smoothly and securely at all times?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 没有工具可以奇迹般地解决所有问题，任何工具都可能实施得如此糟糕，以至于比之前更糟。这就是为什么花费大量时间思考工作流程如此重要的原因，至少从三个角度考虑：首先，我们需要工作流程支持哪些输入和输出？其次，对于每天需要使用它或仅需每年使用一次的人员来说，工作流程有多容易？第三，确保系统始终平稳和安全运行的人员需要运行和维护工作流程有多容易？
- en: Once you have a good picture of what you are trying to achieve, then you can
    start to pick the tools that will help you enable these goals.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对自己想要实现的目标有了清晰的认识，你就可以开始选择能够帮助你实现这些目标的工具。
- en: '^([1](ch12.html#idm46803124121664-marker)) Full URL: [*https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md*](https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch12.html#idm46803124121664-marker)) 完整网址：[*https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md*](https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md)
