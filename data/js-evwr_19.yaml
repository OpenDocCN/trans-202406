- en: Chapter 18\. Desktop Applications with Electron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My introduction to personal computers was in a school lab full of Apple II machines.
    Once a week, my classmates and I were ushered into the room, handed some floppy
    disks, and given a rough set of instructions on how to load an application (typically
    *Oregon Trail*). I don’t remember much from these sessions other than feeling
    completely *locked in* to the little world I was now able to control. Personal
    computers have come a long way since the mid-1980s, but we still rely on desktop
    applications to perform many tasks.
  prefs: []
  type: TYPE_NORMAL
- en: On a typical day, I may access an email client, a text editor, a chat client,
    spreadsheet software, a music streaming service, and several more desktop applications.
    Oftentimes, these have a web application equivalent, but the convenience and integration
    of a desktop application can provide several user experience benefits. However,
    for years the ability to create these applications felt out of reach. Thankfully,
    today we are able to use web technologies to build fully featured desktop applications
    with a small learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: What We’re Building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the next few chapters we’ll build a desktop client for our social note
    application, Notedly. Our goal is to use JavaScript and web technologies to develop
    a desktop application that a user can download and install on their computer.
    For now, this application will be a simple implementation that wraps our web application
    within a desktop application shell. Developing our app in this way will allow
    us to quickly ship a desktop app to those users who are interested, while providing
    us the flexibility to introduce a custom application for desktop users at a later
    date.
  prefs: []
  type: TYPE_NORMAL
- en: How We’re Going To Build This
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build our application, we’ll be using [Electron](https://electronjs.org),
    an open source framework for building cross-platform desktop applications with
    web technologies. It works by utilizing Node.js and Chrome’s underlying browser
    engine, Chromium. This means that as developers we have access to the world of
    the browser, Node.js, and operating system–specific abilities, which are typically
    unavailable in a web environment. Electron was originally developed by GitHub
    for the [Atom text editor](https://atom.io), but has since been used as a platform
    for applications both big and small, including Slack, VS Code, Discord, and WordPress
    Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start development, we need to make a copy of the project starter
    files to our machine. The [project’s source code](https://github.com/javascripteverywhere/desktop)
    contains all of the scripts and references to third-party libraries that we will
    need to develop your application. To clone the code to our local machine, open
    the terminal, navigate to the directory where you keep your projects, and **`git
    clone`** the project repository. If you’ve worked through the API and web chapters,
    you may also have already created a *notedly* directory to keep the project code
    organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing Third-Party Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By making a copy of the book’s starter code and running `npm install` in the
    directory, you avoid having to again run `npm install` for any of the individual
    third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: /src
  prefs: []
  type: TYPE_NORMAL
- en: This is the directory where you should perform your development as you follow
    along with the book.
  prefs: []
  type: TYPE_NORMAL
- en: /solutions
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the solutions for each chapter. If you get stuck, these
    are available for you to consult.
  prefs: []
  type: TYPE_NORMAL
- en: /final
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains the final working project.
  prefs: []
  type: TYPE_NORMAL
- en: With our project directory created and dependencies installed, we are ready
    to begin our development.
  prefs: []
  type: TYPE_NORMAL
- en: Our First Electron App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our repository cloned to our machine, let’s develop our first Electron
    app. If you look within your *src* directory, you’ll see that there are a few
    files. The *index.html* file contains bare-bones HTML markup. For now, this file
    will serve as Electron’s “renderer process,” meaning that it will be the web page
    displayed as a window by our Electron application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The *index.js* file is where we will set up our Electron application. In our
    application, this file will contain what Electron calls the “main process,” which
    defines the application shell. The main process works by creating a `BrowserWindow`
    instance in Electron, which serves as the application shell.
  prefs: []
  type: TYPE_NORMAL
- en: index.js Versus main.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though I’ve named the file *index.js* to follow the pattern found in the rest
    of our sample applications, it is common in Electron development to name the “main
    process” file *main.js*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set up our main process to display a browser window containing our HTML
    page. First, import Electron’s `app` and `browserWindow` functionality in *src/index.js*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can define our application’s `browserWindow` and define the file that
    our application will load. In *src/index.js*, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, we are ready to run our desktop application locally. In
    your terminal application, from your project’s directory, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command will run `electron src/index.js`, launching a development environment
    version of our application (see [Figure 18-1](#desktop_helloworld)).
  prefs: []
  type: TYPE_NORMAL
- en: '![An image of our ''Hello World'' Electron application](assets/jsev_1801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-1\. Running the start command will launch our “Hello World” Electron
    application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: macOS Application Window Details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'macOS handles application windows differently from Windows. When a user clicks
    the “close window” button, the application window closes, but the application
    itself does not quit. Clicking the application’s icon in the macOS dock will reopen
    the application window. Electron allows us to implement this functionality. Add
    the following to the bottom of the *src/index.js* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With this added, you can see these changes by quitting the application and rerunning
    it with the `npm start` command. Now, if a user is accessing our application with
    macOS, they will see the expected behavior when closing a window.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Electron is based on the Chromium browser engine (the engine behind Chrome,
    Microsoft Edge, Opera, and [many other browsers](https://oreil.ly/iz_GY)), it
    also gives us access to Chromium’s Developer Tools. This allows us to perform
    all of the same JavaScript debugging that we might do in a browser environment.
    Let’s check if our application is in development mode and, if so, automatically
    open dev tools when our app launches.
  prefs: []
  type: TYPE_NORMAL
- en: To perform this check, we’ll use the [`electron-util` library](https://oreil.ly/JAf2Q).
    This is a small collection of utilities that will allow us to easily check system
    conditions and simplifies boilerplate code for common Electron patterns. For now,
    we’ll be making use of the `is` module, which will allow us to check if our application
    is in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of our *src/index.js* file, import the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in our application code, we can add the following on the line below `window.``loadFile(*index.html*)`
    where we load our HTML file, which will open the development tools when the application
    is in a development environment ([Figure 18-2](#desktop_devtools)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![A screenshot of our ''Hello World'' application with the browser''s dev tools
    open](assets/jsev_1802.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-2\. Now when we open our application during development, the browser
    dev tools will automatically open
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Electron Security Warning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may notice that our Electron app currently displays a security warning related
    to an insecure Content Security Policy (CSP). We will address this warning in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: With easy access to the browser dev tools, we are well prepared to develop a
    client application.
  prefs: []
  type: TYPE_NORMAL
- en: The Electron API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the advantages of desktop development is that, through the Electron
    API, we gain access to operating system-level features that are rightfully unavailable
    in a web browser environment, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native file drag and drop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS Dark Mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom menus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robust keyboard shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System dialogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application tray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can imagine, these options allow us to add some unique features and improved
    user experiences to our desktop clients. We won’t be using these in our simple
    sample application, but it is worth familiarizing yourself with them. [Electron’s
    documentation](https://electronjs.org/docs) provides detailed examples of each
    of Electron’s APIs. Additionally, the Electron team has created [`electron-api-demos`](https://oreil.ly/Xo7NM),
    a fully functioning Electron application that demonstrates many of the unique
    features of the Electron API.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we’ve explored the basics of using Electron to build desktop
    applications with web technologies. The Electron environment offers us, as developers,
    an opportunity to provide a cross-platform desktop experience to users without
    learning the intricacies of multiple programming languages and operating systems.
    Armed with the simple setup we’ve explored in this chapter and knowledge of web
    development, we are well prepared to build robust desktop applications. In the
    next chapter, we’ll look at how we can incorporate an existing web app into an
    Electron shell.
  prefs: []
  type: TYPE_NORMAL
