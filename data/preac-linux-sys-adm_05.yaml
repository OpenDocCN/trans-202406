- en: Chapter 5\. Connecting to a Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standalone Linux system is powerful, but the scope of what the system is ultimately
    capable of is limited. Only a single operator or administrator can use a standalone
    system simultaneously. While the system can still run multiple workloads, its
    services are restricted to local access.
  prefs: []
  type: TYPE_NORMAL
- en: Linux is a multitasking, multiuser operating system. One of its most outstanding
    values is being networked with other computers to allow multiple users to run
    various workloads simultaneously. Connecting a Linux system to a network enables
    it to become part of a local network, a grid, a cloud, or the global internet.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to select an IP addressing scheme for your
    network and some advantages and disadvantages of the static and dynamic options.
    You also learn the security implications of connecting systems to a network. You
    will learn how to, as much as possible, prevent security breaches by implementing
    good security practices, such as using secure protocols, turning off unnecessary
    services and daemons, and keeping systems patched and updated.
  prefs: []
  type: TYPE_NORMAL
- en: Plugging into a Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s no great skill required to plug a server system into an existing network.
    These days, as soon as a new system comes online, a Dynamic Host Configuration
    Protocol (DHCP) server provides it with an IP address, subnet mask, gateway, Domain
    Name System (DNS) servers, and some basic routing information. There are two schools
    of thought concerning DHCP and servers. The first claims that all server systems
    should have static IP addresses, and the second asserts that all systems should
    use DHCP for IP address distribution and management. I’ve always configured servers,
    printers, and networking equipment with static IP addresses near the lower end
    of the IP address pool. For me, it makes good organizational sense to do so rather
    than relying on DHCP and DNS services to maintain order for services that users
    rely on so heavily.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, I describe the two IP addressing schemes—static
    and dynamic—and the advantages and disadvantages of each. The example network
    for each has the following IP addressing information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Network: 192.168.1.0/24'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gateway: 192.168.1.254 (static IP address)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DNS: 192.168.1.1, 192.168.1.2 (static IP addresses)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This example network is for learning purposes and is only practical for the
    smallest of companies or groups of users. This scheme will only work for small
    companies because there are only 251 usable IP addresses on this network after
    subtracting the gateway address and two DNS server addresses (254 – 3 = 251).
    A user might have as many as five devices that consume IP addresses, and it’s
    easy to see that it doesn’t take long to exhaust such a small pool.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a static IP address varies among Linux distributions. For these examples,
    I use Debian and CentOS distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Static IP Addressing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A static IP address is a “hard-coded” IP address embedded into a configuration
    file. The IP address does not change unless it’s changed manually. Static IP addresses
    do not depend on or use DHCP services. When assigning static IP addresses to systems,
    you should decide on a reserved block of IP addresses that you use for servers,
    network equipment (switches, routers, WiFi access points), printers, and any IP-capable
    system that is not mobile. Workstations, laptops, tablets, phones, and other mobile
    devices should use DHCP.
  prefs: []
  type: TYPE_NORMAL
- en: For example, using the network parameters mentioned in the preceding section,
    I reserve 192.168.1.1 through 192.168.1.25 for servers, network equipment, printers,
    and other stationary systems. As you note, the addresses 192.168.1.1 and .2 are
    already used on this reserved list. You can exclude a range of IP addresses in
    your DHCP configuration so that these addresses are not part of the available
    IP address pool.
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of using a static pool of IP addresses is that network
    services are stable. If you set up some inventory service and monitoring on your
    network, which I highly recommend, having those statically addressed systems will
    save some headaches for you. You’ll be able to compare inventories over time,
    see what’s changed, measure growth, and plan for changes. Another advantage is
    that you can find critical systems even if DNS and DHCP are down. A static IP
    address gives you the stability you need, irrespective of any other services’
    status.
  prefs: []
  type: TYPE_NORMAL
- en: Some network services require static IP addresses for the server systems on
    which they reside. Services such as FTP, web, VPN, database, Active Directory,
    and DNS require static IP addresses or are recommended to have them. The primary
    disadvantage and argument against static IP addressing is management. The argument
    is that managing static IP addresses is labor-intensive and might cause conflicts
    elsewhere on the network. I don’t see this as a problem for most sysadmins because
    the equipment you assign static IP addresses to lasts for years, and their locations
    are stable. You don’t typically move a server to different locations within a
    company; you never move them offsite to use and then return them as you do laptops,
    tablets, and mobile phones. A reserved pool that’s excluded from your DHCP pool
    prevents potential conflicts with other systems.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic IP Addressing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a DHCP service eliminates many of the IP address management problems that
    plagued system administrators in the days before DHCP. Assigning static IP addresses
    and keeping up with them for more than a few systems becomes a management nightmare.
    Static IP addresses made a little more sense when users only had desktop systems.
    But these days, with laptops, tablets, and mobile phones, a static IP address
    would likely mean that the user would have network access only on their corporate
    network, that they would experience IP conflicts if they ever connected to another
    network, or that they would have to know how to change their systems from static
    to dynamically assigned IP addresses each time they connected to a different network.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if your laptop has a static IP address for your corporate network
    of 192.168.1.50, and you take that laptop to a remote location, such as your home,
    to do some work, then your home would have to use the same IP addressing scheme
    as your office. If it does, your laptop might conflict with a dynamically assigned
    IP address for your television, someone’s mobile phone, or some other IP-capable
    gadget. You might be able to work around the issue at home, but when you take
    that same laptop to a hotel and attempt to connect to your corporate VPN, chances
    are very good that you wouldn’t be able to because of that statically assigned
    IP address. The hotel might use a 10.0.1.0 IP addressing scheme, so your laptop
    would never connect.
  prefs: []
  type: TYPE_NORMAL
- en: Device mobility is one great advantage of DHCP. The user never has to reconfigure
    anything no matter where the laptop connects to another network or the internet.
    The other advantage is that once you configure a DHCP pool of addresses, there’s
    not much maintenance for you to do. You’ll have to determine which lease duration
    best suits your users. I’ve seen lease durations range from 24 hours to 30 days.
    I don’t have a particular preference, but if you use a long lease duration (more
    than a few days), you might have some occasional cleanup by removing duplicates,
    stale leases, and so on. DHCP is supposed to clean up after itself but doesn’t
    always.
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use static IP addressing, DHCP, or a mixture of the two is really
    up to your personal preference for IP address management. You can still use a
    pure DHCP scheme and reserve IP addresses by entering MAC addresses, making them
    statically assigned. The only time there’s a problem is if you change network
    interface cards (NICs). You must remember to update the DHCP reservations list
    with the new NIC’s MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you change network interface card (NIC or adapter) settings, such as changing
    from DHCP to a static IP address, you need to restart the adapter for those changes
    to take effect. Restart the adapter by issuing these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The adapter name varies by system, but some examples are `eth0` and `enp0s3`.
  prefs: []
  type: TYPE_NORMAL
- en: The next section discusses the security-related repercussions of placing systems
    on the network and how you can apply best security practices to your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Networking and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two types of Linux systems can be considered secure: one powered off and one
    powered on but not connected to a network. The powered-off system is safe from
    over-the-network attacks, as are non-networked systems. The powered-off system’s
    only security vulnerability is physical security. Someone with physical access
    to the system could steal, dismantle, or damage it. Non-networked systems are,
    as mentioned at the outset of the chapter, still somewhat useful but have limited
    use beyond a single operator.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you network a system, you’ve exposed it to over-the-network attacks. Malicious
    actors continuously scan IP address ranges, searching for vulnerable systems to
    exploit. While many servers are exposed to the internet via [demilitarized zones
    (DMZs)](https://oreil.ly/wxezB) or are inside corporate or home firewall-protected
    networks, they are also susceptible to attack. Once inside your network, a malicious
    actor can perform automated scans of all connected systems, searching for vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, creating user accounts on your system decreases security because
    of weak passwords, the potential for on-path attacks, and social engineering exploits
    that might compromise one’s credentials to a malicious actor.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these reasons, administrators must take the following measures:'
  prefs: []
  type: TYPE_NORMAL
- en: Only grant what’s required for users to work (the principle of *least privilege*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce strong security policies for passwords, keys, or multifactor authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularly patch and update systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform periodic security audits on all systems, network equipment, and devices
    that access corporate resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a System for Network Connectivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a system administrator provisions a new system and installs it into a rack,
    plugging in network cables or connecting a virtual machine to a virtual network
    is standard practice. We often rely on others to vet the systems’ function, purpose,
    and security options. However, this is not always the case. New system installation
    is often automatically performed by provisioning a “standard build” from a prepared
    operating system image that could be months or years old. Using old images is
    a poor security practice. If the system is immediately connected to a network
    before it’s fully updated and secured, it’s vulnerable to attack and compromise
    before it begins its regular duties on the network.
  prefs: []
  type: TYPE_NORMAL
- en: A solution is to provision new systems on a private network where they can receive
    updates, patches, and secure configurations from an internal repository before
    being placed into a production network.
  prefs: []
  type: TYPE_NORMAL
- en: Pruning Your Systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pruning means removing any unnecessary services and daemons from your systems.
    There’s no need to create problems for yourself by running a production system
    with multiple services that no one uses but that could leave your system vulnerable
    to attack. Only install what you need to provide services to your users or other
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: At a minimum, you need to have an SSH daemon running on your systems so that
    you can log in and manage them remotely. If you find that some users require a
    special service that’s only used occasionally or that leaves a system in a less
    than secure state, either turn on the service when needed and turn it off when
    it’s no longer being used or place the service on a secure network that can only
    be accessed from a restricted number of systems.
  prefs: []
  type: TYPE_NORMAL
- en: Securing Network Daemons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deciding which network daemons to install and support is generally easy because
    you know your system’s intended purpose each time you build a system. If it’s
    a web server, you know that you’ll install a web service such as Apache or NGINX.
    You’ll install MySQL, MariaDB, or some other database software if the system is
    a database server. The issue is that for a system to be useful, it must expose
    the corresponding TCP ports for its services. These network daemons are vulnerable
    to attack and, therefore, must be protected.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple methods of securing network daemons and services, but installing
    secure versions of the services you want to provide is the simplest method. For
    example, if your new system is a DNS server, use DNSSEC. If you configure a Lightweight
    Directory Access Protocol (LDAP) server, use LDAPS. And always use HTTPS for web
    servers secured with a certificate. [Table 5-1](#examples_of_secure_services)
    shows a partial list of secure services.
  prefs: []
  type: TYPE_NORMAL
- en: Table 5-1\. Examples of secure services
  prefs: []
  type: TYPE_NORMAL
- en: '| Protocol | Port | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| https | 443/tcp | HTTP protocol over TLS/SSL |'
  prefs: []
  type: TYPE_TB
- en: '| https | 443/udp | HTTP protocol over TLS/SSL |'
  prefs: []
  type: TYPE_TB
- en: '| ldaps | 636/tcp | LDAP over SSL |'
  prefs: []
  type: TYPE_TB
- en: '| ldaps | 636/udp | LDAP over SSL |'
  prefs: []
  type: TYPE_TB
- en: '| imaps | 993/tcp | IMAP over SSL |'
  prefs: []
  type: TYPE_TB
- en: '| imaps | 993/udp | IMAP over SSL |'
  prefs: []
  type: TYPE_TB
- en: '| pop3s | 995/tcp | POP-3 over SSL |'
  prefs: []
  type: TYPE_TB
- en: '| pop3s | 995/udp | POP-3 over SSL |'
  prefs: []
  type: TYPE_TB
- en: Using secure protocols and encryption doesn’t guarantee security. Still, it’s
    better than using nonsecure protocols with no encryption. Vulnerabilities frequently
    appear even for secure applications and protocols. Keeping your systems updated
    and patched helps prevent security breaches. Security patches are generally available
    before widespread damage can be done but not always, so you must remain vigilant
    in maintaining security.
  prefs: []
  type: TYPE_NORMAL
- en: The Secure Shell Daemon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common network daemon available on almost every Linux system is the
    Secure Shell (SSH) daemon. SSH provides a secure (encrypted) connection to a Linux
    system over the network. Although the SSH daemon (SSHD) has built-in security
    through its encrypted channel, its communications are still vulnerable to attack.
    There are multiple methods of securing the SSHD so that attacks are less fruitful
    for an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting access to SSHD from specific hosts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two files that an administrator can use to limit access to any daemon:
    */etc/hosts.allow* and */etc/hosts.deny*. They require no service restart because
    they’re not configuration files, and the system checks them each time a client
    accesses a service. The */etc/hosts.allow* file is the more important of the two
    because its settings override those in the */etc/hosts.deny* file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An */etc/hosts.allow* file entry to enable SSH connectivity from a single IP
    address (192.168.1.50) is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This entry will only accept SSH connections from 192.168.1.50 and will deny
    them from all other IP addresses. If you find that setting such an entry in */etc/hosts.allow*
    doesn’t work for you, then you need to check for `tcp_wrapper` integration in
    `sshd` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you receive no response, your `sshd` wasn’t compiled with `tcp_wrappers`
    enabled and is likely deprecated for your distribution. This is, unfortunately,
    the case with many packaged `sshd` installations. The response you’re looking
    for is similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You have three options if your `sshd` doesn’t have `tcp_wrappers` support:'
  prefs: []
  type: TYPE_NORMAL
- en: Use other methods to secure `sshd` (`firewall` rules, `iptables`, `nftables`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile `openssh_server` with `tcp_wrappers` enabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find and replace your current `sshd` with an `openssh_server` package that has
    `tcp_wrappers` enabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To give you options for `firewalld`, `iptables`, and `nftables`, consider the
    following commands that perform similar functions to adding entries into */etc/hosts.allow*
    and */etc/hosts.deny*.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing firewalld rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you use `firewalld`, first delete the `ssh` service from `firewalld`’s rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new `zone` rather than using the default `zone`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You must reload the `firewall` to make the new configuration active:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use `iptables`, you can restrict `ssh` access to a single IP address
    with a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For netfilter (`nft`), you add a new `rule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'However if you receive an error that reads as follows, either you must create
    a new table and chain for the rule, or use an existing chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following commands to create a new table and chain named `input`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that chain names are case-sensitive. For example, if you had used the
    existing input chain, `INPUT`, you would not have received the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart `nftables` after you’ve made your changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `nftables` system replaces `iptables` and combines functionality from `iptables`,
    `ip6tables`, `arptables`, and `ebtables` into a single utility. You can read more
    about `nftables` on the [netfilter homepage](https://oreil.ly/1RXmC).
  prefs: []
  type: TYPE_NORMAL
- en: You now have multiple methods of limiting access to the SSH daemon from random
    hosts. If you don’t want to single out a specific IP address, you can isolate
    the target system by subnet using 192.168.1.0/24 instead of the individual IP
    address.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Be aware that opening access from an entire subnet might still place your system
    in significant danger if an intruder infiltrates your network. Ideally, you should
    limit access to one or two hosts so that logs and monitoring systems are likelier
    to detect a breach.
  prefs: []
  type: TYPE_NORMAL
- en: You can also configure the SSH daemon to limit access to certain users using
    the */etc/ssh/sshd_config* file. You must prevent the root user from using SSH.
    You learn how to prevent root SSH access in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Denying SSH access for the root user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should, upon installation, deny SSH access to the root user. Some Linux
    systems deny root logins via SSH by default, while others allow it. The root user
    should never log into any system via SSH. A regular user should log in via SSH
    and then become root or use the `sudo` command to perform tasks as the root user.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll have to check your */etc/ssh/sshd_config* for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `yes` to `no` and restart the SSH service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The root user cannot login via SSH. The root user may directly log into the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Using keys rather than passwords for authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Password authentication is the least secure method for authenticating users.
    Using key files is much more secure and efficient. You must make the following
    changes to the */etc/ssh/sshd_config* file and restart `sshd` for the new configuration
    to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `yes` to `no` and then look for the following two entries to ensure
    they’re uncommented and set as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart `sshd` to enable the new settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side (local system), users need to do the following to set up
    key pair authentication. Create the public/private key pair. This example is for
    the user `tux`, and the remote target system is 192.168.1.99:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the generated keys to a remote host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try logging into the target system with `ssh tux@192.168.1.99` and check
    to ensure that only the key(s) you want exist on the target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: User `tux` has successfully logged into the remote host, `server1` (192.168.1.99),
    using a secure key pair rather than a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remote connectivity: client to server'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When connecting to a secure protocol service, your client software communicates
    on a secure channel with the service daemon. You don’t have to have users do anything
    special to negotiate a secure communications link between the client and the service
    daemon.
  prefs: []
  type: TYPE_NORMAL
- en: It’s just as important to keep client software up to date as it is for you,
    as an administrator, to update the software on servers. I suggest you set up `cron`
    jobs on each user system to automatically download and install updates and configure
    each new system to receive regular updates with no user interaction required.
    Be sure to schedule any required reboots for nighttime or when the user’s system
    is idle.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about selecting an IP addressing scheme for your
    network and some advantages and disadvantages of the static and dynamic options.
    You also now know the security implications of connecting systems to your network.
    You should understand the dangers and how to, as much as possible, prevent security
    breaches by implementing some good security practices, such as using secure protocols,
    turning off unnecessary services and daemons, and keeping systems patched and
    updated.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to install software via a package manager,
    update your system, and install software from source code.
  prefs: []
  type: TYPE_NORMAL
