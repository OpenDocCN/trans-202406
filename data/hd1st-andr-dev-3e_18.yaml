- en: 'Chapter 15\. Recycler Views: *Reduce, Reuse, Recycle*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。可循环视图：*减少、重复、回收*
- en: '![image](Images/f0621-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0621-01.png)'
- en: '**Lists of data are a key part of most apps.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据列表是大多数应用的关键部分。**'
- en: 'And in this chapter, we’ll show you how to create one using a **recycler view**:
    a **super-flexible** way of building a **scrollable list**. You’ll learn how to
    create **flexible layouts** for your list, including text views, checkboxes, and
    more. You’ll find out **how to create adapters** that **squish your data** into
    the recycler view in whatever way you choose. You’ll discover how to use **card
    views** to give your data a **3D material look**. Finally, we’ll show you how
    **layout managers** can completely change the look of your list with **just one
    or two lines of code**. Let’s get recycling…'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示如何使用**可循环视图**创建一个**超灵活**的**可滚动列表**。您将学习如何为列表创建**灵活的布局**，包括文本视图、复选框等。您将了解如何创建**适配器**，以您选择的任何方式将数据压缩到可循环视图中。您将发现如何使用**卡片视图**为您的数据赋予**3D材料外观**。最后，我们将向您展示如何使用**布局管理器**仅凭**一两行代码**完全改变列表的外观。让我们开始循环使用...
- en: What the Tasks app currently looks like
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前任务应用的外观
- en: 'In the previous chapter, we built a Tasks app that lets the user enter task
    records into a Room database. The app displays the list of records as a formatted
    `String`, and it looks like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了一个任务应用，允许用户将任务记录输入到Room数据库中。该应用将记录列表显示为格式化的`String`，并且看起来像这样：
- en: '![image](Images/f0622-01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0622-01.png)'
- en: We decided to display the task records using a formatted `String` since it was
    a relatively quick and basic way of seeing the records that have been added to
    the database.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定使用格式化的`String`显示任务记录，因为这是查看已添加到数据库中的记录的相对快速和基本的方法。
- en: The list, however, looks a little bland. So how can we improve it?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是列表看起来有点单调。那么我们如何改进它呢？
- en: We can turn the list into a recycler view
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们可以将列表转换为可循环视图
- en: 'Instead of displaying the list of tasks as a formatted `String`, we can change
    it up so that it looks like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改变方式显示任务列表，而不是将其显示为格式化的`String`，使其看起来像这样：
- en: '![image](Images/f0623-01.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0623-01.png)'
- en: As you can see, each task record uses a text view and a checkbox for its data,
    instead of plain text. The items are also arranged on cards in a scrollable grid.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，每个任务记录都使用文本视图和复选框来显示其数据，而不是普通文本。这些项目还按照卡片的方式排列在可滚动的网格中。
- en: This kind of list is created using a **recycler view**. So what’s that?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的列表是使用**可循环视图**创建的。那么它是什么？
- en: Why use a recycler view?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用可循环视图？
- en: 'A recycler view is a more advanced and flexible way of displaying a list of
    data than using a simple formatted `String`. It buys you the following benefits:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可循环视图是显示数据列表的更高级和灵活的方法，而不是使用简单的格式化`String`。它为您带来以下好处：
- en: '![image](Images/f0624-01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0624-01.png)'
- en: '![Images](Images/star.png) **A rich UI for the list’s items.**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **列表项的丰富用户界面。**'
- en: Each item is displayed in a layout, so you can use views such as text views,
    image views, and checkboxes to display its data.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个项目都显示在布局中，因此您可以使用文本视图、图像视图和复选框来显示其数据。
- en: '![Images](Images/star.png) **A flexible way of positioning items.**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **一种灵活的定位项目的方法。**'
- en: Recycler views come with layout managers, which let you position views in a
    vertical or horizontal list, a grid, or a staggered grid where items have unequal
    heights.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可循环视图配备布局管理器，允许您在垂直或水平列表、网格或不等高度的交错网格中定位视图。
- en: '![Images](Images/star.png) **You can use it for navigation.**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **您可以将其用于导航。**'
- en: You can make items clickable so that they navigate to another fragment when
    clicked.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使项目可点击，以便在单击时导航到另一个片段。
- en: '![Images](Images/star.png) **It’s an efficient way to display large data sets.**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **这是显示大数据集的高效方式。**'
- en: Recycler views use a small number of views to give the appearance of a large
    collection of views that extend beyond the screen. When each item scrolls off
    the screen, it reuses—or *recycles*—its view for items that have scrolled onto
    the screen.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可循环视图使用少量视图来呈现大量视图的外观，这些视图超出屏幕范围。当每个项目滚动到屏幕外时，它会重新使用或*回收*其视图，以用于滚动到屏幕上的项目。
- en: Recycler views get their data from an adapter
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可循环视图从适配器获取其数据
- en: Each recycler view you create uses an adapter to display its data. The adapter
    uses data from a data source (such as a database), and binds it to views in the
    item’s layout. The recycler view then displays the items on the device screen
    as a scrollable list.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个您创建的回收视图都使用适配器来显示其数据。适配器使用数据源（如数据库）的数据，并将其绑定到项目布局中的视图上。然后，回收视图将这些项目作为可滚动列表显示在设备屏幕上。
- en: 'The data source, adapter, and recycler view fit together like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源、适配器和回收视图的关系如下：
- en: '![image](Images/f0624-02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0624-02.png)'
- en: We’re going to add a recycler view to the Tasks app. Let’s go through the steps
    we’ll take to do this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向Tasks应用程序添加一个回收视图。让我们一起看看我们将采取的步骤。
- en: Here’s what we’re going to do
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是我们要做的事情
- en: 'We’ll go through the following steps to add a recycler view to the Tasks app:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤向Tasks应用程序添加回收视图：
- en: '**Create a recycler view that displays a list of task names.**'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个回收视图来显示任务名称列表。**'
- en: We’ll begin by creating a basic recycler view that just displays the name of
    each task. Keeping this first version relatively simple will make it easier to
    see how each part of the recycler view is constructed, and how they fit together.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将从创建一个基本的回收视图开始，它只显示每个任务的名称。通过保持第一个版本相对简单，可以更容易地了解回收视图的各个部分如何构建以及它们如何配合。
- en: '![image](Images/f0625-01.png)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0625-01.png)'
- en: '**Update the recycler view to display a grid of cards.**'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新回收视图以显示网格卡片。**'
- en: After we’ve got a basic recycler view working, we’ll change it up so that it
    displays the name of each task and whether it’s been completed in a grid of card
    views.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们完成了基本的回收视图之后，我们将对其进行更改，以便以网格卡片的形式显示每个任务的名称和完成情况。
- en: '![image](Images/f0625-02.png)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0625-02.png)'
- en: Add a recycler view dependency to the app build.gradle file
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用的build.gradle文件中添加回收视图依赖项
- en: 'Before we can start building the recycler view, we need to add a dependency
    to the recycler view library to the app’s *build.gradle* file. Open the Tasks
    app, then open the file *Tasks/app/build.gradle*, and add the following line (in
    bold) to the `dependencies` section:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建回收视图之前，我们需要将回收视图库的依赖项添加到应用的*build.gradle*文件中。打开Tasks应用程序，然后打开文件*Tasks/app/build.gradle*，并将以下行（加粗）添加到`dependencies`部分中：
- en: '![image](Images/f0625-03.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0625-03.png)'
- en: When prompted, make sure that you sync this change with the rest of the app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示时，请确保将此更改与应用程序的其余部分同步。
- en: Now that we’ve added this dependency, let’s start building the recycler view.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了这个依赖项，让我们开始构建回收视图。
- en: '![image](Images/f0625-04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0625-04.png)'
- en: Tell the recycler view how to display each item…
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 告诉回收视图如何显示每个项目…
- en: '![image](Images/f0626-01.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0626-01.png)'
- en: The first thing that we’ll do is tell the recycler view how to display each
    task record.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要做的是告诉回收视图如何显示每个任务记录。
- en: 'For the first version of the app, we want to display the name of each task
    in the recycler view so that it looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用的第一个版本，我们希望在回收视图中显示每个任务的名称，使其看起来像这样：
- en: '![image](Images/f0626-02.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0626-02.png)'
- en: So how do we do this?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们该怎么做呢？
- en: …by defining a layout file
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: …通过定义布局文件
- en: You specify how each item in the recycler view should be laid out using a layout
    file. The recycler view uses this layout file when it needs to display each item.
    If the layout file is comprised of a single text view, for example, a text view
    will be displayed for each item in the recycler view’s list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用布局文件指定回收视图中每个项目的布局方式。当回收视图需要显示每个项目时，它将使用此布局文件。例如，如果布局文件由单个文本视图组成，则回收视图的列表中将显示一个文本视图。
- en: To create the layout file, highlight the *Tasks/app/src/main/res/layout* folder
    in the project explorer, and then choose File→New→Layout Resource File. When prompted,
    enter a file name of “task_item” and click on OK.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建布局文件，请在项目资源管理器中突出显示*Tasks/app/src/main/res/layout*文件夹，然后选择“文件→新建→布局资源文件”。在提示时，输入文件名“task_item”，然后点击“确定”。
- en: '![image](Images/f0626-03.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0626-03.png)'
- en: 'For the first version of the app, we want to display the name of each of the
    recycler view’s tasks in a single text view, so we’ll add a text view to the layout
    file we just created. To do this, update the code for *task_item.xml* so that
    it matches the code below:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用的第一个版本，我们希望在单个文本视图中显示回收视图中每个任务的名称，因此我们将在刚刚创建的布局文件*task_item.xml*中添加一个文本视图。为此，请更新*task_item.xml*的代码，使其与下面的代码匹配：
- en: '![image](Images/f0626-04.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0626-04.png)'
- en: That’s all the code that we need to tell the recycler view how each item should
    be laid out. Next, we’ll create the recycler view’s adapter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要告诉回收视图如何布局每个项目的所有代码。接下来，我们将创建回收视图的适配器。
- en: The adapter adds data to the recycler view
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器向回收视图添加数据。
- en: As we said earlier, when you use a recycler view in your app, you need to create
    an adapter for it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，当您在应用程序中使用回收视图时，需要为其创建一个适配器。
- en: 'The recycler view’s adapter has two main jobs: to create each of the views
    that are visible within the recycler view, and display a piece of data in each
    one. For the Tasks app, we need to define an adapter that uses *task_item.xml*
    to create a bunch of text views (one for each task record that’s displayed), and
    puts a task name in each one.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回收视图的适配器有两个主要作用：创建回收视图中可见的每个视图，并在其中显示一个数据片段。对于Tasks应用程序，我们需要定义一个适配器，使用*task_item.xml*来创建一堆文本视图（每个显示的任务记录一个），并在每个文本视图中放置一个任务名称。
- en: '**An adapter acts as a bridge between a data source and a recycler view.**'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**适配器充当数据源和回收视图之间的桥梁。**'
- en: We’ll build the adapter over the next few pages. Here are the steps we’ll go
    through to create it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几页中构建适配器。以下是我们将要执行的步骤。
- en: '**Specify what kind of data the adapter should work with.**'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指定适配器应处理的数据类型。**'
- en: We want the adapter to work with `Task` data, so we’ll specify that it uses
    a `List<Task>`.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们希望适配器使用`Task`数据，因此我们将指定它使用`List<Task>`。
- en: '**Define the adapter’s view holder.**'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义适配器的视图持有者。**'
- en: This controls how each view in the item’s layout should be populated.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这控制每个项目布局中的每个视图应如何填充。
- en: '**Inflate each item’s layout.**'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**膨胀每个项目的布局。**'
- en: When the recycler view needs to display each item, we’ll inflate an instance
    of *task_item.xml* for that item.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当回收视图需要显示每个项目时，我们将为该项目膨胀*task_item.xml*的一个实例。
- en: '**Display each item’s data in the layout.**'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在布局中显示每个项目的数据。**'
- en: We’ll do this by adding each `Task`’s `taskName` property value to the layout’s
    text view.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将通过将每个`Task`的`taskName`属性值添加到布局的文本视图中来执行此操作。
- en: We’ll begin by creating a file for the adapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建适配器文件。
- en: Create the adapter file
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建适配器文件。
- en: We’re going to create an adapter for the recycler view named `TaskItemAdapter`.
    To do this, highlight the *com.hfad.tasks* package in the *app/src/main/java*
    folder, then go to File→New→Kotlin Class/File. Name the file “TaskItemAdapter”
    and choose the Class option.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为回收视图创建一个名为`TaskItemAdapter`的适配器。为此，请在*app/src/main/java*文件夹中突出显示*com.hfad.tasks*包，然后转到文件→新建→Kotlin
    Class/File。将文件命名为“TaskItemAdapter”，选择类选项。
- en: 'Once you’ve created the file, update its code so it extends the `RecyclerView.Adapter`
    class like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，更新其代码，使其扩展`RecyclerView.Adapter`类，如下所示：
- en: '![image](Images/f0627-02.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0627-02.png)'
- en: This turns the class into an adapter that can be used by a recycler view.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将该类转换为可由回收视图使用的适配器。
- en: Tell the adapter what data it should work with
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 告诉适配器应该处理哪些数据
- en: When you define a recycler view adapter, you need to tell it what sort of data
    should be added to the recycler view. We’ll do this by adding a property to the
    adapter that specifies the data type.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您定义回收视图适配器时，您需要告诉它应添加到回收视图中的数据类型。我们将通过向适配器添加一个属性来指定数据类型来完成此操作。
- en: For the tasks app, we want the recycler view to display a list of task records,
    so we’ll add a `List<Task>` property named `data` to the adapter. We’ll also include
    a custom setter that calls `notifyDataSetChanged()` if the property gets updated;
    this tells the recycler view that the data has changed so it can redraw itself.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任务应用程序，我们希望回收视图显示任务记录的列表，因此我们将向适配器添加一个名为`data`的`List<Task>`属性。我们还将包括一个自定义的setter，如果属性更新，则调用`notifyDataSetChanged()`；这会告诉回收视图数据已更改，因此它可以重新绘制自己。
- en: 'Here’s the updated `TaskItemAdapter` code; update *TaskItemAdapter.kt* to include
    this change (in bold):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的`TaskItemAdapter`代码；请更新*TaskItemAdapter.kt*以包括此更改（加粗部分）。
- en: '![image](Images/f0628-02.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0628-02.png)'
- en: Override the getItemCount() method
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重写`getItemCount()`方法
- en: Next, we need to override the adapter’s `**getItemCount()**` method. This tells
    the adapter how many data items there are so that the recycler view knows how
    many to display.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要重写适配器的`**getItemCount()**`方法。这告诉适配器有多少数据项，以便回收视图知道要显示多少个。
- en: In the `TaskItemAdapter` code, we’re using a `List<Task>` property named `data`
    for the recycler view’s data items, so we can use `data.size` to say how many
    items there are.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TaskItemAdapter`代码中，我们使用名为`data`的`List<Task>`属性作为回收视图的数据项，因此我们可以使用`data.size`来指定有多少项目。
- en: 'Here’s the `getItemCount()` method (in bold), which you can add to *TaskItemAdapter.kt*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `getItemCount()` 方法（用粗体标出），您可以将其添加到 *TaskItemAdapter.kt* 中：
- en: '![image](Images/f0628-04.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0628-04.png)'
- en: Now that we’ve specified the type of data the adapter works with, we’ll use
    it to populate the layout’s text view. We’ll do this by defining the adapter’s
    **view holder**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经指定了适配器处理的数据类型，我们将使用它来填充布局的文本视图。我们将通过定义适配器的 **视图持有者** 来实现这一点。
- en: Define the adapter’s view holder
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义适配器的视图持有者
- en: The **view holder** contains information about how a view in the item’s layout
    should be displayed, and its position in the recycler view. You can think of it
    as a holder for the root view of the item’s layout—the layout that specifies how
    the recycler view should display each item.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图持有者**包含了有关项目布局中视图应如何显示以及其在回收视图中的位置的信息。您可以将其视为项目布局根视图的持有者——指定回收视图应如何显示每个项目的布局。'
- en: In the Tasks app, we want the recycler view to use the layout file *task_item.xml*
    to display task records. This layout’s root view is a `TextView`, so we need to
    define a view holder that works with text views.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务应用程序中，我们希望回收视图使用布局文件 *task_item.xml* 来显示任务记录。此布局的根视图是 `TextView`，因此我们需要定义一个与文本视图一起工作的视图持有者。
- en: '![image](Images/f0629-02.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0629-02.png)'
- en: You define a view holder by adding an inner class to the adapter file that extends
    `RecyclerView.ViewHolder`. It includes a constructor that specifies the type of
    the layout’s root view (in this case `TextView`). The adapter’s class definition
    also needs to be updated to specify the adapter’s class name.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向适配器文件添加一个扩展 `RecyclerView.ViewHolder` 的内部类来定义视图持有者。它包括一个指定布局根视图类型（在本例中为 `TextView`）的构造函数。适配器的类定义也需要更新以指定适配器的类名。
- en: 'Here’s the updated code for `TaskItemAdapter`; update *TaskItemAdapter.kt*
    so that it includes the changes shown here (in bold):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更新后的 `TaskItemAdapter` 代码；请更新 *TaskItemAdapter.kt* 以包含以下更改（用粗体标出）：
- en: '![image](Images/f0629-03.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0629-03.png)'
- en: Now that we’ve defined a view holder, we need to specify which layout it uses
    by overriding the adapter’s `onCreateViewHolder()` method.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了一个视图持有者，我们需要通过重写适配器的 `onCreateViewHolder()` 方法来指定它使用的布局。
- en: Override the onCreateViewHolder() method
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖 onCreateViewHolder() 方法
- en: The adapter’s `**onCreateViewHolder()**` method gets called each time the recycler
    view requires a new view holder. The recycler view calls the method repeatedly
    when it’s first constructed to build the set of view holders that will be displayed
    on the screen.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每当回收视图需要新的视图持有者时，适配器的 `**onCreateViewHolder()**` 方法会被调用。当首次构建时，回收视图会重复调用该方法以构建将显示在屏幕上的视图持有者集合。
- en: 'The `onCreateViewHolder()` method needs to do two things: inflate the layout
    that’s used for each item (in this case *task_item.xml*), and return a view holder.
    Here’s the code to do this for `TaskItemAdapter`, so update the code for *TaskItemAdapter.kt*
    to include the changes shown here (in bold):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreateViewHolder()` 方法需要执行两件事：膨胀用于每个项目的布局（在本例中为 *task_item.xml*），并返回一个视图持有者。以下是完成此操作的代码示例，因此请更新
    *TaskItemAdapter.kt* 以包含以下更改（用粗体标出）：'
- en: '![image](Images/f0630-02.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0630-02.png)'
- en: 'As you can see, we’ve put the code to inflate *task_item.xml* in a new `inflateFrom()`
    method in `TaskItemViewHolder`, which the adapter’s `onCreateViewHolder()` method
    calls using:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们将代码放在 `TaskItemViewHolder` 中的新 `inflateFrom()` 方法中来膨胀 *task_item.xml*，适配器的
    `onCreateViewHolder()` 方法使用以下方式调用它：
- en: '[PRE0]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This approach passes responsibility for the view holder’s layout to the view
    holder instead of inflating the layout in the main body of the adapter code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将布局的视图持有者布局的责任传递给视图持有者，而不是在适配器代码的主体中膨胀布局。
- en: Add data to the layout’s view
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向布局的视图添加数据
- en: 'The final detail that we need to add to the adapter is how to display the task
    records in the view holder’s layout. We’ll do this by overriding the adapter’s
    `**onBindViewHolder()**` method, which gets called whenever the recycler view
    needs to display data. It takes two parameters: the view holder the data needs
    to be bound to, and the data’s position in the data set.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加到适配器的最后一个细节是如何在视图持有者的布局中显示任务记录。我们将通过重写适配器的 `**onBindViewHolder()**` 方法来实现这一点，每当回收视图需要显示数据时就会调用该方法。它接受两个参数：需要绑定数据的视图持有者和数据在数据集中的位置。
- en: '![image](Images/f0631-02.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0631-02.png)'
- en: 'In the Tasks app, we want to take the `Task` object at a certain position in
    the adapter’s `data` property (a `List<Task>`), and display its `taskName` in
    the view holder’s layout. Here’s the code to do this for `TaskItemAdapter`, so
    update the code for *TaskItemAdapter.kt* to include the changes shown here (in
    bold):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Tasks应用中，我们希望获取适配器的 `data` 属性（一个 `List<Task>`）中特定位置的 `Task` 对象，并在视图持有者的布局中显示其
    `taskName`。以下是为 `TaskItemAdapter` 编写此功能的代码，因此请更新 *TaskItemAdapter.kt* 的代码以包括以下显示的更改：
- en: '![image](Images/f0631-03.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0631-03.png)'
- en: As you can see, we’re setting the layout’s text view text in a new `bind()`
    method, which we’ve added to `TaskItemViewHolder`. The adapter’s `onBindViewHolder()`
    method then calls this each time it runs. We use this approach because it makes
    the view holder responsible for populating its layout, instead of the adapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们在一个新的 `bind()` 方法中设置布局的文本视图文本，我们已将其添加到 `TaskItemViewHolder` 中。每次适配器的
    `onBindViewHolder()` 方法运行时，它都会调用此方法。我们之所以采用这种方法，是因为它使视图持有者负责填充其布局，而不是适配器。
- en: That’s all the code that we need to write for `TaskItemAdapter` and its `TaskItemViewHolder`
    inner class. Let’s look at the full code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要为 `TaskItemAdapter` 及其 `TaskItemViewHolder` 内部类编写的所有代码。让我们查看完整的代码。
- en: The full code for TaskItemAdapter.kt
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TaskItemAdapter.kt 的完整代码
- en: 'Here’s the full code for `TaskItemAdapter`; make sure that the code for *TaskItemAdapter.kt*
    includes everything shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `TaskItemAdapter` 的完整代码；确保 *TaskItemAdapter.kt* 的代码包括这里显示的所有内容：
- en: '![image](Images/f0632-02.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0632-02.png)'
- en: The adapter code is complete
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器代码已完成
- en: 'We’ve now finished writing all of the code that’s needed for `TaskItemAdapter`.
    It does the following four things:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了所有需要的 `TaskItemAdapter` 代码编写。它执行以下四项任务：
- en: '**Specifies that it works with Task data**'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指定其与Task数据的工作方式**'
- en: We did this by defining a `List<Task>` property named `data`.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过定义名为 `data` 的 `List<Task>` 属性来实现这一点。
- en: '**Uses a view holder named TaskItemViewHolder**'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用名为 TaskItemViewHolder 的视图持有者**'
- en: We added `TaskItemViewHolder` to `TaskItemAdapter` as an inner class.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将 `TaskItemViewHolder` 添加到 `TaskItemAdapter` 中作为内部类。
- en: '**Inflates each item’s layout**'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为每个项目填充布局**'
- en: It does this when its `onCreateViewHolder()` method gets called.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它在其 `onCreateViewHolder()` 方法被调用时执行此操作。
- en: '**Displays each item’s data in the layout**'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在布局中显示每个项目的数据**'
- en: It does this using its `onBindViewHolder()` method.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它通过其 `onBindViewHolder()` 方法来执行此操作。
- en: 'As we said earlier, the adapter acts as a bridge between a data source and
    a recycler view. The data source, adapter, and recycler view fit together like
    this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，适配器充当数据源和RecyclerView之间的桥梁。数据源、适配器和RecyclerView之间的关系如下所示：
- en: '![image](Images/f0633-02.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0633-02.png)'
- en: Now that we’ve finished writing the adapter code, let’s move on to the recycler
    view part of this model.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已完成适配器代码的编写，让我们继续进行此模型的**RecyclerView**部分。
- en: We need to display the recycler view
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们需要显示RecyclerView
- en: '![image](Images/f0634-01.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0634-01.png)'
- en: The next thing that we need to do is display a recycler view in `TasksFragment`
    (the Tasks app’s main screen), and get it to use the adapter that we’ve just created.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要在 `TasksFragment`（Tasks应用的主屏幕）中显示一个RecyclerView，并使其使用我们刚刚创建的适配器。
- en: 'Here’s a reminder of what the recycler view needs to look like:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是RecyclerView应该如何显示的一个提醒：
- en: '![image](Images/f0634-02.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0634-02.png)'
- en: How to add a recycler view to a layout
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何向布局添加RecyclerView
- en: 'You display a recycler view by adding an `<androidx.recyclerview.widget.RecyclerView>`
    element to a fragment’s layout file. The code looks like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向片段的布局文件添加 `<androidx.recyclerview.widget.RecyclerView>` 元素，您可以显示一个RecyclerView。代码如下所示：
- en: '![image](Images/f0634-03.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0634-03.png)'
- en: 'The line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下面这行：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: specifies that the recycler view uses a layout manager, which determines how
    the recycler view positions its items. Here, we’re using a linear layout manager,
    which means that the recycler view will display its items in a vertical list with
    full-length rows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 指定RecyclerView使用的布局管理器，它确定RecyclerView如何定位其项目。在这里，我们使用线性布局管理器，这意味着RecyclerView将以垂直列表形式显示其项目，每行都是全长的。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll find out more about layout managers later in the chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章后面了解更多有关布局管理器的信息。
- en: That’s all the code you need to know to add a recycler view to `TasksFragment`’s
    layout, so let’s see what the code looks like.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要了解的有关向 `TasksFragment` 布局添加RecyclerView的所有代码。让我们看看代码是什么样子的。
- en: The full code for fragment_tasks.xml
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fragment_tasks.xml 的完整代码
- en: 'Below is the full code for *fragment_tasks.xml* (`TasksFragment`’s layout).
    As you can see, we’ve replaced the text view with a recycler view, so update the
    code for *fragment_tasks.xml* to include these changes (in bold):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是*fragment_tasks.xml*（`TasksFragment`的布局）的完整代码。正如您所看到的，我们已经用回收视图替换了文本视图，因此请更新*fragment_tasks.xml*的代码以包含这些更改（**加粗部分**）：
- en: '![image](Images/f0635-02.png)![image](Images/f0636-02.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0635-02.png)![image](Images/f0636-02.png)'
- en: That’s all the code we need to write to add a recycler view to `TasksFragment`’s
    layout. Next, we’ll tell the recycler view to use the adapter we created.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要编写的所有代码，以便将回收视图添加到`TasksFragment`的布局中。接下来，我们将告诉回收视图使用我们创建的适配器。
- en: Tell the recycler view to use the adapter
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 告诉回收视图使用适配器。
- en: You make a recycler view use an adapter by creating an instance of the adapter,
    and attaching it to the recycler view. You do this in the fragment’s Kotlin code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建适配器实例，并将其附加到回收视图，使回收视图使用适配器。这是在片段的Kotlin代码中完成的。
- en: 'In our case, we want to make the recycler view use `TaskItemAdapter`. This
    is done by adding the following code (in bold) to `TasksFragment`’s `onCreateView()`
    method:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们希望使回收视图使用`TaskItemAdapter`。这通过向`TasksFragment`的`onCreateView()`方法添加以下代码（**加粗部分**）完成：
- en: '![image](Images/f0636-03.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0636-03.png)'
- en: We’ll add this code to `TasksFragment` on the next page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一页将此代码添加到`TasksFragment`中。
- en: The updated code for TasksFragment.kt
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新后的TasksFragment.kt代码
- en: 'Here’s the code for `TasksFragment`; update *TasksFragment.kt* to include all
    the changes shown (in bold):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`TasksFragment`的代码；更新*TasksFragment.kt*以包含所有显示的更改（**加粗部分**）：
- en: '![image](Images/f0637-02.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0637-02.png)'
- en: So what’s next?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We’ve added a recycler view to TasksFragment’s layout
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们已将回收视图添加到TasksFragment的布局中
- en: 'We’ve now written all of the code that we need to display a recycler view in
    `TasksFragment`’s layout, and told it to use `TaskItemAdapter` as its adapter.
    But there’s still one more thing left for us to do: we need to connect the adapter
    to a data source.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经编写了所有必须的代码，用于在`TasksFragment`的布局中显示回收视图，并告诉它使用`TaskItemAdapter`作为其适配器。但是还有一件事情我们需要做：连接适配器到数据源。
- en: As you learned earlier, the adapter uses data from a data source (such as a
    database), and binds it to views in the item’s layout. The recycler view then
    displays the items on the device screen.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您之前学到的那样，适配器使用来自数据源（例如数据库）的数据，并将其绑定到项目布局中的视图上。然后，回收视图将这些项目显示在设备屏幕上。
- en: 'The data source, adapter, and recycler view fit together like this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源、适配器和回收视图的关系如下所示：
- en: '![image](Images/f0638-02.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0638-02.png)'
- en: So in order to display data in the Tasks app’s recycler view, we need to tell
    `TaskItemAdapter` what task data to use.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在Tasks应用程序的回收视图中显示数据，我们需要告诉TaskItemAdapter使用哪些任务数据。
- en: We’ll make TasksFragment add task data to TaskItemAdapter
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将让TasksFragment向TaskItemAdapter添加任务数据
- en: 'We’ll tell `TaskItemAdapter` what task data to use by getting `TasksFragment`
    to update its `data` property with a `List<Task>`. `TasksFragment` will get this
    list from `TasksViewModel`’s `tasks` property:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将告诉`TaskItemAdapter`使用哪些任务数据，方法是让`TasksFragment`更新其`data`属性，其中包含`List<Task>`。`TasksFragment`将从`TasksViewModel`的`tasks`属性中获取此列表：
- en: '![image](Images/f0638-03.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0638-03.png)'
- en: To do this, we first need to give `TasksFragment` access to `TasksViewModel`’s
    `tasks` property.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们首先需要让`TasksFragment`能够访问`TasksViewModel`的`tasks`属性。
- en: Update the TasksViewModel.kt code
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新TasksViewModel.kt代码
- en: As you may recall, `TasksViewModel`’s `tasks` property is currently marked as
    private. We need to remove this modifier in order for `TasksFragment` to get the
    property’s value.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，`TasksViewModel`的`tasks`属性目前标记为私有。我们需要移除这个修饰符，以便`TasksFragment`可以获取属性的值。
- en: 'We’ll also remove all the code we added in the previous chapter to transform
    the task data into a formatted `String`: this code is no longer needed now that
    we’re using a recycler view to display a `List<Task>`.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将删除我们在上一章中添加的代码，以将任务数据转换为格式化的`String`：现在我们使用回收视图来显示`List<Task>`，因此不再需要此代码。
- en: 'Here’s the updated `TasksViewModel` code; update *TasksViewModel.kt* to include
    these changes:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的`TasksViewModel`代码；请更新*TasksViewModel.kt*以包含这些更改：
- en: '![image](Images/f0639-02.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0639-02.png)'
- en: Now that `TasksFragment` has access to the `tasks` property, let’s make it pass
    the property’s `List<Task>` to `TaskItemAdapter`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`TasksFragment`可以访问`tasks`属性了，让我们让它将属性的`List<Task>`传递给`TaskItemAdapter`。
- en: TasksFragment needs to update TaskItemAdapter’s data property
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TasksFragment需要更新TaskItemAdapter的数据属性
- en: 'As you know, `TasksViewModel`’s `tasks` property holds a live data list of
    tasks, which it gets from the database using this code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，`TasksViewModel` 的 `tasks` 属性保存着一个任务列表的 LiveData，它通过以下代码从数据库获取：
- en: '![image](Images/f0640-02.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0640-02.png)'
- en: As this property uses live data, we can make `TasksFragment` observe it so that
    each time its value changes, the fragment is notified. `TasksFragment` will then
    be able to assign the latest version of the list to the adapter’s `data` property,
    making sure that the data displayed in the recycler view is always up-to-date.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此属性使用 LiveData，我们可以使 `TasksFragment` 观察它，以便每当其值更改时，片段将收到通知。然后，`TasksFragment`
    将能够将列表的最新版本分配给适配器的 `data` 属性，确保 RecyclerView 中显示的数据始终是最新的。
- en: '![image](Images/f0640-03.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0640-03.png)'
- en: 'You’re already familiar with the code to observe live data properties, so here’s
    the code we need to add to `TasksFragment` (in bold):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经熟悉观察 LiveData 属性的代码，所以这里是我们需要添加到 `TasksFragment` 的代码（加粗部分）：
- en: '![image](Images/f0640-04.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0640-04.png)'
- en: Let’s update *TasksFragment.kt* to include this change.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 *TasksFragment.kt* 以包括这个变更。
- en: The full code for TasksFragment.kt
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TasksFragment.kt 的完整代码
- en: Here’s the updated code for `TasksFragment`; update *TasksFragment.kt* to include
    all the changes shown (in bold)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `TasksFragment` 的更新代码；请更新 *TasksFragment.kt* 以包含所示的所有更改（加粗部分）
- en: '![image](Images/f0641-02.png)![image](Images/f0642-02.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0641-02.png)![image](Images/f0642-02.png)'
- en: We’ve finished writing all the recycler view code
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们已经完成了所有 RecyclerView 代码的编写
- en: 'It took us a while, but we’ve now finished writing all the code that’s needed
    to display a list of task names in a recycler view. We did this by:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 花了一些时间，但我们现在已经完成了所有需要在 RecyclerView 中显示任务名称列表的代码。我们通过以下方式实现了这一点：
- en: '**Creating an adapter named TaskItemAdapter**'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建名为 TaskItemAdapter 的适配器**'
- en: The adapter acts as a bridge between the recycler view and its data source.
    In the Tasks app, the data source is a Room database containing task records.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适配器充当 RecyclerView 和其数据源之间的桥梁。在 Tasks 应用程序中，数据源是包含任务记录的 Room 数据库。
- en: '**Attaching TaskItemAdapter to a recycler view**'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将 TaskItemAdapter 附加到 RecyclerView**'
- en: We added a recycler view to `TasksFragment`’s layout, and told it to use `TaskItemAdapter`
    in its Kotlin code.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在 `TasksFragment` 的布局中添加了一个 RecyclerView，并在其 Kotlin 代码中告知它使用 `TaskItemAdapter`。
- en: '**Passing an up-to-date List<Task> to TaskItemAdapter**'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**传递最新的 List<Task> 到 TaskItemAdapter**'
- en: We did this by making `TasksFragment` set `TaskItemAdapter`’s data property
    each time `TasksViewModel`’s live data list of tasks gets updated.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过让 `TasksFragment` 每次更新 `TasksViewModel` 的任务 LiveData 列表时，设置 `TaskItemAdapter`
    的 data 属性来完成了这一点。
- en: Before we take the app for a test drive and see what the recycler view looks
    like, let’s go through what happens when the code runs.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们测试应用程序并查看 RecyclerView 的外观之前，让我们来看看代码运行时会发生什么。
- en: What happens when the code runs
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码运行时会发生什么
- en: 'The following things happen when the app runs:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序运行时会发生以下情况：
- en: '**When the app is launched, MainActivity displays TasksFragment.**'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当应用程序启动时，MainActivity 显示 TasksFragment。**'
- en: '`TasksFragment` uses `TasksViewModel` as its view model.'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`TasksFragment` 使用 `TasksViewModel` 作为其视图模型。'
- en: '![image](Images/f0643-02.png)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0643-02.png)'
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TasksFragment 创建了一个 TaskItemAdapter 对象，并将其分配给 RecyclerView 作为其适配器。**'
- en: '![image](Images/f0643-03.png)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0643-03.png)'
- en: '**TasksFragment observes TasksViewModel’s tasks property.**'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TasksFragment 观察 TasksViewModel 的 tasks 属性。**'
- en: This property is a `LiveData<List<Task>>`, which holds an up-to-date list of
    records from the database.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此属性是 `LiveData<List<Task>>`，它保存来自数据库的最新记录列表。
- en: '![image](Images/f0643-04.png)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0643-04.png)'
- en: '**TasksFragment sets the TaskItemAdapter’s data property to the List<Task>.**'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TasksFragment 将 TaskItemAdapter 的 data 属性设置为 List<Task>。**'
- en: '![image](Images/f0643-05.png)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0643-05.png)'
- en: '**TaskItemAdapter’s onCreateViewHolder() method is called for each item that
    needs to be displayed in the recycler view.**'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TaskItemAdapter 的 onCreateViewHolder() 方法会为需要在 RecyclerView 中显示的每个项调用。**'
- en: This creates a `TaskItemViewHolder` for each item. A layout (defined by *task_item.xml*)
    is inflated for each view holder.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这为每个项创建了一个 `TaskItemViewHolder`。每个视图持有者的布局由 *task_item.xml* 定义。
- en: '![image](Images/f0644-02.png)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0644-02.png)'
- en: '**TaskItemAdapter’s onBindViewHolder() is called for each TaskItemViewHolder.**'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TaskItemAdapter 的 onBindViewHolder() 方法会为每个 TaskItemViewHolder 调用。**'
- en: This binds data to the text view in each view holder’s layout.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将数据绑定到每个视图持有者布局中的文本视图。
- en: '![image](Images/f0644-03.png)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0644-03.png)'
- en: '**Each time TasksViewModel’s tasks property gets updated, TasksFragment passes
    an updated List<Task> to the TaskItemAdapter.**'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**每当 `TasksViewModel` 的 `tasks` 属性更新时，`TasksFragment` 将更新后的 `List<Task>` 传递给
    `TaskItemAdapter`。**'
- en: Steps 5 to 6 are repeated so the recycler view stays up-to-date.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 步骤 5 到 6 被重复执行，以保持可循环视图的更新。
- en: '![image](Images/f0644-04.png)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0644-04.png)'
- en: Let’s take the app for a test drive.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行应用程序的测试驾驶。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![Images](Images/car.png) 测试驾驶'
- en: When we run the app, `TasksFragment` displays the name of each task in a recycler
    view.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用时，`TasksFragment` 在可循环视图中显示每个任务的名称。
- en: When we enter new tasks, these get added to the recycler view’s list. The app
    works as planned.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入新任务时，这些任务将添加到可循环视图的列表中。应用程序按计划运行。
- en: '![image](Images/f0645-02.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0645-02.png)'
- en: You’ve now learned how to create a basic recycler view. Before we tweak it to
    display the task records in a different way, try the following exercise.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经学会了如何创建一个基本的可循环视图。在我们调整它以不同方式显示任务记录之前，请尝试以下练习。
- en: Adapter Magnets
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器磁铁
- en: '![image](Images/common02.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common02.png)'
- en: 'The Bits and Pizzas app includes a `Pizza` data class that looks like this:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Bits and Pizzas 应用程序包括一个 `Pizza` 数据类，如下所示：
- en: '[PRE2]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The app needs to include a recycler view that displays the `pizzaName` for
    each `Pizza` item in the following layout (named *pizza_item.xml*):'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序需要包含一个可循环视图，以在以下布局（名为 *pizza_item.xml*）中显示每个 `Pizza` 项的 `pizzaName`：
- en: '[PRE3]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See if you can complete the recycler view’s adapter code (below).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你是否能完成可循环视图的适配器代码（如下）。
- en: '[PRE4]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![image](Images/f0647-01.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0647-01.png)'
- en: Adapter Magnets Solution
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器磁铁解决方案
- en: '![image](Images/common02.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common02.png)'
- en: 'The Bits and Pizzas app includes a `Pizza` data class that looks like this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Bits and Pizzas 应用程序包括一个 `Pizza` 数据类，如下所示：
- en: '[PRE5]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The app needs to include a recycler view that displays the `pizzaName` and
    `PizzaDescription` properties for each `Pizza` item in the following linear layout
    (named *pizza_item.xml*):'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序需要包含一个可循环视图，以在以下线性布局（名为 *pizza_item.xml*）中显示每个 `Pizza` 项的 `pizzaName` 和
    `PizzaDescription` 属性：
- en: '[PRE6]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See if you can complete the recycler view’s adapter code (below).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你是否能完成可循环视图的适配器代码（如下）。
- en: '![image](Images/f0648-01.png)![image](Images/f0649-01.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0648-01.png)![image](Images/f0649-01.png)'
- en: Recycler views are very flexible
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可循环视图非常灵活
- en: '![image](Images/f0650-01.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0650-01.png)'
- en: So far in this chapter, you’ve learned how to build a basic recycler view that
    displays a list of task names. You did this by creating a layout that’s used by
    each item in the list, defining an adapter to populate it with data, and adding
    a recycler view to `TaskFragment`’s layout.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，您已经学习了如何构建一个显示任务名称列表的基本可循环视图。您通过创建一个布局来为列表中的每个项目使用，并定义一个适配器来填充数据，并将可循环视图添加到
    `TaskFragment` 的布局中完成了这一点。
- en: '![image](Images/f0650-02.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0650-02.png)'
- en: '**While recycler views can seem overly complicated, they’re extremely flexible.**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**虽然可循环视图可能看起来过于复杂，但它们非常灵活。**'
- en: 'In this app, we created a recycler view to display a simple list of task names,
    but this was just to get you started. You can also use recycler views to do other
    things, such as:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，我们创建了一个可循环视图来显示简单的任务名称列表，但这只是为了让您开始。您还可以使用可循环视图来做其他事情，比如：
- en: '![Images](Images/star.png) **Displaying a list of images by adding an image
    view to the item’s layout**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **通过向项的布局添加图像视图来显示图像列表**'
- en: '![Images](Images/star.png) **Using a different layout manager to display items
    in a grid instead of a vertical list**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **使用不同的布局管理器来以网格形式而不是垂直列表显示项目**'
- en: '![Images](Images/star.png) **Making it respond to clicks so that you can use
    it for navigation**'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/star.png) **使其响应点击，以便您可以用它进行导航**'
- en: To show you how flexible recycler views can be, we’re going to change up the
    recycler view we just created by getting it to show more information about each
    task.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向您展示可循环视图可以有多么灵活，我们将改变刚刚创建的可循环视图，使其显示关于每个任务的更多信息。
- en: Let’s take a look at what the new version of the recycler view will look like.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看新版本的可循环视图将会是什么样子。
- en: Recycler view 2.0
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可循环视图 2.0
- en: We’re going to update the recycler view so that it shows the name of each task
    in a text view, and whether each task has been completed with a checkbox. We’ll
    display each task record on a single card, which will look like it’s slightly
    elevated. The cards will be arranged in a grid.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新可循环视图，以便在文本视图中显示每个任务的名称，并在复选框中显示每个任务是否已完成。我们将在网格中显示每个任务记录，看起来像是稍微抬高的卡片。
- en: 'Here’s what the new version of the recycler view will look like:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新版本的RecyclerView的外观：
- en: '![image](Images/f0651-02.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0651-02.png)'
- en: We’re going to create this version of the recycler view by changing *task_item.xml*
    (the layout used by the recycler view’s items) so that it uses a **card view**.
    This is a type of frame layout that has rounded corners and shadows to make it
    look as though it’s elevated above its background.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过更改*task_item.xml*（RecyclerView项目使用的布局）来创建此版本的RecyclerView，以便使用**卡片视图**。这是一种带有圆角和阴影的框架布局，使其看起来好像悬浮在其背景之上。
- en: '![image](Images/f0651-03.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0651-03.png)'
- en: Add a card view dependency to the **app** build.gradle file
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将卡片视图依赖项添加到**app** build.gradle文件
- en: 'To use a card view, we first need to add a dependency to its library to the
    app’s *build.gradle* file. Open the file *Tasks/app/build.gradle*, and add the
    following line (in bold) to the `dependencies` section:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用卡片视图，我们首先需要向应用程序的*build.gradle*文件中的`dependencies`部分添加其库的依赖项。打开文件*Tasks/app/build.gradle*，并添加以下行（用粗体标出）：
- en: '![image](Images/f0651-04.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0651-04.png)'
- en: Make sure that you sync this change with the rest of the app.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将此更改与应用程序的其余部分同步。
- en: How to create a card view
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建卡片视图
- en: We’re going to use a card view in *task_item.xml* that includes a text view
    and a checkbox.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*task_item.xml*中使用一个包含文本视图和复选框的卡片视图。
- en: 'You create a card view by adding an `<androidx.cardview.widget.CardView>` element
    to your layout code. The code for a typical card view looks like this:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在布局代码中添加`<androidx.cardview.widget.CardView>`元素来创建卡片视图。典型卡片视图的代码如下所示：
- en: '![image](Images/f0652-02.png)![image](Images/f0652-03.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0652-02.png)![image](Images/f0652-03.png)'
- en: 'As you can see, the above code includes an extra namespace of:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，上述代码包括额外的命名空间：
- en: '[PRE7]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The full code for task_item.xml
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*task_item.xml*的完整代码'
- en: 'Here’s the updated code for *task_item.xml*; update the code for this file
    so that it includes the changes below (in bold):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*task_item.xml*的更新代码；更新此文件的代码，使其包含以下更改（用粗体标出）：
- en: '![image](Images/f0653-02.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0653-02.png)'
- en: Next, we need to update the adapter’s view holder so that it works with the
    new layout, and populates the card’s views.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新适配器的视图持有者，以使其适用于新的布局，并填充卡片的视图。
- en: The adapter’s view holder needs to work with the new layout code
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器的视图持有者需要与新的布局代码配合工作。
- en: When we defined `TaskItemAdapter` (the recycler view’s adapter), we included
    a `TaskItemViewHolder` inner class. We used it to inflate the layout (a text view)
    associated with each item in the recycler view, and populate it with the task’s
    name.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义`TaskItemAdapter`（RecyclerView的适配器）时，我们包含了一个`TaskItemViewHolder`内部类。我们用它来填充与RecyclerView中每个条目相关联的布局（一个文本视图），并将其填充为任务的名称。
- en: 'Here’s a reminder of the code we used for the original inner class:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们用于原始内部类的代码的提醒：
- en: '![image](Images/f0654-02.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0654-02.png)'
- en: 'Now that we’ve changed *task_item.xml*, we need to update `TaskItemViewHolder`
    so that it works with the new layout. To do this we need to make three changes:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更改了*task_item.xml*，我们需要更新`TaskItemViewHolder`，以使其适用于新的布局。为此，我们需要进行三项更改：
- en: '**Update the view holder’s constructor so that it uses a CardView instead of
    a TextView.**'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新视图持有者的构造函数，以便使用`CardView`而不是`TextView`。**'
- en: '**Change the inflateFrom() method so that it inflates each item’s layout as
    a CardView.**'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更改`inflateFrom()`方法，以便将每个条目的布局作为CardView进行填充。**'
- en: '**Update the bind() method so that it populates the layout’s text view and
    checkbox with the item’s taskName and taskDone property values.**'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新`bind()`方法，以便用条目的`taskName`和`taskDone`属性值填充布局的文本视图和复选框。**'
- en: You’re already familiar with the code that’s needed to make these changes, so
    we’ll show you the updated code for `TaskItemAdapter`—and its `TaskItemViewHolder`
    inner class—on the next page.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经熟悉了需要进行这些更改的代码，因此我们将在下一页上为您展示更新后的`TaskItemAdapter`和其`TaskItemViewHolder`内部类的代码。
- en: The full code for TaskItemAdapter.kt
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`TaskItemAdapter.kt`的完整代码'
- en: 'Here’s the updated `TaskItemAdapter` code that works with the new layout code;
    update the code for *TaskItemAdapter.kt* so that it includes the changes below
    (in bold):'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的`TaskItemAdapter`代码，适用于新的布局代码；更新*TaskItemAdapter.kt*的代码，使其包含以下更改（用粗体标出）：
- en: '![image](Images/f0655-02.png)![image](Images/f0656-02.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0655-02.png)![image](Images/f0656-02.png)'
- en: What the recycler view looks like so far
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 到目前为止，RecyclerView的外观如下所示：
- en: 'If we were to run the app after updating the code for *task_item.xml* and *TaskItemAdapter.kt*,
    we’d see a recycler view that displays tasks in a vertical list of card views
    like this:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在更新了 *task_item.xml* 和 *TaskItemAdapter.kt* 的代码后运行应用程序，我们会看到 RecyclerView
    以垂直列表的卡片视图形式显示任务：
- en: '![image](Images/f0657-02.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0657-02.png)'
- en: 'The recycler view arranges the cards in this way because we specified in *fragment_tasks.xml*
    that it must use a linear layout manager like this:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: RecyclerView 之所以以这种方式排列卡片，是因为我们在 *fragment_tasks.xml* 中指定它必须使用类似这样的线性布局管理器：
- en: '![image](Images/f0657-03.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0657-03.png)'
- en: By default, this layout manager arranges items in a vertical list with full-length
    rows. You can, however, include extra options—or use a different type of layout
    manager—to change the way in which items are displayed.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个布局管理器以垂直列表形式排列项目，每行都是整行。但是，你可以选择额外的选项，或者使用不同类型的布局管理器来改变项目显示的方式。
- en: Let’s take a look at some of the possible options.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些可能的选项。
- en: The layout manager gallery
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局管理器库
- en: Here are some of the other ways in which you might want to arrange items in
    a recycler view, and how to create each one.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可能希望在 RecyclerView 中安排项目的其他方式，以及如何创建每种方式。
- en: Display items in a horizontal row
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在水平行中显示项目
- en: 'A linear layout manager displays items in a vertical list by default. You can,
    however, display items in a horizontal row instead by changing the orientation
    to horizontal:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，线性布局管理器以垂直列表形式显示项目。但是，您可以将方向更改为水平，以便改为水平行显示项目：
- en: '![image](Images/f0658-02.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0658-02.png)'
- en: '[PRE8]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Use GridLayoutManager to display items in a grid
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GridLayoutManager 在网格中显示项目
- en: 'If you want to arrange items in a grid, try using a `GridLayoutManager`. Use
    `app:spanCount` to specify how many columns the grid should have:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望以网格形式排列项目，请尝试使用 `GridLayoutManager`。使用 `app:spanCount` 来指定网格应该有多少列：
- en: '[PRE9]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![image](Images/f0658-03.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0658-03.png)'
- en: Arrange items in a staggered grid
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在交错网格中排列项目
- en: 'If your items have unequal sizes, you can use a `StaggeredGridLayoutManager`
    instead like this:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目大小不均，可以使用 `StaggeredGridLayoutManager`，如下所示：
- en: '[PRE10]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![image](Images/f0658-04.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0658-04.png)'
- en: Let’s apply one of these styles to the Tasks app’s recycler view, and see what
    happens when the app runs.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其中一种样式应用到 Tasks 应用程序的 RecyclerView 中，并查看应用程序运行时会发生什么。
- en: Update fragment_tasks.xml to arrange items in a grid
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 fragment_tasks.xml 以在网格中排列项目
- en: 'We’re going to update the recycler view so that it arranges its items in a
    grid with two columns. The updated layout code for this change is shown below;
    update *fragment_tasks.xml* to include these changes (in bold):'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新 RecyclerView，使其以两列的网格形式排列项目。此更改的更新布局代码如下所示；请更新 *fragment_tasks.xml* 以包含这些更改（用粗体标记）：
- en: '![image](Images/f0659-02.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0659-02.png)'
- en: What happens when the code runs
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码运行时会发生什么
- en: 'The following things happen when the app runs:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序运行时会发生以下事情：
- en: '**TasksFragment creates a TaskItemAdapter object, and assigns it to the recycler
    view as its adapter.**'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TasksFragment 创建了一个 TaskItemAdapter 对象，并将其分配给 RecyclerView 作为其适配器。**'
- en: '![image](Images/f0660-02.png)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0660-02.png)'
- en: '**TasksFragment sets the TaskItemAdapter’s data property to a List<Task>.**'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TasksFragment 将 TaskItemAdapter 的数据属性设置为 List<Task>。**'
- en: '`TasksFragment` gets this `List<Task>` by observing `TasksViewModel`’s `tasks`
    property.'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`TasksFragment` 通过观察 `TasksViewModel` 的 `tasks` 属性来获取这个 `List<Task>`。'
- en: '![image](Images/f0660-03.png)'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0660-03.png)'
- en: '**TaskItemAdapter’s onCreateViewHolder() method is called for each item that
    needs to be displayed in the recycler view.**'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TaskItemAdapter 的 onCreateViewHolder() 方法将为需要在 RecyclerView 中显示的每个项目调用。**'
- en: This creates a `TaskItemViewHolder` for each item. A layout (defined by *task_item.xml*)
    is inflated for each view holder.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这为每个项目创建一个 `TaskItemViewHolder`。每个视图持有者都会膨胀为一个布局（由 *task_item.xml* 定义）。
- en: '![image](Images/f0660-04.png)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0660-04.png)'
- en: '**TaskItemAdapter’s onBindViewHolder() is called for each TaskItemViewHolder.**'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TaskItemAdapter 的 onBindViewHolder() 方法将为每个 TaskItemViewHolder 调用。**'
- en: This binds data to the views in each view holder’s layout.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将数据绑定到每个视图持有者布局中的视图。
- en: '![image](Images/f0661-02.png)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0661-02.png)'
- en: '**The recycler view uses its layout manager to arrange its items.**'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**RecyclerView 使用其布局管理器来排列其项目。**'
- en: As the recycler view uses a `GridLayoutManager` with a `spanCount` of 2, it
    arranges items in a grid with two columns.
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为 RecyclerView 使用了 `GridLayoutManager`，并且 `spanCount` 设置为 2，它会以两列的网格形式排列项目。
- en: '![image](Images/f0661-03.png)'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0661-03.png)'
- en: '**Each time TasksViewModel’s tasks property gets updated, TasksFragment passes
    an updated List<Task> to the TaskItemAdapter.**'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**每当 `TasksViewModel` 的 `tasks` 属性更新时，`TasksFragment` 将更新后的 `List<Task>` 传递给
    `TaskItemAdapter`。**'
- en: Steps 3 to 5 are repeated so the recycler view stays up-to-date.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 步骤 3 到 5 被重复执行，以确保回收视图保持最新状态。
- en: '![image](Images/f0661-04.png)'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0661-04.png)'
- en: Let’s take the app for a test drive.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下这个应用程序。
- en: '![Images](Images/car.png) Test Drive'
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/car.png) 测试驾驶'
- en: When we run the app, `TasksFragment`’s recycler view displays a grid of cards,
    each one showing a task name and whether the task has been completed.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，`TasksFragment`的回收视图会显示一个网格，每个卡片显示一个任务名称以及任务是否已完成。
- en: When we enter new tasks, these get added to the recycler view as soon as we
    click on the Save Task button.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入新任务时，只要点击“保存任务”按钮，这些任务就会立即添加到回收视图中。
- en: '![image](Images/f0662-02.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0662-02.png)'
- en: Congratulations! You’ve now learned how to control the recycler view’s appearance
    with layout managers, and display data in a scrollable grid of cards.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在学会了如何通过布局管理器控制回收视图的外观，并在可滚动的卡片网格中显示数据。
- en: In the next chapter, we’ll build on this knowledge to make further improvements
    to the recycler view.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续基于这些知识来进一步改进回收视图。
- en: Pool Puzzle
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池谜题
- en: '![image](Images/common01.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common01.png)'
- en: Your **goal** is to update the layout code below so that it includes a recycler
    view that displays its items in a three-column staggered grid. Take code snippets
    from the pool and place them into the blank lines in the code. You may **not**
    use the same snippet more than once, and you won’t need to use all the snippets.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**目标**是更新下面的布局代码，以便包括一个回收视图，以三列交错网格形式显示其项目。从池中获取代码片段并放入代码的空行中。每个片段只能使用一次，且不需要使用所有片段。
- en: '[PRE11]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![image](Images/f0663-01.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0663-01.png)'
- en: Note
  id: totrans-331
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note: each thing from the pool can only be used once!**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：池中的每个内容只能使用一次！**'
- en: '![Images](Images/arr.png) **Answers in [“Pool Puzzle Solution”](#pool_puzzle_solution-id00248).**'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr.png) **在 [“Pool Puzzle Solution”](#pool_puzzle_solution-id00248)
    中找到答案。**'
- en: Pool Puzzle Solution
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池谜题解决方案
- en: '![image](Images/common01.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common01.png)'
- en: Your **goal** is to update the layout code below so that it includes a recycler
    view that displays its items in a three-column staggered grid. Take code snippets
    from the pool and place them into the blank lines in the code. You may **not**
    use the same snippet more than once, and you won’t need to use all the snippets.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**目标**是更新下面的布局代码，以便包括一个回收视图，以三列交错网格形式显示其项目。从池中获取代码片段并放入代码的空行中。每个片段只能使用一次，且不需要使用所有片段。
- en: '![image](Images/f0668-01.png)![image](Images/f0668-02.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0668-01.png)![图片](Images/f0668-02.png)'
- en: Your Android Toolbox
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的安卓工具箱
- en: '![image](Images/tools.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/tools.png)'
- en: '**You’ve got [Chapter 14](ch14.xhtml#room_databasescolon_room_with_a_view)
    under your belt and now you’ve added recycler views to your toolbox.**'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经掌握了[第14章](ch14.xhtml#room_databasescolon_room_with_a_view)，现在还增加了回收视图到你的工具箱中。**'
- en: '![image](Images/f0669-01.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0669-01.png)'
