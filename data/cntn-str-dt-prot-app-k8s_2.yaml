- en: Chapter 1\. Why Kubernetes in Production Is Hard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。为什么 Kubernetes 在生产环境中很难
- en: Kubernetes is the foundation for the modern cloud native application architecture.
    By running microservices in containers, the enterprise can move from a hardware-defined
    model, tied to physical or virtual machines, to a software-defined paradigm that
    enables horizontal scale across on-premises, cloud, and hybrid environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是现代云原生应用架构的基础。通过在容器中运行微服务，企业可以从硬件定义模型（与物理或虚拟机绑定）转向软件定义范式，实现跨本地、云和混合环境的水平扩展。
- en: 'When moving to Kubernetes, day one is not as straightforward as simply deploying
    software. While the number of people who are well versed in Kubernetes operations
    is growing, there are still challenges. The following sections focus on three
    of the most significant challenges: automating storage, maintaining a cluster,
    and managing storage designed for a different computing era.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移到 Kubernetes 时，第一天的工作并不像简单部署软件那样直接。虽然了解 Kubernetes 操作的人数正在增加，但仍然存在挑战。以下部分重点讨论了三个最重要的挑战：自动化存储、维护集群以及管理为不同计算时代设计的存储。
- en: Automating Storage
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化存储
- en: Kubernetes was originally designed to handle *stateless* workloads, which don’t
    store data or other information about previous operations. While Kubernetes has
    evolved to handle *stateful* applications, which store persistent data, it has
    not grown to automate storage the same way it handles compute resources. Instead,
    Kubernetes relies on storage that sits outside the orchestration system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 最初设计用于处理 *无状态* 工作负载，即不存储有关先前操作的数据或其他信息。虽然 Kubernetes 已经发展到能够处理 *有状态*
    应用程序，即存储持久数据的应用程序，但它并没有像处理计算资源那样自动化存储。相反，Kubernetes 依赖于位于编排系统外部的存储。
- en: Automating storage is not easy, and storage administrators often have plenty
    of work to do. Provisioning storage as workloads appear and disappear, or as applications
    scale up and down, can be time-consuming operations even when assisted by automation.
    Configuring systems to add, change, and remove resources in response to thresholds
    and events is a complex job.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化存储并不容易，存储管理员通常有大量工作要做。随着工作负载的出现和消失，或者应用程序的扩展和收缩，提供存储可能是耗时的操作，即使有自动化的帮助也是如此。根据阈值和事件配置系统以响应添加、更改和删除资源是一项复杂的工作。
- en: While Kubernetes load-balances services and requests within the cluster, it
    doesn’t really know how to load-balance storage. Different workloads, applications,
    and use cases have different storage usage patterns. Storage administrators, responding
    dynamically to changing storage needs, must constantly consider when and where
    to scale out storage, how much and where to grow volumes, and how to load-balance
    storage requests across the cluster. Without integrated tools, it can be very
    difficult to automate these tasks sufficiently to keep applications running smoothly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Kubernetes 在集群内负载均衡服务和请求，但它并不真正知道如何负载均衡存储。不同的工作负载、应用程序和用例具有不同的存储使用模式。存储管理员必须动态响应变化的存储需求，不断考虑何时以及在哪里扩展存储、增长容量以及如何在集群中负载均衡存储请求。如果没有集成工具，要充分自动化这些任务以确保应用程序平稳运行将非常困难。
- en: In a modern DevOps software development environment, automation is key. For
    the enterprise to adopt Kubernetes, it must be possible to automatically scale,
    balance, and protect data as demand changes. For the storage administrator, these
    are often high-touch efforts. Managing storage capacity can be time-consuming
    and disruptive to running applications. To keep efforts focused on application
    development means reducing this overhead through automation as much as possible.
    This requires storage platforms and tools that are aware of each application’s
    API and storage requirements, and are capable of managing storage automatically
    in ways analogous to how Kubernetes handles compute resources.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 DevOps 软件开发环境中，自动化是关键。企业要采用 Kubernetes，必须能够根据需求自动扩展、平衡和保护数据。对于存储管理员来说，这通常是高度互动的工作。管理存储容量可能会耗费大量时间，并且会影响正在运行的应用程序。为了将精力集中在应用程序开发上，通过尽可能多地自动化来减少这种开销是必要的。这需要存储平台和工具了解每个应用程序的
    API 和存储需求，并能够以类似 Kubernetes 处理计算资源的方式自动管理存储。
- en: Maintaining a Kubernetes Cluster
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护 Kubernetes 集群
- en: Kubernetes abstracts compute infrastructure for distributed cloud native applications,
    decoupling them from the hardware where they run. Hardware health, failure, and
    other concerns no longer bear directly on the performance of the software. When
    hardware fails, the containers that contain the software move automatically and
    the application keeps running.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes抽象了分布式云原生应用的计算基础设施，将它们与运行它们的硬件解耦。硬件健康、故障和其他问题不再直接影响软件的性能。当硬件出现故障时，包含软件的容器会自动移动，应用程序继续运行。
- en: However, the underlying hardware that supports the cluster requires continual
    monitoring to ensure availability to applications and their users. While Kubernetes
    manages and moves containers in response to changing conditions and demands, any
    enterprise with an on-premises deployment in its portfolio must maintain physical
    servers to keep the cluster running. The IT team must ensure that it can support
    the service level agreements (SLAs) that the business requires. This involves
    replacing hard drives and other components as they fail, which is a very common
    occurrence at scale.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，支持集群的底层硬件需要持续监控，以确保应用程序及其用户的可用性。虽然Kubernetes根据变化的条件和需求管理和移动容器，但任何拥有本地部署的企业都必须维护物理服务器以保持集群运行。IT团队必须确保能够支持业务所需的服务级别协议（SLAs）。这涉及在硬件组件出现故障时更换硬盘和其他组件，这在大规模中非常常见。
- en: This maintenance often requires migrating large pools of replicated data from
    one storage infrastructure to another, which is complicated by the different needs
    of the various applications that use the storage. It’s nearly impossible to achieve
    a significant manual migration without downtime and without losing any application’s
    operating state. An intelligent storage platform can help, easing the task of
    protecting and migrating data as hardware is provisioned and managed, or as applications
    move to new environments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此类维护通常需要将大量复制数据从一种存储基础设施迁移到另一种，这受到使用存储的各种应用程序不同需求的复杂性的影响。几乎不可能在没有停机并且没有丢失任何应用程序操作状态的情况下进行重大手动迁移。智能存储平台可以帮助简化此任务，在硬件配置和管理时或将应用程序移至新环境时保护和迁移数据。
- en: Storage for Another Era
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一时代的存储
- en: Traditional applications, which run directly on physical or virtual machines,
    have simpler storage needs than distributed, containerized applications. Monolithic
    application state is often stored in a shared, mutable table that is straightforward
    to back up. In fact, some applications running on VMs rely only on local storage.
    In such cases, backing up the VM is sufficient to back up not only the application’s
    data but its configuration and running state as well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用直接在物理或虚拟机上运行，其存储需求比分布式容器化应用更简单。单体应用程序状态通常存储在共享的可变表中，可以轻松备份。事实上，一些在虚拟机上运行的应用程序仅依赖于本地存储。在这种情况下，备份虚拟机就足以备份应用程序的数据、配置和运行状态。
- en: Containerized applications are different. Because containers are immutable and
    ephemeral, any workloads that require persistent data must connect to an external
    system. Backing up a container is not sufficient to capture persistent data, since
    the data doesn’t reside in the container itself. Instead, Kubernetes provides
    a mechanism for associating a unit of persistent storage with a *pod*, one or
    more containers running on a single host node and sharing resources.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化应用程序不同。由于容器是不可变且短暂的，需要持久数据的任何工作负载必须连接到外部系统。备份容器不足以捕获持久数据，因为数据不存储在容器本身中。相反，Kubernetes提供了一种机制，可以将持久存储单元与一个*Pod*关联起来，一个或多个容器在单个主机节点上运行并共享资源。
- en: Kubernetes typically maintains a set number of replicas of every active pod
    to ensure application availability. Each pod can define one or more local or remote
    *volumes*, or cohesive units of persistent storage space. Volumes provide the
    capability to persist data beyond the lifetime of the containers or the pod itself.
    Multiple containers in a pod can mount and access the same volume, so applications
    can share data between containers that have different tasks. For example, an init
    container can run before the service starts, creating a custom configuration file
    for the environment where the application is running.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通常维护每个活动pod的一组副本，以确保应用程序的可用性。每个pod可以定义一个或多个本地或远程*volumes*，或者说是持久存储空间的集成单元。Volumes提供了持久化数据的能力，超出了容器或pod本身的生命周期。一个pod中的多个容器可以挂载和访问同一个volume，因此应用程序可以在具有不同任务的容器之间共享数据。例如，一个初始化容器可以在服务启动前运行，为应用程序运行环境创建自定义配置文件。
- en: Initially, extending the capabilities of Kubernetes storage meant changing the
    Kubernetes codebase itself. Kubernetes has deprecated this “in-tree” approach,
    replacing it with an API called the Container Storage Interface (CSI), which enables
    the development of storage plug-ins without changing any Kubernetes code. The
    CSI provides a way to support multiple storage interfaces that allow containerized
    workloads to store persistent data on different types of externally managed storage
    pools ([Figure 1-1](#fig_1_kubernetes_storage_with_the_container_storage_inte)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，扩展Kubernetes存储的能力意味着改变Kubernetes代码库本身。Kubernetes已经弃用了这种“内置”方法，取而代之的是一种称为容器存储接口（CSI）的API，它允许开发存储插件而无需更改任何Kubernetes代码。CSI提供了一种支持多种存储接口的方式，允许容器化工作负载在不同类型的外部管理存储池上存储持久数据（[图1-1](#fig_1_kubernetes_storage_with_the_container_storage_inte)）。
- en: '![Kubernetes storage with the Container Storage Interface](Images/csdp_0101.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用容器存储接口的Kubernetes存储](Images/csdp_0101.png)'
- en: Figure 1-1\. Kubernetes storage with the Container Storage Interface
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. 使用容器存储接口的Kubernetes存储
- en: Although this model solves some problems, it fails to bring storage into the
    virtualized, software-defined infrastructure where containerized applications
    run. While the compute resources used by modern enterprise applications run on
    application-aware infrastructure, provisioned and managed declaratively and driven
    by the end user, storage remains a physical concept tied to virtual or physical
    servers. Because cloud native applications are distributed, backing up any given
    VM is likely to capture partial data from multiple applications, while failing
    to store complete data from any single application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种模型解决了一些问题，但未能将存储引入到容器化应用程序运行的虚拟化、软件定义基础设施中。虽然现代企业应用程序使用的计算资源运行在应用程序感知的基础设施上，通过最终用户声明式地配置和管理，存储仍然是与虚拟或物理服务器绑定的物理概念。因为云原生应用程序是分布式的，备份任何给定的虚拟机很可能会捕捉来自多个应用程序的部分数据，同时未能存储任何单个应用程序的完整数据。
- en: For this reason, on-premises and cloud-based storage systems designed for physical
    or virtual machines are poorly suited to the scale and complexity of containerized
    applications. While containers are software defined, disposable, replaceable,
    and decoupled from hardware, traditional storage is concerned with managing pools
    of physical media. Containerized applications are highly dynamic, scaling up and
    down rapidly as demand changes by creating, destroying, and moving containers
    automatically. Traditional storage methods don’t respond quickly enough to support
    these modern architectures.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为物理或虚拟机设计的本地和基于云的存储系统不适合容器化应用程序的规模和复杂性。虽然容器是软件定义的、可丢弃的、可替换的，并且与硬件解耦，但传统存储涉及管理物理媒体池。容器化应用程序具有高度动态性，根据需求的变化通过自动创建、销毁和移动容器来快速缩放。传统的存储方法无法快速响应以支持这些现代架构。
- en: For file, block, and object storage, cloud native storage solutions emerged
    to orchestrate a software-defined pool of persistent storage for access across
    a Kubernetes cluster, using a containerized architecture to provide dynamic storage
    at scale. These solutions work well, but they often target specific types of storage,
    a few filesystems, and a selection of database services.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文件、块和对象存储，云原生存储解决方案出现了，用于协调跨Kubernetes集群访问的持久存储的软件定义池，采用容器化架构以提供规模化的动态存储。这些解决方案运作良好，但它们通常针对特定类型的存储、少数文件系统和一些数据库服务进行优化。
- en: 'The enterprise needs software-defined, general-purpose storage that’s capable
    of scaling up to meet the demands of big data: streaming, batch processing, transactional
    databases, high availability and disaster recovery, data locality, and data mobility.
    To support fast recovery time objectives, backups must incorporate all application
    state, including data and configuration.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 企业需要软件定义的通用存储，能够扩展以满足大数据的需求：流式处理、批处理、事务性数据库、高可用性和灾难恢复、数据局部性和数据迁移。为了支持快速恢复时间目标，备份必须包含所有应用状态，包括数据和配置。
- en: Specific application types have additional, more stringent needs. For example,
    database applications need to guarantee that data transactions are ACID (atomic,
    consistent, isolated, and durable) and usually require secondary indexes. Because
    pods are ephemeral and movable, it is difficult to meet these guarantees in a
    containerized environment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的应用类型有额外的更严格需求。例如，数据库应用需要保证数据事务是ACID（原子性、一致性、隔离性和持久性），通常需要次要索引。因为Pod是短暂且可移动的，很难在容器化环境中满足这些保证。
- en: To make Kubernetes work for the enterprise, storage solutions must work at the
    container level rather than the VM level, must be aware of Kubernetes namespaces,
    and must be able to back up entire applications across VMs, including their configuration
    and state.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使Kubernetes适用于企业，存储解决方案必须在容器级别而不是VM级别工作，必须了解Kubernetes命名空间，并且必须能够备份跨VM的整个应用程序，包括其配置和状态。
