- en: Chapter 2\. Managing the GRUB Bootloader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *bootloader* is the software that loads your operating system after you
    power up your computer. The GRUB (GRand Unified Bootloader) bootloader is the
    most commonly used bootloader on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'GRUB supports a number of useful features: boot multiple operating systems
    on a single PC, live configuration editing, themeable interface, and rescue modes.
    In this chapter you will learn about all of these.'
  prefs: []
  type: TYPE_NORMAL
- en: GRUB versus GRUB 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two major GRUB releases, legacy GRUB and GRUB 2\. GRUB 2 is version
    1.99 and up. Legacy GRUB ended at version 0.97 in 2005\. A lot of GRUB how-tos
    still reference legacy GRUB and compare it with GRUB 2\. In this chapter I’m not
    going to talk about legacy GRUB. It’s been retired for a long time and has little
    relevance to using GRUB 2, so this chapter will focus exclusively on GRUB 2.
  prefs: []
  type: TYPE_NORMAL
- en: Some Linux distros use plain GRUB naming, some use GRUB 2\. For example, Ubuntu
    has the */boot/grub/* directory and *grub-mkconfig* command, and Fedora calls
    them */boot/grub2/* and *grub2-mkconfig*. Check your filepaths and names. In this
    chapter I use the Ubuntu naming scheme, except in distro-specific examples.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a computer hasn’t changed all that much since UNIVAC was first built,
    back in the 1940s in the last millennium. Starting a computer is called *bootstrapping*,
    a reference to “pulling yourself up by your own bootstraps,” which is impossible.
    The difficulty with a programmable computer is it needs software instructions
    to tell it what to do, but where will those instructions come from before the
    operating system is loaded?
  prefs: []
  type: TYPE_NORMAL
- en: The solution for the modern x86_64 PC architecture is to store the initial startup
    instructions on a chip on the motherboard and program the CPU with the address
    of these instructions. You could say the CPU is hardwired to receive the startup
    instructions. This address is the same on all x86_64 machines, and that is why
    you can mix and match motherboards and CPUs. (This address is called the *reset
    vector*, if you feel like doing some research.)
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simplified description of how it all works:'
  prefs: []
  type: TYPE_NORMAL
- en: The first stage is launched when the system is powered up. The CPU fetches instructions
    from the BIOS/UEFI firmware, and then initializes CPU caches and system memory.
    When the system memory is initialized, the Power On Self-Test (POST) runs, testing
    the memory and testing connectivity with other hardware such as keyboard, mouse,
    display, and disk drives. You have probably noticed the LEDs on your keyboard
    and mouse lighting up and heard the noises from inside your computer’s case as
    your disk drives are probed.
  prefs: []
  type: TYPE_NORMAL
- en: After the POST, the BIOS/UEFI firmware launches the second stage of startup
    and looks for the boot files on your hard disk. The GRUB bootloader loads the
    necessary files to launch your operating system and complete system startup.
  prefs: []
  type: TYPE_NORMAL
- en: When your boot screen appears ([Figure 2-1](#fig-grub-2)), GRUB waits a configured
    amount of time for your input, usually 5–10 seconds, then boots the default if
    you do nothing. Navigate the boot menu with your arrow keys. When you press any
    key, it stops the countdown, and then you can explore your boot options at your
    leisure.
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 2-1](#fig-grub-2), the first entry boots the system. The next two
    entries open submenus with more boot options. When you are exploring submenus,
    press the Esc key to get back to the main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Some Linux distros, such as Fedora and Ubuntu, do not display the boot screen
    when there is only one installed operating system. In this case, press the Shift
    key at startup to see the boot screen. There is a configuration option to always
    display the boot screen.
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to customize the appearance and behavior of your GRUB menu by adjusting
    a few options in the GRUB configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer a graphical tool for customizing your GRUB menu, try GRUB Customizer
    ([Figure 2-2](#fig-grub-customizer)). This is available in most Linux distributions
    as the *grub-customizer* package, except openSUSE, which has a GRUB module (labeled
    Boot Loader) in the YaST system configuration utility.
  prefs: []
  type: TYPE_NORMAL
- en: '![openSUSE GRUB boot screen](Images/lcb2_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. openSUSE GRUB boot screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![GRUB Customizer](Images/lcb2_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. GRUB Customizer
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 2.1 Rebuilding Your GRUB Configuration File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever you change your GRUB configuration, you need to rebuild it.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command to rebuild your GRUB configuration varies. On Fedora and openSUSE,
    use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Some distros, such as Ubuntu, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Ubuntu Linux also has a script that runs *grub-mkconfig*, *update-grub*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some Linux distributions helpfully provide the correct command at the top of
    */etc/default/grub*.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to always verify your correct filenames and paths when you edit your
    GRUB configuration because they vary on the different Linuxes.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your motherboard documentation, to learn about your system’s BIOS/UEFI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/szAiR)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GRUB has multiple single-purpose man pages; run *man -k grub* to see all of
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*info grub* or *info grub2*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.2 Unhiding a Hidden GRUB Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your favorite Linux distribution hides the GRUB menu when you have only one
    operating system installed on your computer, and you want it to appear every time
    you boot up.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Several Linux distros do this, including Ubuntu and Fedora. You can unhide your
    GRUB menu temporarily by pressing and holding the Shift key at startup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit */etc/default/grub* to unhide it permanently with the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If the lines `GRUB_HIDDEN_TIMEOUT=0` and `GRUB_HIDDEN_TIMEOUT_QUIET=true` are
    in your file, comment them out.
  prefs: []
  type: TYPE_NORMAL
- en: After changing */etc/default/grub*, rebuild your GRUB configuration ([Recipe
    2.1](#rec-rebuild-grub)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`GRUB_HIDDEN_TIMEOUT=0` means do not display the GRUB menu, while `GRUB_HIDDEN_TIMEOUT_QUIET=true`
    means do not display the countdown timer.'
  prefs: []
  type: TYPE_NORMAL
- en: If you install another operating system in a multiboot configuration, then the
    GRUB menu should unhide itself.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 2.1](#rec-rebuild-grub)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/DqiwS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GRUB has multiple single-purpose man pages; run *man -k grub* to see all of
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*info grub* or *info grub2*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.3 Booting to a Different Linux Kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are wondering about the extra entries in your GRUB menu that reference specific
    Linux kernel versions, like in [Figure 2-3](#fig-grub-15). You want to know what
    they are for and what to do with them.
  prefs: []
  type: TYPE_NORMAL
- en: '![GRUB kernel boot options](Images/lcb2_0203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-3\. GRUB kernel boot options
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over time, as you update your Linux system, older Linux kernels are retained
    and added to your GRUB menu. This provides an easy way to boot to a known good
    older kernel if something goes awry with a newer kernel. You don’t have to keep
    the older kernels and can remove them with your package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In olden times kernel updates were a big deal, because they often meant bug
    fixes, additional support for hardware, such as video, network, and audio interfaces,
    and support for software features, such as proprietary file formats and new protocols.
    The rate of change was rapid, and it was not unusual for a new kernel to not work
    correctly, so keeping the option to boot to an older kernel was routine. These
    days such troubles are less common, and kernel updates are generally undramatic.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/qxk2m)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Linux Kernel Archives](https://oreil.ly/l5xyK)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.4 Understanding GRUB Configuration Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You know that configuring GRUB is done a little differently than most programs,
    and you want to know where the GRUB configuration files are and which ones you
    use to manage GRUB.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GRUB configuration files are in */boot/grub/*, */etc/default/grub*, and */etc/grub.d/*.
    The GRUB configuration is complex, with many scripts and modules.
  prefs: []
  type: TYPE_NORMAL
- en: GRUB versus GRUB 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember, as discussed in the introduction to this chapter, some Linux distros
    use plain GRUB naming, and some use GRUB2 in filenames and commands. In this chapter
    I use plain GRUB naming, except in distro-specific examples.
  prefs: []
  type: TYPE_NORMAL
- en: '*/etc/default/grub* is for configuring the appearance of the GRUB menu you
    see at startup, such as hiding or showing the boot menu, applying themes and background
    images, menu timeout, and kernel options.'
  prefs: []
  type: TYPE_NORMAL
- en: The files in */etc/grub.d/* support more complex configurations, and */boot/grub/*
    stores image and theme files for customizing the appearance of your GRUB menu.
  prefs: []
  type: TYPE_NORMAL
- en: The main GRUB configuration file is */boot/grub/grub.cfg*, which GRUB reads
    at startup. You do not edit this file because it is built from */etc/grub.d/*
    and */etc/default/grub*; every time you make configuration changes you must rebuild
    the GRUB configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The GRUB configuration is automatically rebuilt when you install any updates
    that affect the boot process, such as installing newer kernels and removing older
    kernels.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in scripting, studying the GRUB files is an excellent
    course in organizing large numbers of interdependent scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The files in */etc/grub.d/* are called *drop-in* files. Rather than dealing
    with a giant single configuration file, each drop-in file contains a configuration
    for a specific task. These files are numbered in the order that GRUB should read
    them, with lower numbers indicating higher priority. The following example is
    from Fedora 32:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these files is a script, and each must have the executable bit set.
    You can disable any of them by clearing the executable bit, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Re-enable a script by adding the executable bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/RWh6k)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GRUB has numerous man pages; run *man -k grub* to see all of them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*info grub* or *info grub2*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.xhtml#cha-files-directories)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.5 Writing a Minimal GRUB Configuration File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to write the most minimal working GRUB configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the most basic */etc/default/grub* file, with only the necessary entries
    to boot a Linux system and show the GRUB menu. The following example is for openSUSE
    Leap 15.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Remember [Figure 2-1](#fig-grub-2)? [Figure 2-4](#fig-grub-16) is the same system,
    but with a minimal GRUB configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![Minimal GRUB menu](Images/lcb2_0204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-4\. Minimal GRUB menu
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are more options you can try, such as different ways to set the default
    boot option, change background images and themes, change the colors, and change
    the screen resolution. See the Discussion to learn about these.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are numerous options you can use in */etc/default/grub*, and you can
    ignore most of them. These are the options that I think are the most useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_DEFAULT=`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sets the default boot entry. The boot entries are counted from 0 in *grub.cfg*,
    but not numbered. How do you know what numbers each boot option has? There is
    no obvious way to figure this out; you have to count your boot options manually.
    Count the “menuentry” sections to figure out the numbering. A menu entry looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the *awk* command to list them for you, like this example for Ubuntu
    20.04:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You probably don’t want to use a recovery mode entry as the default, or a memory
    test, though it doesn’t hurt anything if you do. UEFI Firmware Settings is a shortcut
    to your system’s BIOS/UEFI.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_TIMEOUT=10`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the number of seconds the GRUB menu waits before booting the default, and
    `GRUB_TIMEOUT_STYLE=menu` displays the menu during the countdown. `GRUB_TIMEOUT=0`
    boots immediately without displaying the menu, and `GRUB_TIMEOUT=-1` disables
    automatic booting and waits for the user to select a boot entry.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_DEFAULT=saved`'
  prefs: []
  type: TYPE_NORMAL
- en: Together with `GRUB_SAVEDEFAULT=true`, `GRUB_DEFAULT=saved` makes the last menu
    entry that you booted the default for the next boot.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_CMDLINE_LINUX=`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds Linux kernel options for all menu entries.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_CMDLINE_LINUX_DEFAULT=`'
  prefs: []
  type: TYPE_NORMAL
- en: Passes kernel options only to the default menu entries. `G⁠R⁠U⁠B⁠_⁠C⁠M⁠D⁠L⁠I⁠N⁠E⁠_⁠L⁠I⁠N​U⁠X⁠_⁠D⁠E⁠F⁠A⁠U⁠L⁠T⁠=⁠"⁠q⁠u⁠i⁠e⁠t⁠
    ⁠s⁠p⁠l⁠a⁠s⁠h⁠"` is a common default option that disables the verbose output at
    startup and displays a graphical splash screen. [Figure 2-5](#fig-grub-17) shows
    what the verbose output looks like. If you have `G⁠R⁠U⁠B⁠_⁠C⁠M⁠D⁠L⁠I⁠N⁠E⁠_⁠L⁠I⁠N⁠U⁠X⁠_⁠D⁠E⁠F​A⁠U⁠L⁠T⁠=⁠"⁠q⁠u⁠i⁠e⁠t⁠
    ⁠s⁠p⁠l⁠a⁠s⁠h⁠"` configured, you can see this output without changing your configuration
    by pressing the Esc key during startup.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_TERMINAL=gfxterm`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the your GRUB screen to a graphical mode that supports colors and images.
    `GRUB_TERMINAL=console` disables graphical mode.
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_GFXMODE=`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the screen resolution for the graphical mode, for example, `GRUB_GFXMODE=1024x768`.
    Run the *set pager=1* command, and then run *videoinfo* from your GRUB command
    line to see your supported modes ([Figure 2-6](#fig-grub-18)). *set pager=1* lets
    you use the arrow keys to page up and down long command output. `GRUB_GFXMODE=auto`
    calculates a reasonable default.
  prefs: []
  type: TYPE_NORMAL
- en: '![Startup messages](Images/lcb2_0205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-5\. Startup messages
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Supported video modes](Images/lcb2_0206.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-6\. Supported video modes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`GRUB_BACKGROUND=`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets a background image on the GRUB menu, using the image of your choice (see
    [Recipe 2.6](#rec-grub-menu-background)).
  prefs: []
  type: TYPE_NORMAL
- en: '`GRUB_THEME=`'
  prefs: []
  type: TYPE_NORMAL
- en: Decorates your GRUB menu with a complete theme (see [Recipe 2.8](#rec-theme-grub)).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Recipe 2.6](#rec-grub-menu-background)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 2.8](#rec-theme-grub)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/zIbDg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GRUB has multiple single-purpose man pages; run *man -k grub* to see all of
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*info grub* or *info grub2*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.6 Setting a Custom Background for Your GRUB Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don’t care for the appearance of your GRUB menu, and you want to pretty
    it up.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an image in PNG, 8-bit JPG, or TFA format. It can be any size, and
    GRUB will scale it to fit. In the following example, a photo of Duchess enjoying
    the bookshelves graces our GRUB menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy your image to */boot/grub/*, and add the full filepath of your image to
    */etc/default/grub*. The photo of Duchess is */boot/grub/duchess-books.jpg*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If there is a `GRUB_THEME=` line, make sure it is commented out, then rebuild
    your GRUB configuration ([Recipe 2.1](#rec-rebuild-grub)).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a line like “Found background: /boot/grub/duchess-books.jpg”
    in the output of your rebuild command. If you do not see this, there is an error
    in your configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: When it looks correct, rebuild, reboot, and enjoy your new GRUB menu background
    ([Figure 2-7](#fig-grub-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Duchess the literacy cat gracing the GRUB menu](Images/lcb2_0207.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-7\. Duchess the literacy cat gracing the GRUB menu
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The fonts in the example are barely readable, so jump ahead to [Recipe 2.7](#rec-change-font-color)
    to learn how to change their colors.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may use any image on your system; it does not have to be in */boot/grub/*.
    Putting your image files in */boot/grub/* keeps all your GRUB customizations in
    one place and makes them available to all installed Linux systems on a multiboot
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/xv9AE)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GRUB has multiple single-purpose man pages; run *man -k grub* to see all of
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*info grub* or *info grub2*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.7 Changing Font Colors in the GRUB Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your new background is lovely ([Figure 2-7](#fig-grub-7)), but your fonts are
    barely visible, and you need to change the colors so you can read your GRUB menu.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is fun because you can quickly preview colors from the GRUB command line.
    Then, when you know what colors you want, edit */etc/default/grub* and create
    a new file in */etc/grub.d/* to load your colors, then rebuild */boot/grub/grub/cfg*.
    Reboot to enjoy your background image with pretty colored fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Start up your computer, and when the GRUB menu appears, press C to open the
    GRUB command line ([Figure 2-8](#fig-grub-9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![The GRUB command line](Images/lcb2_0208.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-8\. The GRUB command line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The following two commands set the colors in [Figure 2-9](#fig-grub-10):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting GRUB menu colors from the GRUB command line](Images/lcb2_0209.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-9\. Setting GRUB menu colors from the GRUB command line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may set and test each color pair one pair at a time. From the GRUB menu,
    press C to open the GRUB command shell. Type your command (sorry, no copy-paste),
    press Enter, then press Esc to return to the menu to see how it looks. You can
    list your previous commands with the up and down arrow keys, and edit and reuse
    them rather than retyping everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must specify two colors in this order: foreground/background. All the colors
    are solid, with no transparency, with one exception: when you select *black* as
    a background color it is transparent. That is why `menu_color_normal=` must have
    black as the background color, when you have a background image. If you use any
    other color, your image will be covered by the background color. The `menu_color_highlight=`
    background color only applies to whatever line is currently selected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you figure out your colors, make them permanent. Boot up and create a
    new script in */etc/grub.d/*. In the following example, it is called *07_font_colors*.
    Copy this exactly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then make it executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add these lines to your */etc/default/grub* file, using your colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Rebuild your GRUB configuration ([Recipe 2.1](#rec-rebuild-grub)) and reboot
    to see if it worked.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'See [Recipe 2.4](#rec-grub-config-files) to learn about the files in */etc/grub.d/*
    and why the filenames must start with numbers. In my experience it doesn’t matter
    if your fonts script starts early or late, but if it doesn’t work for you, try
    changing the priority. Make sure it is executable. The options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*menu_color_highlight* controls the colors of the highlighted lines inside
    the menu box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*menu_color_normal* controls the colors of the not-highlighted lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use these colors exactly as they are written in [Table 2-1](#ch2-color-table),
    all lowercase and with this exact spelling.
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-1\. GRUB color options
  prefs: []
  type: TYPE_NORMAL
- en: '| Color options |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| black | dark-gray | light-green | magenta |'
  prefs: []
  type: TYPE_TB
- en: '| blue | green | light-gray | red |'
  prefs: []
  type: TYPE_TB
- en: '| brown | light-cyan | light-magenta | white |'
  prefs: []
  type: TYPE_TB
- en: '| cyan | light-blue | light-red | yellow |'
  prefs: []
  type: TYPE_TB
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/BZHWt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GRUB has multiple single-purpose man pages; run *man -k grub* to see all of
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*info grub* or *info grub2*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recipe 2.4](#rec-grub-config-files)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.8 Applying a Theme to Your GRUB Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You like prettying up your GRUB menu, and you want to know if there are themes
    for the GRUB menu and how to install them.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You are in luck, for there are many themes for GRUB. Start by using your package
    manager with the **`grep`** command to search for package names. This example
    is for Ubuntu Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using *theme | grep grub* to filter your results will find all relevant packages,
    like *grub-theme-breeze*, *grub2-themes-ubuntu-mate*, and *grub-breeze-theme*.
    Install themes just as you would any package.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your new theme should be installed in */boot/grub/themes*. Find your new theme,
    for example */boot/grub/themes/ubuntu-mate*, and look for the *theme.txt* file.
    Enter the full path in */etc/default/grub*, like this example for the *ubuntu-mate*
    theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Be sure to comment out any other configuration lines pertaining to appearance
    that you may have, such as `GRUB_BACKGROUND=`, any custom font colors, and any
    other themes. Then rebuild your GRUB configuration ([Recipe 2.1](#rec-rebuild-grub)).
    You should see a line like “Found theme: /boot/grub/themes/ubuntu-mate/theme.txt”
    in your command output.'
  prefs: []
  type: TYPE_NORMAL
- en: If all goes well, reboot and you will be rewarded with a screen like [Figure 2-10](#fig-grub-mate-theme).
    If it does not display correctly, recheck your configuration and commands.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ubuntu MATE GRUB theme](Images/lcb2_0210.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-10\. The Ubuntu MATE GRUB theme
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNOME Themes](https://oreil.ly/oLJtx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDE Themes](https://oreil.ly/SLdkp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/LeIHu)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.9 Rescuing a Nonbooting System from the grub> Prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start your system, it stops at a GRUB prompt, `grub>`, and does not
    boot. You need to know how to boot your system and then repair your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the boot process stops at the `grub>` prompt ([Figure 2-11](#fig-grub-13)),
    this means it found */boot/grub/* but cannot find the root filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: '![The GRUB command shell](Images/lcb2_0211.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-11\. The GRUB command shell
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You need to find the root filesystem, the Linux kernel, and its matching *initrd*
    file. When you are in the GRUB command shell, the entire filesystem is open to
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command you should run is to invoke the pager, so that you can page
    up and down long output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: List your disks and partitions. GRUB has its own way of identifying hard disks
    and partitions. It numbers disks from 0, partitions from 1, and labels all hard
    disks as *hd*. On a running Linux system, hard disks are identified as */dev/sda*,
    */dev/sdb*, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, GRUB lists two hard disks, *hd0* and *hd1*, which
    are the same as */dev/sda* and */dev/sdb*. *hd0,gpt5* is the same as */dev/sda5*,
    and *hd1,msdos1* is the same as */dev/sdb1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This output shows that *hd0* has a *gpt* partition table, and *hd1* has the
    old-fashioned *msdos* partition table. It is not necessary to use the *gpt* and
    *msdos* labels when you are listing partitions and files.
  prefs: []
  type: TYPE_NORMAL
- en: 'GRUB tells you the filesystem types, universally unique identifiers (UUIDs),
    and other information on the partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to find */boot*. Suppose you remember that it is in the root filesystem
    on the second partition; start looking there. A forward slash following the partition
    name means list all files and directories on the partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'All boot files are in the */boot* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything you need to boot your system is there. Set the root filesystem partition,
    kernel, and initrd image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Tab Completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the Bash shell, the GRUB command shell supports tab completion. This
    means you can start typing */boot/vml*, for example, then press the Tab key to
    autocomplete the line, or display a list of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple *vmlinuz* and *initrd* files, use the two with the newest
    matching version numbers. If all the commands are correct, your system will boot
    and you can fix your GRUB configuration ([Recipe 2.11](#rec-grub-restore)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When */boot* is in its own partition, you won’t see any other directories because
    it is not in the root filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: '*vmlinuz-5.3.18-lp152.57-default* is the compressed Linux kernel.'
  prefs: []
  type: TYPE_NORMAL
- en: '*initrd-5.3.18-lp152.57-default* is the initial ramdisk, a temporary root filesystem
    used only to start up your system.'
  prefs: []
  type: TYPE_NORMAL
- en: Boot failures are caused by corrupted files; adding, removing, or moving hard
    disks; installing or removing operating systems; or repartitioning. If you can’t
    get to a GRUB prompt, see [Chapter 19](Images/ch19.html#cha-rescue-recovery) to
    learn how to rescue your system with SystemRescue.
  prefs: []
  type: TYPE_NORMAL
- en: You can practice using the `grub>` shell by pressing C when your GRUB menu appears.
    This is safe because changes you make do not survive a reboot.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/8SdwS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.10 Rescuing a Nonbooting System from the grub rescue> Prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start your system, it stops at a GRUB prompt, `grub rescue>`, and does
    not boot. You need to know how to boot your system and then repair your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `grub rescue>` prompt ([Figure 2-12](#fig-grub-14)) is the rescue shell,
    which means GRUB could not find */boot*. Not to worry, you can find it from the
    GRUB prompt, boot your system, and then make a permanent fix.
  prefs: []
  type: TYPE_NORMAL
- en: '![The GRUB rescue shell](Images/lcb2_0212.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-12\. The GRUB rescue shell
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'List your partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: At this point there is no tab-completion or paging, so you have to type everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'GRUB tells you the filesystem types, UUIDs, and other information on the partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t know which partition contains */boot*, you will have to list the
    files and directories in each one until you find it. You do not have to use the
    *gpt* and *msdos* labels. A forward slash following the device name means list
    all files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Hurrah, there it is in the root filesystem. List the files in */boot*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few additional commands for `grub rescue>`. You have to tell it
    where */boot/grub* is, and then load the *normal* and *linux* kernel modules,
    which are in */boot/grub/i386-pc* (along with many other kernel modules that GRUB
    uses at startup). *normal* changes the boot mode from rescue to normal, and *linux*
    starts the system loader:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After loading *normal* and *linux*, you have tab completion. You could also
    turn on paging, *set pager=1*, to enable using the arrow keys to scroll to your
    previous commands. Now tell GRUB where to find the *kernel* and *initrd* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If there are multiple *vmlinuz* and *initrd* files, use the two with the newest
    matching version numbers. If all the commands are correct, your system will boot
    and you can fix your GRUB configuration ([Recipe 2.11](#rec-grub-restore)).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When */boot* is on its own partition, you won’t see any other directories because
    it is in its own filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/6REHG)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.11 Reinstalling Your GRUB Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You were able to boot your system from the GRUB prompt, and now you need to
    know how to make a permanent repair.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check your GRUB configuration carefully for errors. When it looks correct,
    rebuild your GRUB configuration ([Recipe 2.1](#rec-rebuild-grub)). Then you need
    to reinstall GRUB. In the following example, it is reinstalled to */dev/sda*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Using the Correct Rebuild Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in [Recipe 2.1](#rec-rebuild-grub) and [“GRUB versus GRUB 2”](#grubvgrub2),
    you must check your filepaths to ensure you are using the correct rebuild command.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to install it to the correct disk, if you have more than one, and use
    only the device name (for example, */dev/sda* ) and not a partition (such as */dev/sda1*).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be sure to have good current backups. If your rescue efforts fail, try reinstalling
    GRUB from SystemRescue ([Recipe 19.9](ch19.xhtml#rec-repair-grub)).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GNU GRUB Manual](https://oreil.ly/zkwke)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 19](Images/ch19.html#cha-rescue-recovery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
