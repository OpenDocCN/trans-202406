- en: 'Chapter 5\. Sample Application: Visitors Site'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Real, production-level applications are difficult. Container-based architectures
    are often made up of multiple services, each requiring their own configuration
    and installation process. Maintaining these types of applications, including the
    individual components and their interactions, is a time-consuming and error-prone
    process. Operators are designed to reduce the difficulty in this process.
  prefs: []
  type: TYPE_NORMAL
- en: A simple, one–container “Hello World” application isn’t going to provide enough
    complexity to fully demonstrate what Operators can do. To really help you understand
    the capabilities of Operators, we need an application that requires multiple Kubernetes
    resources with configuration values that cross between them to use for demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we introduce the Visitors Site application, which we will use
    as an example in the following chapters that cover writing Operators. We’ll take
    a look at the application architecture and how to run the site, as well as the
    process of installing it through traditional Kubernetes manifests. In the chapters
    that follow, we’ll create Operators to deploy this application using each of the
    approaches provided by the Operator SDK (Helm, Ansible, and Go), and explore the
    benefits and drawbacks of each.
  prefs: []
  type: TYPE_NORMAL
- en: Application Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Visitors Site tracks information about each request to its home page. Each
    time the page is refreshed, an entry is stored with details about the client,
    backend server, and timestamp. The home page displays a list of the most recent
    visits (as shown in [Figure 5-1](#fig5-1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5-1: Visitors Site Homepage](assets/kuop_0501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. Visitors Site home page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'While the home page itself is fairly simple, the architecture is what makes
    this an interesting example for exploring Operators. The Visitors Site is a traditional,
    three-tier application, consisting of:'
  prefs: []
  type: TYPE_NORMAL
- en: A web frontend, implemented in [React](https://reactjs.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A REST API, implemented in [Python](https://www.python.org/) using [the Django
    framework](https://www.djangoproject.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database, using [MySQL](https://www.mysql.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As shown in [Figure 5-2](#fig5-2), each of these components is deployed as a
    separate container. The flow is simple, with users interacting with the web interface,
    which itself makes calls to the backend REST API. The data submitted to the REST
    API is persisted in a MySQL database, which also runs as its own container.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5-2: Visitors Site Architecture](assets/kuop_0502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-2\. Visitors Site architecture
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note that the database does not connect to a persistent volume and stores its
    data ephemerally. While this isn’t a suitable production solution, for the purposes
    of this example the important aspects are the deployments and interactions between
    the containers themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Installation with Manifests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each component in the Visitors Site requires two Kubernetes resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs: []
  type: TYPE_NORMAL
- en: Contains the information needed to create the containers, including the image
    name, exposed ports, and specific configuration for a single deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs: []
  type: TYPE_NORMAL
- en: A network abstraction across all containers in a deployment. If a deployment
    is scaled up beyond one container, which we will do with the backend, the service
    sits in front and balances incoming requests across all of the replicas.
  prefs: []
  type: TYPE_NORMAL
- en: A third resource is used to store the authentication details for the database.
    The MySQL container uses this *secret* when it is started, and the backend containers
    use it to authenticate against the database when making requests.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, there are configuration values that must be consistent between
    components. For example, the backend needs to know the name of the database service
    to connect to. When deploying applications through manifests, awareness of these
    relationships is required to ensure that the values line up.
  prefs: []
  type: TYPE_NORMAL
- en: In the following manifests, the provided values will produce a working Visitors
    Site deployment. Each section will highlight specific instances where user intervention
    was required.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all of the manifests in the [book’s GitHub repository](https://github.com/kubernetes-operators-book/chapters/tree/master/ch05).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The secret must be created before the database is deployed, since it is used
    during the container startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: When the database and backend deployments use the secret, it is referred to
    by this name.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_sample_application__visitors_site_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity in this example, the username and password are defaulted to testing
    values.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the definition for the secret resource in the *database.yaml* file
    in this book’s [GitHub repository](https://oreil.ly/jZTgt).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the secret is in place, use the following manifest to deploy a MySQL instance
    into Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The deployment name must be unique to the namespace in which it is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_sample_application__visitors_site_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The deployment requires the details of the image to deploy, including its name
    and hosting repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_sample_application__visitors_site_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Users must be aware of each port that the image exposes, and must explicitly
    reference them.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_sample_application__visitors_site_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The values used to configure the containers for this specific deployment are
    passed as environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_sample_application__visitors_site_CO2-5)'
  prefs: []
  type: TYPE_NORMAL
- en: The secret provides the values for the database authentication credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind the value of the container port, as well as each of the environment
    variables, as other manifests use these values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment causes the creation of the MySQL container; however, it does
    not provide any ingress configuration on how to access it. For that, we will need
    a service. The following manifest will create a Kubernetes service that provides
    access to the MySQL deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: As with deployments, service names must be unique in a given namespace. This
    will also apply to the deployment and services for the backend and frontend components.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_sample_application__visitors_site_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The service maps to a port exposed by a deployment, so this value must be the
    same as in the `ports` section of the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the MySQL resources, the backend needs both a deployment and a service.
    However, whereas the database is standalone, the configuration for the backend
    relies heavily on the values set for the database. While this isn’t an unreasonable
    requirement, it falls on the user to ensure that the values are consistent across
    both resources. A single error could result in the backend not being able to communicate
    with the database. Here’s the manifest to deploy the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Each deployment configuration includes the number of containers it should spawn.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_sample_application__visitors_site_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: These values must be manually checked to ensure they match up with the values
    set on the MySQL deployment. Otherwise, the backend will not be able to establish
    a connection to the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_sample_application__visitors_site_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: This value tells the backend where to find the database and must match the name
    of the MySQL service created previously.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_sample_application__visitors_site_CO4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: As with the database deployment, the secret provides the authentication credentials
    for the database.
  prefs: []
  type: TYPE_NORMAL
- en: One of the major benefits of using containerized applications is the ability
    they give you to individually scale specific components. In the backend deployment
    shown here, the `replicas` field can be modified to scale the backend. The example
    Operators in the following chapters use a custom resource to expose this replica
    count as a first-class configuration value of the Visitors Site custom resource.
    Users do not need to manually navigate to the specific backend deployment as they
    do when using manifests. The Operator knows how to appropriately use the entered
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service manifest looks similar to the one you created for the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: As with the database service, the port referenced in the service definition
    must match up with that exposed by the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_sample_application__visitors_site_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the backend is configured to run through port 30685 on the
    same IP as Minikube. The frontend uses this port when making backend calls for
    data. For simplicity, the frontend defaults to using this value, so it does not
    need to be specified when the frontend is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The frontend is in a similar position as the backend in the sense that it needs
    configuration that is consistent with the backend deployment. Once again, it falls
    on the user to manually verify that these values are consistent in both locations.
    Here’s the manifest that creates the frontend deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: To make the Visitors Site application more interesting, you can override the
    home page title through an environment variable. The CR you’ll learn how to create
    in the next chapters will expose it as a value of the Visitors Site, shielding
    end users from having to know in which deployment to specify the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the MySQL and backend deployments, the following manifest creates
    a service that provides access to the frontend deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_sample_application__visitors_site_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The frontend service looks very similar to the backend service, with the notable
    difference that it runs on port 30686.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Manifests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can run the Visitors Site for yourself using the `kubectl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Accessing the Visitors Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using these manifests, you can find the home page by using the IP address of
    the Minikube instance and specifying port 30686 in your browser. The `minikube`
    command provides the IP address to access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For this Minikube instance, you can access the Visitors Site by opening a browser
    and going to *http://192.168.99.100:30686*.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking refresh a few times will populate the table on that page with details
    of the internal cluster IP and the timestamp of each request, as previously shown
    in [Figure 5-1](#fig5-1).
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to deploying the manifests, you delete the created resources using
    the `kubectl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use this sample application in the following chapters to demonstrate
    a variety of technologies on which you can build Operators.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the Operator implementations, keep in mind the end user experience.
    In this chapter we demonstrated a manifest-based installation, requiring a number
    of manual changes and internal references to be made. All of the following Operator
    implementations create a custom resource definition that acts as the sole API
    for creating and configuring an instance of the Visitors Site.
  prefs: []
  type: TYPE_NORMAL
